{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T19:45:43.327Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T19:49:15.876Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T20:38:01.736Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T20:38:11.662Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T20:39:27.157Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:42:29.634Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:42:46.075Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:43:50.367Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:45:05.832Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:46:22.500Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:46:40.849Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:47:12.674Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:48:06.527Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:48:45.758Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:49:23.210Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:50:14.759Z',
  label: '\x1B[32me-Commerce Backend Debuger\x1B[39m'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:50:27.053Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:51:47.314Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:52:42.333Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:55:52.688Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T21:56:01.162Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T22:23:56.806Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-04T22:23:57.539Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 500 1671 - 12.141 ms',
  timestamp: '2023-03-04T22:24:03.868Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T22:24:25.986Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-04T22:24:26.686Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 500 1661 - 8.731 ms',
  timestamp: '2023-03-04T22:24:49.849Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-04T22:25:27.969Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-04T22:25:28.998Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 500 1659 - 7.841 ms',
  timestamp: '2023-03-04T22:25:37.276Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:01:37.471Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:01:38.642Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 500 1467 - 12.676 ms',
  timestamp: '2023-03-05T19:01:51.264Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:02:15.817Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:02:17.038Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 500 1465 - 109.603 ms',
  timestamp: '2023-03-05T19:02:19.966Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:02:51.905Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:02:53.060Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:03:38.417Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:03:39.345Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:03:47.996Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:03:48.946Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:04:00.827Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:04:01.666Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:04:14.070Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:04:14.949Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 500 1465 - 14.994 ms',
  timestamp: '2023-03-05T19:04:20.795Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:07:21.907Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:07:22.846Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET / 404 139 - 3.814 ms',
  timestamp: '2023-03-05T19:07:29.681Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 500 260 - 34.494 ms',
  timestamp: '2023-03-05T19:07:34.406Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 200 582 - 21.747 ms',
  timestamp: '2023-03-05T19:09:18.653Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /favicon.ico 404 150 - 0.900 ms',
  timestamp: '2023-03-05T19:09:18.707Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:10:01.869Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:10:03.345Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 66.472 ms',
  timestamp: '2023-03-05T19:10:08.345Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:10:46.885Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:10:47.692Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 141.824 ms',
  timestamp: '2023-03-05T19:10:50.542Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 16.106 ms',
  timestamp: '2023-03-05T19:10:52.876Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:11:05.791Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:11:06.900Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 63.670 ms',
  timestamp: '2023-03-05T19:11:12.977Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:11:28.692Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:11:29.601Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 40.865 ms',
  timestamp: '2023-03-05T19:11:34.548Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:11:45.769Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:11:46.620Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 64.187 ms',
  timestamp: '2023-03-05T19:11:50.563Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 16.188 ms',
  timestamp: '2023-03-05T19:11:53.361Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:12:06.418Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:12:07.679Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 64.108 ms',
  timestamp: '2023-03-05T19:12:10.492Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 11.276 ms',
  timestamp: '2023-03-05T19:12:13.035Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:12:19.883Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:12:20.948Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:12:30.821Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:12:31.611Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 64.724 ms',
  timestamp: '2023-03-05T19:12:37.382Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 15.261 ms',
  timestamp: '2023-03-05T19:12:41.064Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:15:23.374Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:15:24.432Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 51.983 ms',
  timestamp: '2023-03-05T19:15:33.262Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T19:16:49.621Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T19:16:50.798Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 200 627 - 28.428 ms',
  timestamp: '2023-03-05T19:16:53.370Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 103.301 ms',
  timestamp: '2023-03-05T19:31:35.253Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 19.360 ms',
  timestamp: '2023-03-05T19:34:14.285Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 304  - 11.205 ms',
  timestamp: '2023-03-05T19:36:59.073Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:30:36.604Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:30:37.466Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:30:51.033Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:30:52.437Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:32:51.536Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:32:52.842Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:34:11.868Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:34:13.008Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:35:47.624Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:35:49.127Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:35:59.222Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:36:00.511Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:38:39.109Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:38:40.034Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:39:17.687Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:39:18.657Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1012 - 69.656 ms',
  timestamp: '2023-03-05T21:39:21.566Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1152 - 22.794 ms',
  timestamp: '2023-03-05T21:50:05.375Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T21:52:40.960Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T21:52:42.044Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:11:20.518Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:11:21.363Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:15:57.439Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:15:58.580Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:19:17.085Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:19:18.683Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:19:34.244Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:19:35.032Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:19:43.849Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:19:44.636Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:21:19.772Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:21:20.853Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 70 - 20189.682 ms',
  timestamp: '2023-03-05T22:22:21.473Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /registerFail 404 151 - 6.668 ms',
  timestamp: '2023-03-05T22:22:21.498Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:23:11.370Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:23:12.264Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1152 - 58.403 ms',
  timestamp: '2023-03-05T22:23:25.408Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20178.600 ms',
  timestamp: '2023-03-05T22:23:55.252Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 200 1185 - 28.786 ms',
  timestamp: '2023-03-05T22:23:55.375Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/style.css 404 157 - 9.053 ms',
  timestamp: '2023-03-05T22:23:55.760Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/style.css 404 157 - 1.345 ms',
  timestamp: '2023-03-05T22:24:11.089Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:44:38.961Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:44:39.836Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:44:56.008Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:44:57.090Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1152 - 61.874 ms',
  timestamp: '2023-03-05T22:45:04.769Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20203.055 ms',
  timestamp: '2023-03-05T22:45:35.746Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 34.339 ms',
  timestamp: '2023-03-05T22:45:35.865Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/style.css 404 157 - 5.569 ms',
  timestamp: '2023-03-05T22:45:36.065Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 200 1186 - 15.645 ms',
  timestamp: '2023-03-05T22:47:53.200Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:48:42.561Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:48:43.551Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register   -  ms',
  timestamp: '2023-03-05T22:48:57.313Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20130.926 ms',
  timestamp: '2023-03-05T22:49:17.729Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 86.385 ms',
  timestamp: '2023-03-05T22:49:18.533Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 8.156 ms',
  timestamp: '2023-03-05T22:49:18.898Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:50:34.977Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:50:35.966Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:50:46.108Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:50:47.540Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20224.611 ms',
  timestamp: '2023-03-05T22:51:12.629Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 173.896 ms',
  timestamp: '2023-03-05T22:51:13.557Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 6.129 ms',
  timestamp: '2023-03-05T22:51:13.839Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:51:44.690Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:51:45.598Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T22:51:48.425Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T22:51:49.257Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 90.575 ms',
  timestamp: '2023-03-05T22:52:01.630Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 8.185 ms',
  timestamp: '2023-03-05T22:52:01.827Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1153 - 23.884 ms',
  timestamp: '2023-03-05T22:52:10.012Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.752 ms',
  timestamp: '2023-03-05T22:52:10.638Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20196.506 ms',
  timestamp: '2023-03-05T22:52:38.815Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 22.658 ms',
  timestamp: '2023-03-05T22:52:38.910Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.402 ms',
  timestamp: '2023-03-05T22:52:39.082Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 200 768 - 15.242 ms',
  timestamp: '2023-03-05T22:53:23.595Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 3.459 ms',
  timestamp: '2023-03-05T22:53:23.653Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /login 302 70 - 10019.648 ms',
  timestamp: '2023-03-05T22:53:38.445Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login/failed 200 831 - 20.325 ms',
  timestamp: '2023-03-05T22:53:38.547Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 2.152 ms',
  timestamp: '2023-03-05T22:53:38.657Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1153 - 12.859 ms',
  timestamp: '2023-03-05T22:54:11.318Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.598 ms',
  timestamp: '2023-03-05T22:54:11.434Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20131.661 ms',
  timestamp: '2023-03-05T22:54:41.030Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 16.982 ms',
  timestamp: '2023-03-05T22:54:41.135Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 2.780 ms',
  timestamp: '2023-03-05T22:54:41.658Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 200 768 - 9.759 ms',
  timestamp: '2023-03-05T22:57:36.636Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 2.173 ms',
  timestamp: '2023-03-05T22:57:36.760Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /login 302 70 - 10006.159 ms',
  timestamp: '2023-03-05T22:57:50.874Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login/failed 304  - 17.830 ms',
  timestamp: '2023-03-05T22:57:50.978Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.551 ms',
  timestamp: '2023-03-05T22:57:51.171Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T23:03:06.617Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:03:06.744Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /login 302 70 - 10040.254 ms',
  timestamp: '2023-03-05T23:03:30.489Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login/failed 304  - 82.291 ms',
  timestamp: '2023-03-05T23:03:31.293Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 5.602 ms',
  timestamp: '2023-03-05T23:03:31.666Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:16:33.030Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T23:16:34.015Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 200 768 - 171.542 ms',
  timestamp: '2023-03-05T23:16:48.930Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 6.485 ms',
  timestamp: '2023-03-05T23:16:49.005Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /favicon.ico 404 150 - 7.183 ms',
  timestamp: '2023-03-05T23:16:49.136Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /login   -  ms',
  timestamp: '2023-03-05T23:16:54.190Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /login 302 70 - 10018.057 ms',
  timestamp: '2023-03-05T23:17:04.296Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login/failed 304  - 26.577 ms',
  timestamp: '2023-03-05T23:17:04.841Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.771 ms',
  timestamp: '2023-03-05T23:17:05.006Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:21:58.581Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  data: <ref *1> Mongoose {
    connections: [
      <ref *28> NativeConnection {
        base: [Circular *1],
        collections: {},
        models: {},
        config: {},
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object: null prototype] {
          '0': 'disconnected',
          '1': 'connected',
          '2': 'connecting',
          '3': 'disconnecting',
          '99': 'uninitialized',
          disconnected: 0,
          connected: 1,
          connecting: 2,
          disconnecting: 3,
          uninitialized: 99
        },
        _readyState: 1,
        _closeCalled: undefined,
        _hasOpened: true,
        plugins: [],
        id: 0,
        _queue: [],
        _listening: false,
        _connectionOptions: { driverInfo: { name: 'Mongoose', version: '7.0.0' } },
        _connectionString: 'mongodb+srv://dcsweb:MopG23GHLEu3GwB0@dcsweb.snm3hyr.mongodb.net/?retryWrites=true&w=majority',
        client: <ref *3> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            componentSeverities: {
              command: 'off',
              topology: 'off',
              serverSelection: 'off',
              connection: 'off',
              default: 'off'
            },
            maxDocumentLength: 1000,
            logDestination: <ref *2> WriteStream {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: null,
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 0,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: null,
                ended: false,
                endEmitted: false,
                reading: false,
                constructed: true,
                sync: true,
                needReadable: false,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: null
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd]
              },
              _eventsCount: 1,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: true,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              columns: 140,
              rows: 12,
              _type: 'tty',
              fd: 2,
              _isStdio: true,
              destroySoon: [Function: destroy],
              _destroy: [Function: dummyDestroy],
              [Symbol(async_id_symbol)]: 51,
              [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: false,
              [Symbol(kSetKeepAliveInitialDelay)]: 0,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          },
          s: {
            url: 'mongodb+srv://dcsweb:MopG23GHLEu3GwB0@dcsweb.snm3hyr.mongodb.net/?retryWrites=true&w=majority',
            bsonOptions: {
              raw: false,
              useBigInt64: false,
              promoteLongs: true,
              promoteValues: true,
              promoteBuffers: false,
              ignoreUndefined: false,
              bsonRegExp: false,
              serializeFunctions: false,
              fieldsAsRaw: {},
              enableUtf8Validation: true
            },
            namespace: MongoDBNamespace { db: 'admin', collection: undefined },
            hasBeenClosed: false,
            sessionPool: ServerSessionPool {
              client: [Circular *3],
              sessions: List {
                count: 0,
                head: <ref *4> {
                  next: [Circular *4],
                  prev: [Circular *4],
                  value: null
                }
              }
            },
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          topology: <ref *5> Topology {
            _events: [Object: null prototype] {
              topologyDescriptionChanged: [
                [Function: detectShardedTopology],
                [Function (anonymous)]
              ],
              connectionPoolCreated: [Function (anonymous)],
              connectionPoolReady: [Function (anonymous)],
              connectionPoolCleared: [Function (anonymous)],
              connectionPoolClosed: [Function (anonymous)],
              connectionCreated: [Function (anonymous)],
              connectionReady: [Function (anonymous)],
              connectionClosed: [Function (anonymous)],
              connectionCheckOutStarted: [Function (anonymous)],
              connectionCheckOutFailed: [Function (anonymous)],
              connectionCheckedOut: [Function (anonymous)],
              connectionCheckedIn: [Function (anonymous)],
              commandStarted: [Function (anonymous)],
              commandSucceeded: [Function (anonymous)],
              commandFailed: [Function (anonymous)],
              serverOpening: [Function (anonymous)],
              serverClosed: [Function (anonymous)],
              serverDescriptionChanged: [Function (anonymous)],
              topologyOpening: [Function (anonymous)],
              topologyClosed: [Function (anonymous)],
              error: [Function (anonymous)],
              timeout: [Function (anonymous)],
              close: [Function (anonymous)],
              serverHeartbeatStarted: [Function (anonymous)],
              serverHeartbeatSucceeded: [Function (anonymous)],
              serverHeartbeatFailed: [Function (anonymous)]
            },
            _eventsCount: 26,
            _maxListeners: undefined,
            selectServerAsync: [Function (anonymous)],
            s: {
              id: 0,
              options: [Object: null prototype] {
                hosts: [
                  new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                  new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                  new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                ],
                credentials: MongoCredentials {
                  username: 'dcsweb',
                  password: 'MopG23GHLEu3GwB0',
                  source: 'admin',
                  mechanism: 'DEFAULT',
                  mechanismProperties: {}
                },
                compressors: [ 'none' ],
                connectTimeoutMS: 30000,
                directConnection: false,
                metadata: {
                  driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                  os: {
                    type: 'Linux',
                    name: 'linux',
                    architecture: 'x64',
                    version: '6.1.13-200.fc37.x86_64'
                  },
                  platform: 'Node.js v18.12.1, LE (unified)',
                  version: '5.1.0|7.0.0'
                },
                enableUtf8Validation: true,
                forceServerObjectId: false,
                heartbeatFrequencyMS: 10000,
                keepAlive: true,
                keepAliveInitialDelay: 120000,
                loadBalanced: false,
                localThresholdMS: 15,
                maxConnecting: 2,
                maxIdleTimeMS: 0,
                maxPoolSize: 100,
                minPoolSize: 0,
                minHeartbeatFrequencyMS: 500,
                monitorCommands: false,
                noDelay: true,
                pkFactory: { createPk: [Function: createPk] },
                raw: false,
                readPreference: ReadPreference {
                  mode: 'primary',
                  tags: undefined,
                  hedge: undefined,
                  maxStalenessSeconds: undefined,
                  minWireVersion: undefined
                },
                retryReads: true,
                retryWrites: true,
                serverSelectionTimeoutMS: 30000,
                socketTimeoutMS: 0,
                srvMaxHosts: 0,
                srvServiceName: 'mongodb',
                writeConcern: WriteConcern { w: 'majority' },
                waitQueueTimeoutMS: 0,
                zlibCompressionLevel: 0,
                dbName: 'test',
                userSpecifiedAuthSource: false,
                userSpecifiedReplicaSet: false,
                srvHost: 'dcsweb.snm3hyr.mongodb.net',
                tls: true,
                mongoLoggerOptions: {
                  componentSeverities: {
                    command: 'off',
                    topology: 'off',
                    serverSelection: 'off',
                    connection: 'off',
                    default: 'off'
                  },
                  maxDocumentLength: 1000,
                  logDestination: <ref *2> WriteStream {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: null,
                    _closeAfterHandlingError: false,
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 0,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: null,
                      ended: false,
                      endEmitted: false,
                      reading: false,
                      constructed: true,
                      sync: true,
                      needReadable: false,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: false,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: null
                    },
                    _events: [Object: null prototype] {
                      end: [Function: onReadableStreamEnd]
                    },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    columns: 140,
                    rows: 12,
                    _type: 'tty',
                    fd: 2,
                    _isStdio: true,
                    destroySoon: [Function: destroy],
                    _destroy: [Function: dummyDestroy],
                    [Symbol(async_id_symbol)]: 51,
                    [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  }
                },
                replicaSet: 'atlas-6h3glt-shard-0',
                [Symbol(@@mdb.enableMongoLogger)]: false
              },
              seedlist: [
                new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
              ],
              state: 'connected',
              description: TopologyDescription {
                type: 'ReplicaSetWithPrimary',
                servers: Map(3) {
                  'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017' => ServerDescription {
                    address: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                    type: 'RSPrimary',
                    hosts: [
                      'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                      'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                      'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                    ],
                    passives: [],
                    arbiters: [],
                    tags: {
                      region: 'SA_EAST_1',
                      nodeType: 'ELECTABLE',
                      provider: 'AWS',
                      workloadType: 'OPERATIONAL'
                    },
                    minWireVersion: 0,
                    maxWireVersion: 13,
                    roundTripTime: 402,
                    lastUpdateTime: 531563,
                    lastWriteDate: 2023-03-05T23:23:25.000Z,
                    error: null,
                    topologyVersion: {
                      processId: new ObjectId("6402382a0e21490e021d214d"),
                      counter: 6
                    },
                    setName: 'atlas-6h3glt-shard-0',
                    setVersion: 1,
                    electionId: new ObjectId("7fffffff000000000000001c"),
                    logicalSessionTimeoutMinutes: 30,
                    primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                    me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                    '$clusterTime': {
                      clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                      signature: {
                        hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                        keyId: new Long("7168531580753805315")
                      }
                    }
                  },
                  'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017' => ServerDescription {
                    address: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                    type: 'RSSecondary',
                    hosts: [
                      'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                      'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                      'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                    ],
                    passives: [],
                    arbiters: [],
                    tags: {
                      workloadType: 'OPERATIONAL',
                      nodeType: 'ELECTABLE',
                      provider: 'AWS',
                      region: 'SA_EAST_1'
                    },
                    minWireVersion: 0,
                    maxWireVersion: 13,
                    roundTripTime: 308,
                    lastUpdateTime: 531552,
                    lastWriteDate: 2023-03-05T23:23:25.000Z,
                    error: null,
                    topologyVersion: {
                      processId: new ObjectId("6402371beee3a1cd86210b91"),
                      counter: 4
                    },
                    setName: 'atlas-6h3glt-shard-0',
                    setVersion: 1,
                    electionId: null,
                    logicalSessionTimeoutMinutes: 30,
                    primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                    me: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                    '$clusterTime': {
                      clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                      signature: {
                        hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                        keyId: new Long("7168531580753805315")
                      }
                    }
                  },
                  'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017' => ServerDescription {
                    address: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                    type: 'RSSecondary',
                    hosts: [
                      'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                      'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                      'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                    ],
                    passives: [],
                    arbiters: [],
                    tags: {
                      workloadType: 'OPERATIONAL',
                      region: 'SA_EAST_1',
                      nodeType: 'ELECTABLE',
                      provider: 'AWS'
                    },
                    minWireVersion: 0,
                    maxWireVersion: 13,
                    roundTripTime: 330,
                    lastUpdateTime: 531576,
                    lastWriteDate: 2023-03-05T23:23:25.000Z,
                    error: null,
                    topologyVersion: {
                      processId: new ObjectId("6402390def6293ac4d778e4a"),
                      counter: 3
                    },
                    setName: 'atlas-6h3glt-shard-0',
                    setVersion: 1,
                    electionId: null,
                    logicalSessionTimeoutMinutes: 30,
                    primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                    me: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                    '$clusterTime': {
                      clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                      signature: {
                        hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                        keyId: new Long("7168531580753805315")
                      }
                    }
                  }
                },
                stale: false,
                compatible: true,
                heartbeatFrequencyMS: 10000,
                localThresholdMS: 15,
                setName: 'atlas-6h3glt-shard-0',
                maxElectionId: new ObjectId("7fffffff000000000000001c"),
                maxSetVersion: 1,
                commonWireVersion: 0,
                logicalSessionTimeoutMinutes: 30
              },
              serverSelectionTimeoutMS: 30000,
              heartbeatFrequencyMS: 10000,
              minHeartbeatFrequencyMS: 500,
              servers: Map(3) {
                'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017' => <ref *6> Server {
                  _events: [Object: null prototype] {
                    serverHeartbeatStarted: [Function (anonymous)],
                    serverHeartbeatSucceeded: [Function (anonymous)],
                    serverHeartbeatFailed: [Function (anonymous)],
                    commandStarted: [Function (anonymous)],
                    commandSucceeded: [Function (anonymous)],
                    commandFailed: [Function (anonymous)],
                    connectionPoolCreated: [Function (anonymous)],
                    connectionPoolReady: [Function (anonymous)],
                    connectionPoolCleared: [Function (anonymous)],
                    connectionPoolClosed: [Function (anonymous)],
                    connectionCreated: [Function (anonymous)],
                    connectionReady: [Function (anonymous)],
                    connectionClosed: [Function (anonymous)],
                    connectionCheckOutStarted: [Function (anonymous)],
                    connectionCheckOutFailed: [Function (anonymous)],
                    connectionCheckedOut: [Function (anonymous)],
                    connectionCheckedIn: [Function (anonymous)],
                    descriptionReceived: [Function (anonymous)]
                  },
                  _eventsCount: 18,
                  _maxListeners: undefined,
                  serverApi: undefined,
                  s: {
                    description: ServerDescription {
                      address: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                      type: 'RSPrimary',
                      hosts: [
                        'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                        'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                        'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                      ],
                      passives: [],
                      arbiters: [],
                      tags: {
                        region: 'SA_EAST_1',
                        nodeType: 'ELECTABLE',
                        provider: 'AWS',
                        workloadType: 'OPERATIONAL'
                      },
                      minWireVersion: 0,
                      maxWireVersion: 13,
                      roundTripTime: 402,
                      lastUpdateTime: 531563,
                      lastWriteDate: 2023-03-05T23:23:25.000Z,
                      error: null,
                      topologyVersion: {
                        processId: new ObjectId("6402382a0e21490e021d214d"),
                        counter: 6
                      },
                      setName: 'atlas-6h3glt-shard-0',
                      setVersion: 1,
                      electionId: new ObjectId("7fffffff000000000000001c"),
                      logicalSessionTimeoutMinutes: 30,
                      primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                      me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                      '$clusterTime': {
                        clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                        signature: {
                          hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                          keyId: new Long("7168531580753805315")
                        }
                      }
                    },
                    options: [Object: null prototype] {
                      hosts: [
                        new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                      ],
                      credentials: MongoCredentials {
                        username: 'dcsweb',
                        password: 'MopG23GHLEu3GwB0',
                        source: 'admin',
                        mechanism: 'DEFAULT',
                        mechanismProperties: {}
                      },
                      compressors: [ 'none' ],
                      connectTimeoutMS: 30000,
                      directConnection: false,
                      metadata: {
                        driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                        os: {
                          type: 'Linux',
                          name: 'linux',
                          architecture: 'x64',
                          version: '6.1.13-200.fc37.x86_64'
                        },
                        platform: 'Node.js v18.12.1, LE (unified)',
                        version: '5.1.0|7.0.0'
                      },
                      enableUtf8Validation: true,
                      forceServerObjectId: false,
                      heartbeatFrequencyMS: 10000,
                      keepAlive: true,
                      keepAliveInitialDelay: 120000,
                      loadBalanced: false,
                      localThresholdMS: 15,
                      maxConnecting: 2,
                      maxIdleTimeMS: 0,
                      maxPoolSize: 100,
                      minPoolSize: 0,
                      minHeartbeatFrequencyMS: 500,
                      monitorCommands: false,
                      noDelay: true,
                      pkFactory: { createPk: [Function: createPk] },
                      raw: false,
                      readPreference: ReadPreference {
                        mode: 'primary',
                        tags: undefined,
                        hedge: undefined,
                        maxStalenessSeconds: undefined,
                        minWireVersion: undefined
                      },
                      retryReads: true,
                      retryWrites: true,
                      serverSelectionTimeoutMS: 30000,
                      socketTimeoutMS: 0,
                      srvMaxHosts: 0,
                      srvServiceName: 'mongodb',
                      writeConcern: WriteConcern { w: 'majority' },
                      waitQueueTimeoutMS: 0,
                      zlibCompressionLevel: 0,
                      dbName: 'test',
                      userSpecifiedAuthSource: false,
                      userSpecifiedReplicaSet: false,
                      srvHost: 'dcsweb.snm3hyr.mongodb.net',
                      tls: true,
                      mongoLoggerOptions: {
                        componentSeverities: {
                          command: 'off',
                          topology: 'off',
                          serverSelection: 'off',
                          connection: 'off',
                          default: 'off'
                        },
                        maxDocumentLength: 1000,
                        logDestination: <ref *2> WriteStream {
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: null,
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 0,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: null,
                            ended: false,
                            endEmitted: false,
                            reading: false,
                            constructed: true,
                            sync: true,
                            needReadable: false,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: false,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: false,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: null
                          },
                          _events: [Object: null prototype] {
                            end: [Function: onReadableStreamEnd]
                          },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: false,
                            needDrain: false,
                            ending: false,
                            ended: false,
                            finished: false,
                            destroyed: false,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: true,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: null,
                          _server: null,
                          columns: 140,
                          rows: 12,
                          _type: 'tty',
                          fd: 2,
                          _isStdio: true,
                          destroySoon: [Function: destroy],
                          _destroy: [Function: dummyDestroy],
                          [Symbol(async_id_symbol)]: 51,
                          [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: false,
                          [Symbol(kSetKeepAliveInitialDelay)]: 0,
                          [Symbol(kBytesRead)]: 0,
                          [Symbol(kBytesWritten)]: 0
                        }
                      },
                      replicaSet: 'atlas-6h3glt-shard-0',
                      [Symbol(@@mdb.enableMongoLogger)]: false
                    },
                    state: 'connected',
                    topology: [Circular *5],
                    pool: ConnectionPool {
                      _events: [Object: null prototype] {
                        connectionPoolCreated: [Function (anonymous)],
                        connectionPoolReady: [Function (anonymous)],
                        connectionPoolCleared: [Function (anonymous)],
                        connectionPoolClosed: [Function (anonymous)],
                        connectionCreated: [Function (anonymous)],
                        connectionReady: [Function (anonymous)],
                        connectionClosed: [Function (anonymous)],
                        connectionCheckOutStarted: [Function (anonymous)],
                        connectionCheckOutFailed: [Function (anonymous)],
                        connectionCheckedOut: [Function (anonymous)],
                        connectionCheckedIn: [Function (anonymous)],
                        commandStarted: [Function (anonymous)],
                        commandSucceeded: [Function (anonymous)],
                        commandFailed: [Function (anonymous)],
                        clusterTimeReceived: [Function (anonymous)]
                      },
                      _eventsCount: 15,
                      _maxListeners: undefined,
                      options: {
                        hostAddress: new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                        hosts: [
                          new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                          new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                          new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                        ],
                        credentials: MongoCredentials {
                          username: 'dcsweb',
                          password: 'MopG23GHLEu3GwB0',
                          source: 'admin',
                          mechanism: 'DEFAULT',
                          mechanismProperties: {}
                        },
                        compressors: [ 'none' ],
                        connectTimeoutMS: 30000,
                        directConnection: false,
                        metadata: {
                          driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                          os: {
                            type: 'Linux',
                            name: 'linux',
                            architecture: 'x64',
                            version: '6.1.13-200.fc37.x86_64'
                          },
                          platform: 'Node.js v18.12.1, LE (unified)',
                          version: '5.1.0|7.0.0'
                        },
                        enableUtf8Validation: true,
                        forceServerObjectId: false,
                        heartbeatFrequencyMS: 10000,
                        keepAlive: true,
                        keepAliveInitialDelay: 120000,
                        loadBalanced: false,
                        localThresholdMS: 15,
                        maxConnecting: 2,
                        maxIdleTimeMS: 0,
                        maxPoolSize: 100,
                        minPoolSize: 0,
                        minHeartbeatFrequencyMS: 500,
                        monitorCommands: false,
                        noDelay: true,
                        pkFactory: { createPk: [Function: createPk] },
                        raw: false,
                        readPreference: ReadPreference {
                          mode: 'primary',
                          tags: undefined,
                          hedge: undefined,
                          maxStalenessSeconds: undefined,
                          minWireVersion: undefined
                        },
                        retryReads: true,
                        retryWrites: true,
                        serverSelectionTimeoutMS: 30000,
                        socketTimeoutMS: 0,
                        srvMaxHosts: 0,
                        srvServiceName: 'mongodb',
                        writeConcern: WriteConcern { w: 'majority' },
                        waitQueueTimeoutMS: 0,
                        zlibCompressionLevel: 0,
                        dbName: 'test',
                        userSpecifiedAuthSource: false,
                        userSpecifiedReplicaSet: false,
                        srvHost: 'dcsweb.snm3hyr.mongodb.net',
                        tls: true,
                        mongoLoggerOptions: {
                          componentSeverities: {
                            command: 'off',
                            topology: 'off',
                            serverSelection: 'off',
                            connection: 'off',
                            default: 'off'
                          },
                          maxDocumentLength: 1000,
                          logDestination: <ref *2> WriteStream {
                            connecting: false,
                            _hadError: false,
                            _parent: null,
                            _host: null,
                            _closeAfterHandlingError: false,
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 0,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [],
                              flowing: null,
                              ended: false,
                              endEmitted: false,
                              reading: false,
                              constructed: true,
                              sync: true,
                              needReadable: false,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: false,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: null
                            },
                            _events: [Object: null prototype] {
                              end: [Function: onReadableStreamEnd]
                            },
                            _eventsCount: 1,
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: false,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: true,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: null,
                            _server: null,
                            columns: 140,
                            rows: 12,
                            _type: 'tty',
                            fd: 2,
                            _isStdio: true,
                            destroySoon: [Function: destroy],
                            _destroy: [Function: dummyDestroy],
                            [Symbol(async_id_symbol)]: 51,
                            [Symbol(kHandle)]: TTY {
                              [Symbol(owner_symbol)]: [Circular *2]
                            },
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: null,
                            [Symbol(kBuffer)]: null,
                            [Symbol(kBufferCb)]: null,
                            [Symbol(kBufferGen)]: null,
                            [Symbol(kCapture)]: false,
                            [Symbol(kSetNoDelay)]: false,
                            [Symbol(kSetKeepAlive)]: false,
                            [Symbol(kSetKeepAliveInitialDelay)]: 0,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0
                          }
                        },
                        replicaSet: 'atlas-6h3glt-shard-0',
                        connectionType: [class Connection extends TypedEventEmitter] {
                          COMMAND_STARTED: 'commandStarted',
                          COMMAND_SUCCEEDED: 'commandSucceeded',
                          COMMAND_FAILED: 'commandFailed',
                          CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                          CLOSE: 'close',
                          MESSAGE: 'message',
                          PINNED: 'pinned',
                          UNPINNED: 'unpinned'
                        },
                        minPoolSizeCheckFrequencyMS: 100,
                        autoEncrypter: undefined,
                        [Symbol(@@mdb.enableMongoLogger)]: false
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(poolState)]: 'ready',
                      [Symbol(server)]: [Circular *6],
                      [Symbol(connections)]: List {
                        count: 1,
                        head: <ref *7> {
                          next: {
                            next: [Circular *7],
                            prev: [Circular *7],
                            value: Connection {
                              _events: [Object: null prototype] {
                                commandStarted: [Function (anonymous)],
                                commandSucceeded: [Function (anonymous)],
                                commandFailed: [Function (anonymous)],
                                clusterTimeReceived: [Function (anonymous)]
                              },
                              _eventsCount: 4,
                              _maxListeners: undefined,
                              id: 1,
                              address: '18.230.140.150:27017',
                              socketTimeoutMS: 0,
                              monitorCommands: false,
                              serverApi: undefined,
                              closed: false,
                              helloOk: true,
                              lastHelloMS: 54,
                              [Symbol(kCapture)]: false,
                              [Symbol(hello)]: {
                                helloOk: true,
                                topologyVersion: {
                                  processId: new ObjectId("6402382a0e21490e021d214d"),
                                  counter: 6
                                },
                                hosts: [
                                  'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                                  'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                                  'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                                ],
                                setName: 'atlas-6h3glt-shard-0',
                                setVersion: 1,
                                ismaster: true,
                                secondary: false,
                                primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                                tags: {
                                  region: 'SA_EAST_1',
                                  nodeType: 'ELECTABLE',
                                  provider: 'AWS',
                                  workloadType: 'OPERATIONAL'
                                },
                                me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                                electionId: new ObjectId("7fffffff000000000000001c"),
                                lastWrite: {
                                  opTime: {
                                    ts: new Timestamp({ t: 1678058606, i: 1 }),
                                    t: 28
                                  },
                                  lastWriteDate: 2023-03-05T23:23:26.000Z,
                                  majorityOpTime: {
                                    ts: new Timestamp({ t: 1678058606, i: 1 }),
                                    t: 28
                                  },
                                  majorityWriteDate: 2023-03-05T23:23:26.000Z
                                },
                                maxBsonObjectSize: 16777216,
                                maxMessageSizeBytes: 48000000,
                                maxWriteBatchSize: 100000,
                                localTime: 2023-03-05T23:23:26.221Z,
                                logicalSessionTimeoutMinutes: 30,
                                connectionId: 47148,
                                minWireVersion: 0,
                                maxWireVersion: 13,
                                readOnly: false,
                                ok: 1,
                                '$clusterTime': {
                                  clusterTime: new Timestamp({ t: 1678058606, i: 1 }),
                                  signature: {
                                    hash: new Binary(Buffer.from("c31d451e3e3b615e1de5f3d7a35cc20989fc2968", "hex"), 0),
                                    keyId: new Long("7168531580753805315")
                                  }
                                },
                                operationTime: new Timestamp({ t: 1678058606, i: 1 }),
                                saslSupportedMechs: [ 'SCRAM-SHA-1' ],
                                isWritablePrimary: true
                              },
                              [Symbol(clusterTime)]: {
                                clusterTime: new Timestamp({ t: 1678058606, i: 1 }),
                                signature: {
                                  hash: new Binary(Buffer.from("c31d451e3e3b615e1de5f3d7a35cc20989fc2968", "hex"), 0),
                                  keyId: new Long("7168531580753805315")
                                }
                              },
                              [Symbol(description)]: StreamDescription {
                                address: '18.230.140.150:27017',
                                type: 'RSPrimary',
                                minWireVersion: 0,
                                maxWireVersion: 13,
                                maxBsonObjectSize: 16777216,
                                maxMessageSizeBytes: 48000000,
                                maxWriteBatchSize: 100000,
                                logicalSessionTimeoutMinutes: 30,
                                loadBalanced: false,
                                compressors: [ 'none' ]
                              },
                              [Symbol(generation)]: 0,
                              [Symbol(lastUseTime)]: 531968,
                              [Symbol(queue)]: Map(0) {},
                              [Symbol(messageStream)]: <ref *8> MessageStream {
                                _readableState: ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: [
                                    <ref *9> TLSSocket {
                                      _tlsOptions: {
                                        allowHalfOpen: undefined,
                                        pipe: false,
                                        secureContext: SecureContext {
                                          context: SecureContext {}
                                        },
                                        isServer: false,
                                        requestCert: true,
                                        rejectUnauthorized: true,
                                        session: undefined,
                                        ALPNProtocols: undefined,
                                        requestOCSP: undefined,
                                        enableTrace: undefined,
                                        pskCallback: undefined,
                                        highWaterMark: undefined,
                                        onread: undefined,
                                        signal: undefined
                                      },
                                      _secureEstablished: true,
                                      _securePending: false,
                                      _newSessionPending: false,
                                      _controlReleased: true,
                                      secureConnecting: false,
                                      _SNICallback: null,
                                      servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                      alpnProtocol: false,
                                      authorized: true,
                                      authorizationError: null,
                                      encrypted: true,
                                      _events: [Object: null prototype] {
                                        end: [
                                          [Function: onReadableStreamEnd],
                                          [Function: bound onceWrapper] {
                                            listener: [Function: onend]
                                          }
                                        ],
                                        newListener: [
                                          [Function: keylogNewListener],
                                          [Function: newListener]
                                        ],
                                        secure: [Function: onConnectSecure],
                                        close: [
                                          [Function (anonymous)],
                                          [Function: bound onceWrapper] {
                                            listener: [Function: onclose]
                                          }
                                        ],
                                        timeout: [Function (anonymous)],
                                        error: [
                                          [Function: onerror],
                                          [Function (anonymous)]
                                        ],
                                        data: [Function: ondata],
                                        unpipe: [Function: onunpipe],
                                        finish: [Function: bound onceWrapper] {
                                          listener: [Function: onfinish]
                                        }
                                      },
                                      _eventsCount: 9,
                                      connecting: false,
                                      _hadError: false,
                                      _parent: null,
                                      _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                      _closeAfterHandlingError: false,
                                      _readableState: ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: [ [Circular *8] ],
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        constructed: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        autoDestroy: true,
                                        destroyed: false,
                                        errored: null,
                                        closed: false,
                                        closeEmitted: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrainWriters: null,
                                        multiAwaitDrain: false,
                                        readingMore: false,
                                        dataEmitted: true,
                                        decoder: null,
                                        encoding: null,
                                        [Symbol(kPaused)]: false
                                      },
                                      _maxListeners: undefined,
                                      _writableState: WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: false,
                                        needDrain: false,
                                        ending: false,
                                        ended: false,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        afterWriteTickInfo: null,
                                        buffered: [],
                                        bufferedIndex: 0,
                                        allBuffers: true,
                                        allNoop: true,
                                        pendingcb: 0,
                                        constructed: true,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        autoDestroy: true,
                                        errored: null,
                                        closed: false,
                                        closeEmitted: false,
                                        [Symbol(kOnFinished)]: []
                                      },
                                      allowHalfOpen: false,
                                      _sockname: null,
                                      _pendingData: null,
                                      _pendingEncoding: '',
                                      server: undefined,
                                      _server: null,
                                      ssl: TLSWrap {
                                        _parent: TCP {
                                          reading: [Getter/Setter],
                                          onconnection: null,
                                          [Symbol(owner_symbol)]: [Circular *9]
                                        },
                                        _parentWrap: undefined,
                                        _secureContext: SecureContext {
                                          context: SecureContext {}
                                        },
                                        reading: true,
                                        onkeylog: [Function: onkeylog],
                                        onhandshakestart: {},
                                        onhandshakedone: [Function (anonymous)],
                                        onocspresponse: [Function: onocspresponse],
                                        onnewsession: [Function: onnewsessionclient],
                                        onerror: [Function: onerror],
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      _requestCert: true,
                                      _rejectUnauthorized: true,
                                      timeout: 0,
                                      _peername: {
                                        address: '18.230.140.150',
                                        family: 'IPv4',
                                        port: 27017
                                      },
                                      [Symbol(res)]: TLSWrap {
                                        _parent: TCP {
                                          reading: [Getter/Setter],
                                          onconnection: null,
                                          [Symbol(owner_symbol)]: [Circular *9]
                                        },
                                        _parentWrap: undefined,
                                        _secureContext: SecureContext {
                                          context: SecureContext {}
                                        },
                                        reading: true,
                                        onkeylog: [Function: onkeylog],
                                        onhandshakestart: {},
                                        onhandshakedone: [Function (anonymous)],
                                        onocspresponse: [Function: onocspresponse],
                                        onnewsession: [Function: onnewsessionclient],
                                        onerror: [Function: onerror],
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      [Symbol(verified)]: true,
                                      [Symbol(pendingSession)]: null,
                                      [Symbol(async_id_symbol)]: 162,
                                      [Symbol(kHandle)]: TLSWrap {
                                        _parent: TCP {
                                          reading: [Getter/Setter],
                                          onconnection: null,
                                          [Symbol(owner_symbol)]: [Circular *9]
                                        },
                                        _parentWrap: undefined,
                                        _secureContext: SecureContext {
                                          context: SecureContext {}
                                        },
                                        reading: true,
                                        onkeylog: [Function: onkeylog],
                                        onhandshakestart: {},
                                        onhandshakedone: [Function (anonymous)],
                                        onocspresponse: [Function: onocspresponse],
                                        onnewsession: [Function: onnewsessionclient],
                                        onerror: [Function: onerror],
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      [Symbol(lastWriteQueueSize)]: 0,
                                      [Symbol(timeout)]: Timeout {
                                        _idleTimeout: -1,
                                        _idlePrev: null,
                                        _idleNext: null,
                                        _idleStart: 16675,
                                        _onTimeout: null,
                                        _timerArgs: undefined,
                                        _repeat: null,
                                        _destroyed: true,
                                        [Symbol(refed)]: false,
                                        [Symbol(kHasPrimitive)]: false,
                                        [Symbol(asyncId)]: 176,
                                        [Symbol(triggerId)]: 175
                                      },
                                      [Symbol(kBuffer)]: null,
                                      [Symbol(kBufferCb)]: null,
                                      [Symbol(kBufferGen)]: null,
                                      [Symbol(kCapture)]: false,
                                      [Symbol(kSetNoDelay)]: true,
                                      [Symbol(kSetKeepAlive)]: true,
                                      [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                      [Symbol(kBytesRead)]: 0,
                                      [Symbol(kBytesWritten)]: 0,
                                      [Symbol(connect-options)]: {
                                        rejectUnauthorized: true,
                                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                        checkServerIdentity: [Function: checkServerIdentity],
                                        minDHSize: 1024,
                                        host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                        port: 27017,
                                        servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                        singleUse: true
                                      },
                                      [Symbol(disable-renegotiation)]: true
                                    }
                                  ],
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  constructed: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  errorEmitted: false,
                                  emitClose: true,
                                  autoDestroy: true,
                                  destroyed: false,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrainWriters: null,
                                  multiAwaitDrain: false,
                                  readingMore: false,
                                  dataEmitted: true,
                                  decoder: null,
                                  encoding: null,
                                  [Symbol(kPaused)]: false
                                },
                                _events: [Object: null prototype] {
                                  message: [Function (anonymous)],
                                  error: [
                                    [Function: onerror],
                                    [Function (anonymous)]
                                  ],
                                  unpipe: [Function: onunpipe],
                                  close: [Function: bound onceWrapper] {
                                    listener: [Function: onclose]
                                  },
                                  finish: [Function: bound onceWrapper] {
                                    listener: [Function: onfinish]
                                  },
                                  end: [Function: bound onceWrapper] {
                                    listener: [Function: onend]
                                  },
                                  data: [Function: ondata]
                                },
                                _eventsCount: 7,
                                _maxListeners: undefined,
                                _writableState: WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: false,
                                  needDrain: false,
                                  ending: false,
                                  ended: false,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: true,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  afterWriteTickInfo: null,
                                  buffered: [],
                                  bufferedIndex: 0,
                                  allBuffers: true,
                                  allNoop: true,
                                  pendingcb: 0,
                                  constructed: true,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: true,
                                  autoDestroy: true,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  [Symbol(kOnFinished)]: []
                                },
                                allowHalfOpen: true,
                                isMonitoringConnection: false,
                                maxBsonMessageSize: 67108864,
                                [Symbol(kCapture)]: false,
                                [Symbol(buffer)]: BufferPool {
                                  buffers: List {
                                    count: 0,
                                    head: <ref *10> {
                                      next: [Circular *10],
                                      prev: [Circular *10],
                                      value: null
                                    }
                                  },
                                  totalByteLength: 0
                                }
                              },
                              [Symbol(stream)]: <ref *9> TLSSocket {
                                _tlsOptions: {
                                  allowHalfOpen: undefined,
                                  pipe: false,
                                  secureContext: SecureContext {
                                    context: SecureContext {}
                                  },
                                  isServer: false,
                                  requestCert: true,
                                  rejectUnauthorized: true,
                                  session: undefined,
                                  ALPNProtocols: undefined,
                                  requestOCSP: undefined,
                                  enableTrace: undefined,
                                  pskCallback: undefined,
                                  highWaterMark: undefined,
                                  onread: undefined,
                                  signal: undefined
                                },
                                _secureEstablished: true,
                                _securePending: false,
                                _newSessionPending: false,
                                _controlReleased: true,
                                secureConnecting: false,
                                _SNICallback: null,
                                servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                alpnProtocol: false,
                                authorized: true,
                                authorizationError: null,
                                encrypted: true,
                                _events: [Object: null prototype] {
                                  end: [
                                    [Function: onReadableStreamEnd],
                                    [Function: bound onceWrapper] {
                                      listener: [Function: onend]
                                    }
                                  ],
                                  newListener: [
                                    [Function: keylogNewListener],
                                    [Function: newListener]
                                  ],
                                  secure: [Function: onConnectSecure],
                                  close: [
                                    [Function (anonymous)],
                                    [Function: bound onceWrapper] {
                                      listener: [Function: onclose]
                                    }
                                  ],
                                  timeout: [Function (anonymous)],
                                  error: [
                                    [Function: onerror],
                                    [Function (anonymous)]
                                  ],
                                  data: [Function: ondata],
                                  unpipe: [Function: onunpipe],
                                  finish: [Function: bound onceWrapper] {
                                    listener: [Function: onfinish]
                                  }
                                },
                                _eventsCount: 9,
                                connecting: false,
                                _hadError: false,
                                _parent: null,
                                _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                _closeAfterHandlingError: false,
                                _readableState: ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: [
                                    <ref *8> MessageStream {
                                      _readableState: ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: [ [Circular *9] ],
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        constructed: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        errorEmitted: false,
                                        emitClose: true,
                                        autoDestroy: true,
                                        destroyed: false,
                                        errored: null,
                                        closed: false,
                                        closeEmitted: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrainWriters: null,
                                        multiAwaitDrain: false,
                                        readingMore: false,
                                        dataEmitted: true,
                                        decoder: null,
                                        encoding: null,
                                        [Symbol(kPaused)]: false
                                      },
                                      _events: [Object: null prototype] {
                                        message: [Function (anonymous)],
                                        error: [
                                          [Function: onerror],
                                          [Function (anonymous)]
                                        ],
                                        unpipe: [Function: onunpipe],
                                        close: [Function: bound onceWrapper] {
                                          listener: [Function: onclose]
                                        },
                                        finish: [Function: bound onceWrapper] {
                                          listener: [Function: onfinish]
                                        },
                                        end: [Function: bound onceWrapper] {
                                          listener: [Function: onend]
                                        },
                                        data: [Function: ondata]
                                      },
                                      _eventsCount: 7,
                                      _maxListeners: undefined,
                                      _writableState: WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: false,
                                        needDrain: false,
                                        ending: false,
                                        ended: false,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: true,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        afterWriteTickInfo: null,
                                        buffered: [],
                                        bufferedIndex: 0,
                                        allBuffers: true,
                                        allNoop: true,
                                        pendingcb: 0,
                                        constructed: true,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: true,
                                        autoDestroy: true,
                                        errored: null,
                                        closed: false,
                                        closeEmitted: false,
                                        [Symbol(kOnFinished)]: []
                                      },
                                      allowHalfOpen: true,
                                      isMonitoringConnection: false,
                                      maxBsonMessageSize: 67108864,
                                      [Symbol(kCapture)]: false,
                                      [Symbol(buffer)]: BufferPool {
                                        buffers: List {
                                          count: 0,
                                          head: <ref *10> {
                                            next: [Circular *10],
                                            prev: [Circular *10],
                                            value: null
                                          }
                                        },
                                        totalByteLength: 0
                                      }
                                    }
                                  ],
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  constructed: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  destroyed: false,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrainWriters: null,
                                  multiAwaitDrain: false,
                                  readingMore: false,
                                  dataEmitted: true,
                                  decoder: null,
                                  encoding: null,
                                  [Symbol(kPaused)]: false
                                },
                                _maxListeners: undefined,
                                _writableState: WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: false,
                                  needDrain: false,
                                  ending: false,
                                  ended: false,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  afterWriteTickInfo: null,
                                  buffered: [],
                                  bufferedIndex: 0,
                                  allBuffers: true,
                                  allNoop: true,
                                  pendingcb: 0,
                                  constructed: true,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  [Symbol(kOnFinished)]: []
                                },
                                allowHalfOpen: false,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: undefined,
                                _server: null,
                                ssl: TLSWrap {
                                  _parent: TCP {
                                    reading: [Getter/Setter],
                                    onconnection: null,
                                    [Symbol(owner_symbol)]: [Circular *9]
                                  },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext {
                                    context: SecureContext {}
                                  },
                                  reading: true,
                                  onkeylog: [Function: onkeylog],
                                  onhandshakestart: {},
                                  onhandshakedone: [Function (anonymous)],
                                  onocspresponse: [Function: onocspresponse],
                                  onnewsession: [Function: onnewsessionclient],
                                  onerror: [Function: onerror],
                                  [Symbol(owner_symbol)]: [Circular *9]
                                },
                                _requestCert: true,
                                _rejectUnauthorized: true,
                                timeout: 0,
                                _peername: {
                                  address: '18.230.140.150',
                                  family: 'IPv4',
                                  port: 27017
                                },
                                [Symbol(res)]: TLSWrap {
                                  _parent: TCP {
                                    reading: [Getter/Setter],
                                    onconnection: null,
                                    [Symbol(owner_symbol)]: [Circular *9]
                                  },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext {
                                    context: SecureContext {}
                                  },
                                  reading: true,
                                  onkeylog: [Function: onkeylog],
                                  onhandshakestart: {},
                                  onhandshakedone: [Function (anonymous)],
                                  onocspresponse: [Function: onocspresponse],
                                  onnewsession: [Function: onnewsessionclient],
                                  onerror: [Function: onerror],
                                  [Symbol(owner_symbol)]: [Circular *9]
                                },
                                [Symbol(verified)]: true,
                                [Symbol(pendingSession)]: null,
                                [Symbol(async_id_symbol)]: 162,
                                [Symbol(kHandle)]: TLSWrap {
                                  _parent: TCP {
                                    reading: [Getter/Setter],
                                    onconnection: null,
                                    [Symbol(owner_symbol)]: [Circular *9]
                                  },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext {
                                    context: SecureContext {}
                                  },
                                  reading: true,
                                  onkeylog: [Function: onkeylog],
                                  onhandshakestart: {},
                                  onhandshakedone: [Function (anonymous)],
                                  onocspresponse: [Function: onocspresponse],
                                  onnewsession: [Function: onnewsessionclient],
                                  onerror: [Function: onerror],
                                  [Symbol(owner_symbol)]: [Circular *9]
                                },
                                [Symbol(lastWriteQueueSize)]: 0,
                                [Symbol(timeout)]: Timeout {
                                  _idleTimeout: -1,
                                  _idlePrev: null,
                                  _idleNext: null,
                                  _idleStart: 16675,
                                  _onTimeout: null,
                                  _timerArgs: undefined,
                                  _repeat: null,
                                  _destroyed: true,
                                  [Symbol(refed)]: false,
                                  [Symbol(kHasPrimitive)]: false,
                                  [Symbol(asyncId)]: 176,
                                  [Symbol(triggerId)]: 175
                                },
                                [Symbol(kBuffer)]: null,
                                [Symbol(kBufferCb)]: null,
                                [Symbol(kBufferGen)]: null,
                                [Symbol(kCapture)]: false,
                                [Symbol(kSetNoDelay)]: true,
                                [Symbol(kSetKeepAlive)]: true,
                                [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                [Symbol(kBytesRead)]: 0,
                                [Symbol(kBytesWritten)]: 0,
                                [Symbol(connect-options)]: {
                                  rejectUnauthorized: true,
                                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                  checkServerIdentity: [Function: checkServerIdentity],
                                  minDHSize: 1024,
                                  host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                  port: 27017,
                                  servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                  singleUse: true
                                },
                                [Symbol(disable-renegotiation)]: true
                              },
                              [Symbol(delayedTimeoutId)]: null
                            }
                          },
                          prev: {
                            next: [Circular *7],
                            prev: [Circular *7],
                            value: Connection {
                              _events: [Object: null prototype] {
                                commandStarted: [Function (anonymous)],
                                commandSucceeded: [Function (anonymous)],
                                commandFailed: [Function (anonymous)],
                                clusterTimeReceived: [Function (anonymous)]
                              },
                              _eventsCount: 4,
                              _maxListeners: undefined,
                              id: 1,
                              address: '18.230.140.150:27017',
                              socketTimeoutMS: 0,
                              monitorCommands: false,
                              serverApi: undefined,
                              closed: false,
                              helloOk: true,
                              lastHelloMS: 54,
                              [Symbol(kCapture)]: false,
                              [Symbol(hello)]: {
                                helloOk: true,
                                topologyVersion: {
                                  processId: new ObjectId("6402382a0e21490e021d214d"),
                                  counter: 6
                                },
                                hosts: [
                                  'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                                  'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                                  'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                                ],
                                setName: 'atlas-6h3glt-shard-0',
                                setVersion: 1,
                                ismaster: true,
                                secondary: false,
                                primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                                tags: {
                                  region: 'SA_EAST_1',
                                  nodeType: 'ELECTABLE',
                                  provider: 'AWS',
                                  workloadType: 'OPERATIONAL'
                                },
                                me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                                electionId: new ObjectId("7fffffff000000000000001c"),
                                lastWrite: {
                                  opTime: {
                                    ts: new Timestamp({ t: 1678058606, i: 1 }),
                                    t: 28
                                  },
                                  lastWriteDate: 2023-03-05T23:23:26.000Z,
                                  majorityOpTime: {
                                    ts: new Timestamp({ t: 1678058606, i: 1 }),
                                    t: 28
                                  },
                                  majorityWriteDate: 2023-03-05T23:23:26.000Z
                                },
                                maxBsonObjectSize: 16777216,
                                maxMessageSizeBytes: 48000000,
                                maxWriteBatchSize: 100000,
                                localTime: 2023-03-05T23:23:26.221Z,
                                logicalSessionTimeoutMinutes: 30,
                                connectionId: 47148,
                                minWireVersion: 0,
                                maxWireVersion: 13,
                                readOnly: false,
                                ok: 1,
                                '$clusterTime': {
                                  clusterTime: new Timestamp({ t: 1678058606, i: 1 }),
                                  signature: {
                                    hash: new Binary(Buffer.from("c31d451e3e3b615e1de5f3d7a35cc20989fc2968", "hex"), 0),
                                    keyId: new Long("7168531580753805315")
                                  }
                                },
                                operationTime: new Timestamp({ t: 1678058606, i: 1 }),
                                saslSupportedMechs: [ 'SCRAM-SHA-1' ],
                                isWritablePrimary: true
                              },
                              [Symbol(clusterTime)]: {
                                clusterTime: new Timestamp({ t: 1678058606, i: 1 }),
                                signature: {
                                  hash: new Binary(Buffer.from("c31d451e3e3b615e1de5f3d7a35cc20989fc2968", "hex"), 0),
                                  keyId: new Long("7168531580753805315")
                                }
                              },
                              [Symbol(description)]: StreamDescription {
                                address: '18.230.140.150:27017',
                                type: 'RSPrimary',
                                minWireVersion: 0,
                                maxWireVersion: 13,
                                maxBsonObjectSize: 16777216,
                                maxMessageSizeBytes: 48000000,
                                maxWriteBatchSize: 100000,
                                logicalSessionTimeoutMinutes: 30,
                                loadBalanced: false,
                                compressors: [ 'none' ]
                              },
                              [Symbol(generation)]: 0,
                              [Symbol(lastUseTime)]: 531968,
                              [Symbol(queue)]: Map(0) {},
                              [Symbol(messageStream)]: <ref *8> MessageStream {
                                _readableState: ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: [
                                    <ref *9> TLSSocket {
                                      _tlsOptions: {
                                        allowHalfOpen: undefined,
                                        pipe: false,
                                        secureContext: SecureContext {
                                          context: SecureContext {}
                                        },
                                        isServer: false,
                                        requestCert: true,
                                        rejectUnauthorized: true,
                                        session: undefined,
                                        ALPNProtocols: undefined,
                                        requestOCSP: undefined,
                                        enableTrace: undefined,
                                        pskCallback: undefined,
                                        highWaterMark: undefined,
                                        onread: undefined,
                                        signal: undefined
                                      },
                                      _secureEstablished: true,
                                      _securePending: false,
                                      _newSessionPending: false,
                                      _controlReleased: true,
                                      secureConnecting: false,
                                      _SNICallback: null,
                                      servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                      alpnProtocol: false,
                                      authorized: true,
                                      authorizationError: null,
                                      encrypted: true,
                                      _events: [Object: null prototype] {
                                        end: [
                                          [Function: onReadableStreamEnd],
                                          [Function: bound onceWrapper] {
                                            listener: [Function: onend]
                                          }
                                        ],
                                        newListener: [
                                          [Function: keylogNewListener],
                                          [Function: newListener]
                                        ],
                                        secure: [Function: onConnectSecure],
                                        close: [
                                          [Function (anonymous)],
                                          [Function: bound onceWrapper] {
                                            listener: [Function: onclose]
                                          }
                                        ],
                                        timeout: [Function (anonymous)],
                                        error: [
                                          [Function: onerror],
                                          [Function (anonymous)]
                                        ],
                                        data: [Function: ondata],
                                        unpipe: [Function: onunpipe],
                                        finish: [Function: bound onceWrapper] {
                                          listener: [Function: onfinish]
                                        }
                                      },
                                      _eventsCount: 9,
                                      connecting: false,
                                      _hadError: false,
                                      _parent: null,
                                      _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                      _closeAfterHandlingError: false,
                                      _readableState: ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: [ [Circular *8] ],
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        constructed: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        autoDestroy: true,
                                        destroyed: false,
                                        errored: null,
                                        closed: false,
                                        closeEmitted: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrainWriters: null,
                                        multiAwaitDrain: false,
                                        readingMore: false,
                                        dataEmitted: true,
                                        decoder: null,
                                        encoding: null,
                                        [Symbol(kPaused)]: false
                                      },
                                      _maxListeners: undefined,
                                      _writableState: WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: false,
                                        needDrain: false,
                                        ending: false,
                                        ended: false,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        afterWriteTickInfo: null,
                                        buffered: [],
                                        bufferedIndex: 0,
                                        allBuffers: true,
                                        allNoop: true,
                                        pendingcb: 0,
                                        constructed: true,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        autoDestroy: true,
                                        errored: null,
                                        closed: false,
                                        closeEmitted: false,
                                        [Symbol(kOnFinished)]: []
                                      },
                                      allowHalfOpen: false,
                                      _sockname: null,
                                      _pendingData: null,
                                      _pendingEncoding: '',
                                      server: undefined,
                                      _server: null,
                                      ssl: TLSWrap {
                                        _parent: TCP {
                                          reading: [Getter/Setter],
                                          onconnection: null,
                                          [Symbol(owner_symbol)]: [Circular *9]
                                        },
                                        _parentWrap: undefined,
                                        _secureContext: SecureContext {
                                          context: SecureContext {}
                                        },
                                        reading: true,
                                        onkeylog: [Function: onkeylog],
                                        onhandshakestart: {},
                                        onhandshakedone: [Function (anonymous)],
                                        onocspresponse: [Function: onocspresponse],
                                        onnewsession: [Function: onnewsessionclient],
                                        onerror: [Function: onerror],
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      _requestCert: true,
                                      _rejectUnauthorized: true,
                                      timeout: 0,
                                      _peername: {
                                        address: '18.230.140.150',
                                        family: 'IPv4',
                                        port: 27017
                                      },
                                      [Symbol(res)]: TLSWrap {
                                        _parent: TCP {
                                          reading: [Getter/Setter],
                                          onconnection: null,
                                          [Symbol(owner_symbol)]: [Circular *9]
                                        },
                                        _parentWrap: undefined,
                                        _secureContext: SecureContext {
                                          context: SecureContext {}
                                        },
                                        reading: true,
                                        onkeylog: [Function: onkeylog],
                                        onhandshakestart: {},
                                        onhandshakedone: [Function (anonymous)],
                                        onocspresponse: [Function: onocspresponse],
                                        onnewsession: [Function: onnewsessionclient],
                                        onerror: [Function: onerror],
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      [Symbol(verified)]: true,
                                      [Symbol(pendingSession)]: null,
                                      [Symbol(async_id_symbol)]: 162,
                                      [Symbol(kHandle)]: TLSWrap {
                                        _parent: TCP {
                                          reading: [Getter/Setter],
                                          onconnection: null,
                                          [Symbol(owner_symbol)]: [Circular *9]
                                        },
                                        _parentWrap: undefined,
                                        _secureContext: SecureContext {
                                          context: SecureContext {}
                                        },
                                        reading: true,
                                        onkeylog: [Function: onkeylog],
                                        onhandshakestart: {},
                                        onhandshakedone: [Function (anonymous)],
                                        onocspresponse: [Function: onocspresponse],
                                        onnewsession: [Function: onnewsessionclient],
                                        onerror: [Function: onerror],
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      [Symbol(lastWriteQueueSize)]: 0,
                                      [Symbol(timeout)]: Timeout {
                                        _idleTimeout: -1,
                                        _idlePrev: null,
                                        _idleNext: null,
                                        _idleStart: 16675,
                                        _onTimeout: null,
                                        _timerArgs: undefined,
                                        _repeat: null,
                                        _destroyed: true,
                                        [Symbol(refed)]: false,
                                        [Symbol(kHasPrimitive)]: false,
                                        [Symbol(asyncId)]: 176,
                                        [Symbol(triggerId)]: 175
                                      },
                                      [Symbol(kBuffer)]: null,
                                      [Symbol(kBufferCb)]: null,
                                      [Symbol(kBufferGen)]: null,
                                      [Symbol(kCapture)]: false,
                                      [Symbol(kSetNoDelay)]: true,
                                      [Symbol(kSetKeepAlive)]: true,
                                      [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                      [Symbol(kBytesRead)]: 0,
                                      [Symbol(kBytesWritten)]: 0,
                                      [Symbol(connect-options)]: {
                                        rejectUnauthorized: true,
                                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                        checkServerIdentity: [Function: checkServerIdentity],
                                        minDHSize: 1024,
                                        host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                        port: 27017,
                                        servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                        singleUse: true
                                      },
                                      [Symbol(disable-renegotiation)]: true
                                    }
                                  ],
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  constructed: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  errorEmitted: false,
                                  emitClose: true,
                                  autoDestroy: true,
                                  destroyed: false,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrainWriters: null,
                                  multiAwaitDrain: false,
                                  readingMore: false,
                                  dataEmitted: true,
                                  decoder: null,
                                  encoding: null,
                                  [Symbol(kPaused)]: false
                                },
                                _events: [Object: null prototype] {
                                  message: [Function (anonymous)],
                                  error: [
                                    [Function: onerror],
                                    [Function (anonymous)]
                                  ],
                                  unpipe: [Function: onunpipe],
                                  close: [Function: bound onceWrapper] {
                                    listener: [Function: onclose]
                                  },
                                  finish: [Function: bound onceWrapper] {
                                    listener: [Function: onfinish]
                                  },
                                  end: [Function: bound onceWrapper] {
                                    listener: [Function: onend]
                                  },
                                  data: [Function: ondata]
                                },
                                _eventsCount: 7,
                                _maxListeners: undefined,
                                _writableState: WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: false,
                                  needDrain: false,
                                  ending: false,
                                  ended: false,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: true,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  afterWriteTickInfo: null,
                                  buffered: [],
                                  bufferedIndex: 0,
                                  allBuffers: true,
                                  allNoop: true,
                                  pendingcb: 0,
                                  constructed: true,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: true,
                                  autoDestroy: true,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  [Symbol(kOnFinished)]: []
                                },
                                allowHalfOpen: true,
                                isMonitoringConnection: false,
                                maxBsonMessageSize: 67108864,
                                [Symbol(kCapture)]: false,
                                [Symbol(buffer)]: BufferPool {
                                  buffers: List {
                                    count: 0,
                                    head: <ref *10> {
                                      next: [Circular *10],
                                      prev: [Circular *10],
                                      value: null
                                    }
                                  },
                                  totalByteLength: 0
                                }
                              },
                              [Symbol(stream)]: <ref *9> TLSSocket {
                                _tlsOptions: {
                                  allowHalfOpen: undefined,
                                  pipe: false,
                                  secureContext: SecureContext {
                                    context: SecureContext {}
                                  },
                                  isServer: false,
                                  requestCert: true,
                                  rejectUnauthorized: true,
                                  session: undefined,
                                  ALPNProtocols: undefined,
                                  requestOCSP: undefined,
                                  enableTrace: undefined,
                                  pskCallback: undefined,
                                  highWaterMark: undefined,
                                  onread: undefined,
                                  signal: undefined
                                },
                                _secureEstablished: true,
                                _securePending: false,
                                _newSessionPending: false,
                                _controlReleased: true,
                                secureConnecting: false,
                                _SNICallback: null,
                                servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                alpnProtocol: false,
                                authorized: true,
                                authorizationError: null,
                                encrypted: true,
                                _events: [Object: null prototype] {
                                  end: [
                                    [Function: onReadableStreamEnd],
                                    [Function: bound onceWrapper] {
                                      listener: [Function: onend]
                                    }
                                  ],
                                  newListener: [
                                    [Function: keylogNewListener],
                                    [Function: newListener]
                                  ],
                                  secure: [Function: onConnectSecure],
                                  close: [
                                    [Function (anonymous)],
                                    [Function: bound onceWrapper] {
                                      listener: [Function: onclose]
                                    }
                                  ],
                                  timeout: [Function (anonymous)],
                                  error: [
                                    [Function: onerror],
                                    [Function (anonymous)]
                                  ],
                                  data: [Function: ondata],
                                  unpipe: [Function: onunpipe],
                                  finish: [Function: bound onceWrapper] {
                                    listener: [Function: onfinish]
                                  }
                                },
                                _eventsCount: 9,
                                connecting: false,
                                _hadError: false,
                                _parent: null,
                                _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                _closeAfterHandlingError: false,
                                _readableState: ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: [
                                    <ref *8> MessageStream {
                                      _readableState: ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: [ [Circular *9] ],
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        constructed: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        errorEmitted: false,
                                        emitClose: true,
                                        autoDestroy: true,
                                        destroyed: false,
                                        errored: null,
                                        closed: false,
                                        closeEmitted: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrainWriters: null,
                                        multiAwaitDrain: false,
                                        readingMore: false,
                                        dataEmitted: true,
                                        decoder: null,
                                        encoding: null,
                                        [Symbol(kPaused)]: false
                                      },
                                      _events: [Object: null prototype] {
                                        message: [Function (anonymous)],
                                        error: [
                                          [Function: onerror],
                                          [Function (anonymous)]
                                        ],
                                        unpipe: [Function: onunpipe],
                                        close: [Function: bound onceWrapper] {
                                          listener: [Function: onclose]
                                        },
                                        finish: [Function: bound onceWrapper] {
                                          listener: [Function: onfinish]
                                        },
                                        end: [Function: bound onceWrapper] {
                                          listener: [Function: onend]
                                        },
                                        data: [Function: ondata]
                                      },
                                      _eventsCount: 7,
                                      _maxListeners: undefined,
                                      _writableState: WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: false,
                                        needDrain: false,
                                        ending: false,
                                        ended: false,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: true,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        afterWriteTickInfo: null,
                                        buffered: [],
                                        bufferedIndex: 0,
                                        allBuffers: true,
                                        allNoop: true,
                                        pendingcb: 0,
                                        constructed: true,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: true,
                                        autoDestroy: true,
                                        errored: null,
                                        closed: false,
                                        closeEmitted: false,
                                        [Symbol(kOnFinished)]: []
                                      },
                                      allowHalfOpen: true,
                                      isMonitoringConnection: false,
                                      maxBsonMessageSize: 67108864,
                                      [Symbol(kCapture)]: false,
                                      [Symbol(buffer)]: BufferPool {
                                        buffers: List {
                                          count: 0,
                                          head: <ref *10> {
                                            next: [Circular *10],
                                            prev: [Circular *10],
                                            value: null
                                          }
                                        },
                                        totalByteLength: 0
                                      }
                                    }
                                  ],
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  constructed: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  destroyed: false,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrainWriters: null,
                                  multiAwaitDrain: false,
                                  readingMore: false,
                                  dataEmitted: true,
                                  decoder: null,
                                  encoding: null,
                                  [Symbol(kPaused)]: false
                                },
                                _maxListeners: undefined,
                                _writableState: WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: false,
                                  needDrain: false,
                                  ending: false,
                                  ended: false,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  afterWriteTickInfo: null,
                                  buffered: [],
                                  bufferedIndex: 0,
                                  allBuffers: true,
                                  allNoop: true,
                                  pendingcb: 0,
                                  constructed: true,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  [Symbol(kOnFinished)]: []
                                },
                                allowHalfOpen: false,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: undefined,
                                _server: null,
                                ssl: TLSWrap {
                                  _parent: TCP {
                                    reading: [Getter/Setter],
                                    onconnection: null,
                                    [Symbol(owner_symbol)]: [Circular *9]
                                  },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext {
                                    context: SecureContext {}
                                  },
                                  reading: true,
                                  onkeylog: [Function: onkeylog],
                                  onhandshakestart: {},
                                  onhandshakedone: [Function (anonymous)],
                                  onocspresponse: [Function: onocspresponse],
                                  onnewsession: [Function: onnewsessionclient],
                                  onerror: [Function: onerror],
                                  [Symbol(owner_symbol)]: [Circular *9]
                                },
                                _requestCert: true,
                                _rejectUnauthorized: true,
                                timeout: 0,
                                _peername: {
                                  address: '18.230.140.150',
                                  family: 'IPv4',
                                  port: 27017
                                },
                                [Symbol(res)]: TLSWrap {
                                  _parent: TCP {
                                    reading: [Getter/Setter],
                                    onconnection: null,
                                    [Symbol(owner_symbol)]: [Circular *9]
                                  },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext {
                                    context: SecureContext {}
                                  },
                                  reading: true,
                                  onkeylog: [Function: onkeylog],
                                  onhandshakestart: {},
                                  onhandshakedone: [Function (anonymous)],
                                  onocspresponse: [Function: onocspresponse],
                                  onnewsession: [Function: onnewsessionclient],
                                  onerror: [Function: onerror],
                                  [Symbol(owner_symbol)]: [Circular *9]
                                },
                                [Symbol(verified)]: true,
                                [Symbol(pendingSession)]: null,
                                [Symbol(async_id_symbol)]: 162,
                                [Symbol(kHandle)]: TLSWrap {
                                  _parent: TCP {
                                    reading: [Getter/Setter],
                                    onconnection: null,
                                    [Symbol(owner_symbol)]: [Circular *9]
                                  },
                                  _parentWrap: undefined,
                                  _secureContext: SecureContext {
                                    context: SecureContext {}
                                  },
                                  reading: true,
                                  onkeylog: [Function: onkeylog],
                                  onhandshakestart: {},
                                  onhandshakedone: [Function (anonymous)],
                                  onocspresponse: [Function: onocspresponse],
                                  onnewsession: [Function: onnewsessionclient],
                                  onerror: [Function: onerror],
                                  [Symbol(owner_symbol)]: [Circular *9]
                                },
                                [Symbol(lastWriteQueueSize)]: 0,
                                [Symbol(timeout)]: Timeout {
                                  _idleTimeout: -1,
                                  _idlePrev: null,
                                  _idleNext: null,
                                  _idleStart: 16675,
                                  _onTimeout: null,
                                  _timerArgs: undefined,
                                  _repeat: null,
                                  _destroyed: true,
                                  [Symbol(refed)]: false,
                                  [Symbol(kHasPrimitive)]: false,
                                  [Symbol(asyncId)]: 176,
                                  [Symbol(triggerId)]: 175
                                },
                                [Symbol(kBuffer)]: null,
                                [Symbol(kBufferCb)]: null,
                                [Symbol(kBufferGen)]: null,
                                [Symbol(kCapture)]: false,
                                [Symbol(kSetNoDelay)]: true,
                                [Symbol(kSetKeepAlive)]: true,
                                [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                [Symbol(kBytesRead)]: 0,
                                [Symbol(kBytesWritten)]: 0,
                                [Symbol(connect-options)]: {
                                  rejectUnauthorized: true,
                                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                  checkServerIdentity: [Function: checkServerIdentity],
                                  minDHSize: 1024,
                                  host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                  port: 27017,
                                  servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                  singleUse: true
                                },
                                [Symbol(disable-renegotiation)]: true
                              },
                              [Symbol(delayedTimeoutId)]: null
                            }
                          },
                          value: null
                        }
                      },
                      [Symbol(pending)]: 0,
                      [Symbol(checkedOut)]: Set(0) {},
                      [Symbol(minPoolSizeTimer)]: undefined,
                      [Symbol(generation)]: 0,
                      [Symbol(serviceGenerations)]: Map(0) {},
                      [Symbol(connectionCounter)]: Object [Generator] {},
                      [Symbol(cancellationToken)]: CancellationToken {
                        _events: [Object: null prototype] {},
                        _eventsCount: 0,
                        _maxListeners: Infinity,
                        [Symbol(kCapture)]: false
                      },
                      [Symbol(waitQueue)]: List {
                        count: 0,
                        head: <ref *11> {
                          next: [Circular *11],
                          prev: [Circular *11],
                          value: null
                        }
                      },
                      [Symbol(metrics)]: ConnectionPoolMetrics {
                        txnConnections: 0,
                        cursorConnections: 0,
                        otherConnections: 0
                      },
                      [Symbol(processingWaitQueue)]: false
                    },
                    operationCount: 0
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(monitor)]: Monitor {
                    _events: [Object: null prototype] {
                      serverHeartbeatStarted: [Function (anonymous)],
                      serverHeartbeatSucceeded: [
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      serverHeartbeatFailed: [Function (anonymous)],
                      resetServer: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    s: { state: 'idle' },
                    address: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                    options: {
                      connectTimeoutMS: 30000,
                      heartbeatFrequencyMS: 10000,
                      minHeartbeatFrequencyMS: 500
                    },
                    connectOptions: {
                      id: '<monitor>',
                      generation: 0,
                      connectionType: [class Connection extends TypedEventEmitter] {
                        COMMAND_STARTED: 'commandStarted',
                        COMMAND_SUCCEEDED: 'commandSucceeded',
                        COMMAND_FAILED: 'commandFailed',
                        CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                        CLOSE: 'close',
                        MESSAGE: 'message',
                        PINNED: 'pinned',
                        UNPINNED: 'unpinned'
                      },
                      cancellationToken: CancellationToken {
                        _events: [Object: null prototype] {},
                        _eventsCount: 0,
                        _maxListeners: Infinity,
                        [Symbol(kCapture)]: false
                      },
                      hostAddress: new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                      hosts: [
                        new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                      ],
                      compressors: [ 'none' ],
                      connectTimeoutMS: 30000,
                      directConnection: false,
                      metadata: {
                        driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                        os: {
                          type: 'Linux',
                          name: 'linux',
                          architecture: 'x64',
                          version: '6.1.13-200.fc37.x86_64'
                        },
                        platform: 'Node.js v18.12.1, LE (unified)',
                        version: '5.1.0|7.0.0'
                      },
                      enableUtf8Validation: true,
                      forceServerObjectId: false,
                      heartbeatFrequencyMS: 10000,
                      keepAlive: true,
                      keepAliveInitialDelay: 120000,
                      loadBalanced: false,
                      localThresholdMS: 15,
                      maxConnecting: 2,
                      maxIdleTimeMS: 0,
                      maxPoolSize: 100,
                      minPoolSize: 0,
                      minHeartbeatFrequencyMS: 500,
                      monitorCommands: false,
                      noDelay: true,
                      pkFactory: { createPk: [Function: createPk] },
                      raw: false,
                      readPreference: ReadPreference {
                        mode: 'primary',
                        tags: undefined,
                        hedge: undefined,
                        maxStalenessSeconds: undefined,
                        minWireVersion: undefined
                      },
                      retryReads: true,
                      retryWrites: true,
                      serverSelectionTimeoutMS: 30000,
                      socketTimeoutMS: 0,
                      srvMaxHosts: 0,
                      srvServiceName: 'mongodb',
                      writeConcern: WriteConcern { w: 'majority' },
                      waitQueueTimeoutMS: 0,
                      zlibCompressionLevel: 0,
                      dbName: 'test',
                      userSpecifiedAuthSource: false,
                      userSpecifiedReplicaSet: false,
                      srvHost: 'dcsweb.snm3hyr.mongodb.net',
                      tls: true,
                      mongoLoggerOptions: {
                        componentSeverities: {
                          command: 'off',
                          topology: 'off',
                          serverSelection: 'off',
                          connection: 'off',
                          default: 'off'
                        },
                        maxDocumentLength: 1000,
                        logDestination: <ref *2> WriteStream {
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: null,
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 0,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: null,
                            ended: false,
                            endEmitted: false,
                            reading: false,
                            constructed: true,
                            sync: true,
                            needReadable: false,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: false,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: false,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: null
                          },
                          _events: [Object: null prototype] {
                            end: [Function: onReadableStreamEnd]
                          },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: false,
                            needDrain: false,
                            ending: false,
                            ended: false,
                            finished: false,
                            destroyed: false,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: true,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: null,
                          _server: null,
                          columns: 140,
                          rows: 12,
                          _type: 'tty',
                          fd: 2,
                          _isStdio: true,
                          destroySoon: [Function: destroy],
                          _destroy: [Function: dummyDestroy],
                          [Symbol(async_id_symbol)]: 51,
                          [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: false,
                          [Symbol(kSetKeepAliveInitialDelay)]: 0,
                          [Symbol(kBytesRead)]: 0,
                          [Symbol(kBytesWritten)]: 0
                        }
                      },
                      replicaSet: 'atlas-6h3glt-shard-0',
                      useBigInt64: false,
                      promoteLongs: true,
                      promoteValues: true,
                      promoteBuffers: true,
                      [Symbol(@@mdb.enableMongoLogger)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(server)]: [Circular *6],
                    [Symbol(connection)]: Connection {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      id: '<monitor>',
                      address: '18.230.140.150:27017',
                      socketTimeoutMS: 0,
                      monitorCommands: false,
                      serverApi: undefined,
                      closed: false,
                      helloOk: true,
                      lastHelloMS: 83,
                      [Symbol(kCapture)]: false,
                      [Symbol(hello)]: {
                        helloOk: true,
                        topologyVersion: {
                          processId: new ObjectId("6402382a0e21490e021d214d"),
                          counter: 6
                        },
                        hosts: [
                          'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                        ],
                        setName: 'atlas-6h3glt-shard-0',
                        setVersion: 1,
                        ismaster: true,
                        secondary: false,
                        primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        tags: {
                          region: 'SA_EAST_1',
                          nodeType: 'ELECTABLE',
                          provider: 'AWS',
                          workloadType: 'OPERATIONAL'
                        },
                        me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        electionId: new ObjectId("7fffffff000000000000001c"),
                        lastWrite: {
                          opTime: {
                            ts: new Timestamp({ t: 1678058605, i: 7 }),
                            t: 28
                          },
                          lastWriteDate: 2023-03-05T23:23:25.000Z,
                          majorityOpTime: {
                            ts: new Timestamp({ t: 1678058605, i: 7 }),
                            t: 28
                          },
                          majorityWriteDate: 2023-03-05T23:23:25.000Z
                        },
                        maxBsonObjectSize: 16777216,
                        maxMessageSizeBytes: 48000000,
                        maxWriteBatchSize: 100000,
                        localTime: 2023-03-05T23:23:25.988Z,
                        logicalSessionTimeoutMinutes: 30,
                        connectionId: 47148,
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        readOnly: false,
                        ok: 1,
                        '$clusterTime': {
                          clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                          signature: {
                            hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                            keyId: new Long("7168531580753805315")
                          }
                        },
                        operationTime: new Timestamp({ t: 1678058605, i: 7 }),
                        isWritablePrimary: true
                      },
                      [Symbol(clusterTime)]: {
                        clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                        signature: {
                          hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                          keyId: new Long("7168531580753805315")
                        }
                      },
                      [Symbol(description)]: StreamDescription {
                        address: '18.230.140.150:27017',
                        type: 'RSPrimary',
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        maxBsonObjectSize: 16777216,
                        maxMessageSizeBytes: 48000000,
                        maxWriteBatchSize: 100000,
                        logicalSessionTimeoutMinutes: 30,
                        loadBalanced: false,
                        compressors: [ 'none' ]
                      },
                      [Symbol(generation)]: 0,
                      [Symbol(lastUseTime)]: 531479,
                      [Symbol(queue)]: Map(0) {},
                      [Symbol(messageStream)]: <ref *12> MessageStream {
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [
                            <ref *13> TLSSocket {
                              _tlsOptions: {
                                allowHalfOpen: undefined,
                                pipe: false,
                                secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                isServer: false,
                                requestCert: true,
                                rejectUnauthorized: true,
                                session: undefined,
                                ALPNProtocols: undefined,
                                requestOCSP: undefined,
                                enableTrace: undefined,
                                pskCallback: undefined,
                                highWaterMark: undefined,
                                onread: undefined,
                                signal: undefined
                              },
                              _secureEstablished: true,
                              _securePending: false,
                              _newSessionPending: false,
                              _controlReleased: true,
                              secureConnecting: false,
                              _SNICallback: null,
                              servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                              alpnProtocol: false,
                              authorized: true,
                              authorizationError: null,
                              encrypted: true,
                              _events: [Object: null prototype] {
                                end: [
                                  [Function: onReadableStreamEnd],
                                  [Function: bound onceWrapper] {
                                    listener: [Function: onend]
                                  }
                                ],
                                newListener: [
                                  [Function: keylogNewListener],
                                  [Function: newListener]
                                ],
                                secure: [Function: onConnectSecure],
                                close: [
                                  [Function (anonymous)],
                                  [Function: bound onceWrapper] {
                                    listener: [Function: onclose]
                                  }
                                ],
                                timeout: [Function (anonymous)],
                                error: [
                                  [Function: onerror],
                                  [Function (anonymous)]
                                ],
                                data: [Function: ondata],
                                unpipe: [Function: onunpipe],
                                finish: [Function: bound onceWrapper] {
                                  listener: [Function: onfinish]
                                }
                              },
                              _eventsCount: 9,
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [ [Circular *12] ],
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                constructed: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: true,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: false
                              },
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: undefined,
                              _server: null,
                              ssl: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *13]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *13]
                              },
                              _requestCert: true,
                              _rejectUnauthorized: true,
                              timeout: 0,
                              _peername: {
                                address: '18.230.140.150',
                                family: 'IPv4',
                                port: 27017
                              },
                              [Symbol(res)]: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *13]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *13]
                              },
                              [Symbol(verified)]: true,
                              [Symbol(pendingSession)]: null,
                              [Symbol(async_id_symbol)]: 110,
                              [Symbol(kHandle)]: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *13]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *13]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: Timeout {
                                _idleTimeout: -1,
                                _idlePrev: null,
                                _idleNext: null,
                                _idleStart: 16461,
                                _onTimeout: null,
                                _timerArgs: undefined,
                                _repeat: null,
                                _destroyed: true,
                                [Symbol(refed)]: false,
                                [Symbol(kHasPrimitive)]: false,
                                [Symbol(asyncId)]: 140,
                                [Symbol(triggerId)]: 110
                              },
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: true,
                              [Symbol(kSetKeepAlive)]: true,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0,
                              [Symbol(connect-options)]: {
                                rejectUnauthorized: true,
                                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                checkServerIdentity: [Function: checkServerIdentity],
                                minDHSize: 1024,
                                host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                port: 27017,
                                servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                singleUse: true
                              },
                              [Symbol(disable-renegotiation)]: true
                            }
                          ],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _events: [Object: null prototype] {
                          message: [Function (anonymous)],
                          error: [
                            [Function: onerror],
                            [Function (anonymous)]
                          ],
                          unpipe: [Function: onunpipe],
                          close: [Function: bound onceWrapper] {
                            listener: [Function: onclose]
                          },
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: onfinish]
                          },
                          end: [Function: bound onceWrapper] {
                            listener: [Function: onend]
                          },
                          data: [Function: ondata]
                        },
                        _eventsCount: 7,
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: true,
                        isMonitoringConnection: true,
                        maxBsonMessageSize: 67108864,
                        [Symbol(kCapture)]: false,
                        [Symbol(buffer)]: BufferPool {
                          buffers: List {
                            count: 0,
                            head: <ref *14> {
                              next: [Circular *14],
                              prev: [Circular *14],
                              value: null
                            }
                          },
                          totalByteLength: 0
                        }
                      },
                      [Symbol(stream)]: <ref *13> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          end: [
                            [Function: onReadableStreamEnd],
                            [Function: bound onceWrapper] {
                              listener: [Function: onend]
                            }
                          ],
                          newListener: [
                            [Function: keylogNewListener],
                            [Function: newListener]
                          ],
                          secure: [Function: onConnectSecure],
                          close: [
                            [Function (anonymous)],
                            [Function: bound onceWrapper] {
                              listener: [Function: onclose]
                            }
                          ],
                          timeout: [Function (anonymous)],
                          error: [
                            [Function: onerror],
                            [Function (anonymous)]
                          ],
                          data: [Function: ondata],
                          unpipe: [Function: onunpipe],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: onfinish]
                          }
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [
                            <ref *12> MessageStream {
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [ [Circular *13] ],
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                constructed: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: true,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: true,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: false
                              },
                              _events: [Object: null prototype] {
                                message: [Function (anonymous)],
                                error: [
                                  [Function: onerror],
                                  [Function (anonymous)]
                                ],
                                unpipe: [Function: onunpipe],
                                close: [Function: bound onceWrapper] {
                                  listener: [Function: onclose]
                                },
                                finish: [Function: bound onceWrapper] {
                                  listener: [Function: onfinish]
                                },
                                end: [Function: bound onceWrapper] {
                                  listener: [Function: onend]
                                },
                                data: [Function: ondata]
                              },
                              _eventsCount: 7,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: true,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: true,
                              isMonitoringConnection: true,
                              maxBsonMessageSize: 67108864,
                              [Symbol(kCapture)]: false,
                              [Symbol(buffer)]: BufferPool {
                                buffers: List {
                                  count: 0,
                                  head: <ref *14> {
                                    next: [Circular *14],
                                    prev: [Circular *14],
                                    value: null
                                  }
                                },
                                totalByteLength: 0
                              }
                            }
                          ],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *13]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *13]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        timeout: 0,
                        _peername: {
                          address: '18.230.140.150',
                          family: 'IPv4',
                          port: 27017
                        },
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *13]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *13]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 110,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *13]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *13]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: Timeout {
                          _idleTimeout: -1,
                          _idlePrev: null,
                          _idleNext: null,
                          _idleStart: 16461,
                          _onTimeout: null,
                          _timerArgs: undefined,
                          _repeat: null,
                          _destroyed: true,
                          [Symbol(refed)]: false,
                          [Symbol(kHasPrimitive)]: false,
                          [Symbol(asyncId)]: 140,
                          [Symbol(triggerId)]: 110
                        },
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: true,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 0,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                          port: 27017,
                          servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                          singleUse: true
                        },
                        [Symbol(disable-renegotiation)]: true
                      },
                      [Symbol(delayedTimeoutId)]: null
                    },
                    [Symbol(cancellationToken)]: CancellationToken {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: Infinity,
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(monitorId)]: MonitorInterval {
                      isExpeditedCallToFnScheduled: true,
                      stopped: false,
                      isExecutionInProgress: false,
                      hasExecutedOnce: false,
                      _executeAndReschedule: [Function (anonymous)],
                      fn: [Function (anonymous)],
                      lastExecutionEnded: 531567,
                      heartbeatFrequencyMS: 10000,
                      minHeartbeatFrequencyMS: 500,
                      timerId: Timeout {
                        _idleTimeout: 496,
                        _idlePrev: [TimersList],
                        _idleNext: [TimersList],
                        _idleStart: 16473,
                        _onTimeout: [Function (anonymous)],
                        _timerArgs: undefined,
                        _repeat: null,
                        _destroyed: false,
                        [Symbol(refed)]: true,
                        [Symbol(kHasPrimitive)]: false,
                        [Symbol(asyncId)]: 166,
                        [Symbol(triggerId)]: 157
                      }
                    }
                  }
                },
                'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017' => <ref *15> Server {
                  _events: [Object: null prototype] {
                    serverHeartbeatStarted: [Function (anonymous)],
                    serverHeartbeatSucceeded: [Function (anonymous)],
                    serverHeartbeatFailed: [Function (anonymous)],
                    commandStarted: [Function (anonymous)],
                    commandSucceeded: [Function (anonymous)],
                    commandFailed: [Function (anonymous)],
                    connectionPoolCreated: [Function (anonymous)],
                    connectionPoolReady: [Function (anonymous)],
                    connectionPoolCleared: [Function (anonymous)],
                    connectionPoolClosed: [Function (anonymous)],
                    connectionCreated: [Function (anonymous)],
                    connectionReady: [Function (anonymous)],
                    connectionClosed: [Function (anonymous)],
                    connectionCheckOutStarted: [Function (anonymous)],
                    connectionCheckOutFailed: [Function (anonymous)],
                    connectionCheckedOut: [Function (anonymous)],
                    connectionCheckedIn: [Function (anonymous)],
                    descriptionReceived: [Function (anonymous)]
                  },
                  _eventsCount: 18,
                  _maxListeners: undefined,
                  serverApi: undefined,
                  s: {
                    description: ServerDescription {
                      address: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                      type: 'RSSecondary',
                      hosts: [
                        'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                        'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                        'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                      ],
                      passives: [],
                      arbiters: [],
                      tags: {
                        workloadType: 'OPERATIONAL',
                        nodeType: 'ELECTABLE',
                        provider: 'AWS',
                        region: 'SA_EAST_1'
                      },
                      minWireVersion: 0,
                      maxWireVersion: 13,
                      roundTripTime: 308,
                      lastUpdateTime: 531552,
                      lastWriteDate: 2023-03-05T23:23:25.000Z,
                      error: null,
                      topologyVersion: {
                        processId: new ObjectId("6402371beee3a1cd86210b91"),
                        counter: 4
                      },
                      setName: 'atlas-6h3glt-shard-0',
                      setVersion: 1,
                      electionId: null,
                      logicalSessionTimeoutMinutes: 30,
                      primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                      me: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                      '$clusterTime': {
                        clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                        signature: {
                          hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                          keyId: new Long("7168531580753805315")
                        }
                      }
                    },
                    options: [Object: null prototype] {
                      hosts: [
                        new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                      ],
                      credentials: MongoCredentials {
                        username: 'dcsweb',
                        password: 'MopG23GHLEu3GwB0',
                        source: 'admin',
                        mechanism: 'DEFAULT',
                        mechanismProperties: {}
                      },
                      compressors: [ 'none' ],
                      connectTimeoutMS: 30000,
                      directConnection: false,
                      metadata: {
                        driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                        os: {
                          type: 'Linux',
                          name: 'linux',
                          architecture: 'x64',
                          version: '6.1.13-200.fc37.x86_64'
                        },
                        platform: 'Node.js v18.12.1, LE (unified)',
                        version: '5.1.0|7.0.0'
                      },
                      enableUtf8Validation: true,
                      forceServerObjectId: false,
                      heartbeatFrequencyMS: 10000,
                      keepAlive: true,
                      keepAliveInitialDelay: 120000,
                      loadBalanced: false,
                      localThresholdMS: 15,
                      maxConnecting: 2,
                      maxIdleTimeMS: 0,
                      maxPoolSize: 100,
                      minPoolSize: 0,
                      minHeartbeatFrequencyMS: 500,
                      monitorCommands: false,
                      noDelay: true,
                      pkFactory: { createPk: [Function: createPk] },
                      raw: false,
                      readPreference: ReadPreference {
                        mode: 'primary',
                        tags: undefined,
                        hedge: undefined,
                        maxStalenessSeconds: undefined,
                        minWireVersion: undefined
                      },
                      retryReads: true,
                      retryWrites: true,
                      serverSelectionTimeoutMS: 30000,
                      socketTimeoutMS: 0,
                      srvMaxHosts: 0,
                      srvServiceName: 'mongodb',
                      writeConcern: WriteConcern { w: 'majority' },
                      waitQueueTimeoutMS: 0,
                      zlibCompressionLevel: 0,
                      dbName: 'test',
                      userSpecifiedAuthSource: false,
                      userSpecifiedReplicaSet: false,
                      srvHost: 'dcsweb.snm3hyr.mongodb.net',
                      tls: true,
                      mongoLoggerOptions: {
                        componentSeverities: {
                          command: 'off',
                          topology: 'off',
                          serverSelection: 'off',
                          connection: 'off',
                          default: 'off'
                        },
                        maxDocumentLength: 1000,
                        logDestination: <ref *2> WriteStream {
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: null,
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 0,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: null,
                            ended: false,
                            endEmitted: false,
                            reading: false,
                            constructed: true,
                            sync: true,
                            needReadable: false,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: false,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: false,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: null
                          },
                          _events: [Object: null prototype] {
                            end: [Function: onReadableStreamEnd]
                          },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: false,
                            needDrain: false,
                            ending: false,
                            ended: false,
                            finished: false,
                            destroyed: false,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: true,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: null,
                          _server: null,
                          columns: 140,
                          rows: 12,
                          _type: 'tty',
                          fd: 2,
                          _isStdio: true,
                          destroySoon: [Function: destroy],
                          _destroy: [Function: dummyDestroy],
                          [Symbol(async_id_symbol)]: 51,
                          [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: false,
                          [Symbol(kSetKeepAliveInitialDelay)]: 0,
                          [Symbol(kBytesRead)]: 0,
                          [Symbol(kBytesWritten)]: 0
                        }
                      },
                      replicaSet: 'atlas-6h3glt-shard-0',
                      [Symbol(@@mdb.enableMongoLogger)]: false
                    },
                    state: 'connected',
                    topology: [Circular *5],
                    pool: ConnectionPool {
                      _events: [Object: null prototype] {
                        connectionPoolCreated: [Function (anonymous)],
                        connectionPoolReady: [Function (anonymous)],
                        connectionPoolCleared: [Function (anonymous)],
                        connectionPoolClosed: [Function (anonymous)],
                        connectionCreated: [Function (anonymous)],
                        connectionReady: [Function (anonymous)],
                        connectionClosed: [Function (anonymous)],
                        connectionCheckOutStarted: [Function (anonymous)],
                        connectionCheckOutFailed: [Function (anonymous)],
                        connectionCheckedOut: [Function (anonymous)],
                        connectionCheckedIn: [Function (anonymous)],
                        commandStarted: [Function (anonymous)],
                        commandSucceeded: [Function (anonymous)],
                        commandFailed: [Function (anonymous)],
                        clusterTimeReceived: [Function (anonymous)]
                      },
                      _eventsCount: 15,
                      _maxListeners: undefined,
                      options: {
                        hostAddress: new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                        hosts: [
                          new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                          new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                          new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                        ],
                        credentials: MongoCredentials {
                          username: 'dcsweb',
                          password: 'MopG23GHLEu3GwB0',
                          source: 'admin',
                          mechanism: 'DEFAULT',
                          mechanismProperties: {}
                        },
                        compressors: [ 'none' ],
                        connectTimeoutMS: 30000,
                        directConnection: false,
                        metadata: {
                          driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                          os: {
                            type: 'Linux',
                            name: 'linux',
                            architecture: 'x64',
                            version: '6.1.13-200.fc37.x86_64'
                          },
                          platform: 'Node.js v18.12.1, LE (unified)',
                          version: '5.1.0|7.0.0'
                        },
                        enableUtf8Validation: true,
                        forceServerObjectId: false,
                        heartbeatFrequencyMS: 10000,
                        keepAlive: true,
                        keepAliveInitialDelay: 120000,
                        loadBalanced: false,
                        localThresholdMS: 15,
                        maxConnecting: 2,
                        maxIdleTimeMS: 0,
                        maxPoolSize: 100,
                        minPoolSize: 0,
                        minHeartbeatFrequencyMS: 500,
                        monitorCommands: false,
                        noDelay: true,
                        pkFactory: { createPk: [Function: createPk] },
                        raw: false,
                        readPreference: ReadPreference {
                          mode: 'primary',
                          tags: undefined,
                          hedge: undefined,
                          maxStalenessSeconds: undefined,
                          minWireVersion: undefined
                        },
                        retryReads: true,
                        retryWrites: true,
                        serverSelectionTimeoutMS: 30000,
                        socketTimeoutMS: 0,
                        srvMaxHosts: 0,
                        srvServiceName: 'mongodb',
                        writeConcern: WriteConcern { w: 'majority' },
                        waitQueueTimeoutMS: 0,
                        zlibCompressionLevel: 0,
                        dbName: 'test',
                        userSpecifiedAuthSource: false,
                        userSpecifiedReplicaSet: false,
                        srvHost: 'dcsweb.snm3hyr.mongodb.net',
                        tls: true,
                        mongoLoggerOptions: {
                          componentSeverities: {
                            command: 'off',
                            topology: 'off',
                            serverSelection: 'off',
                            connection: 'off',
                            default: 'off'
                          },
                          maxDocumentLength: 1000,
                          logDestination: <ref *2> WriteStream {
                            connecting: false,
                            _hadError: false,
                            _parent: null,
                            _host: null,
                            _closeAfterHandlingError: false,
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 0,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [],
                              flowing: null,
                              ended: false,
                              endEmitted: false,
                              reading: false,
                              constructed: true,
                              sync: true,
                              needReadable: false,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: false,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: null
                            },
                            _events: [Object: null prototype] {
                              end: [Function: onReadableStreamEnd]
                            },
                            _eventsCount: 1,
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: false,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: true,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: null,
                            _server: null,
                            columns: 140,
                            rows: 12,
                            _type: 'tty',
                            fd: 2,
                            _isStdio: true,
                            destroySoon: [Function: destroy],
                            _destroy: [Function: dummyDestroy],
                            [Symbol(async_id_symbol)]: 51,
                            [Symbol(kHandle)]: TTY {
                              [Symbol(owner_symbol)]: [Circular *2]
                            },
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: null,
                            [Symbol(kBuffer)]: null,
                            [Symbol(kBufferCb)]: null,
                            [Symbol(kBufferGen)]: null,
                            [Symbol(kCapture)]: false,
                            [Symbol(kSetNoDelay)]: false,
                            [Symbol(kSetKeepAlive)]: false,
                            [Symbol(kSetKeepAliveInitialDelay)]: 0,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0
                          }
                        },
                        replicaSet: 'atlas-6h3glt-shard-0',
                        connectionType: [class Connection extends TypedEventEmitter] {
                          COMMAND_STARTED: 'commandStarted',
                          COMMAND_SUCCEEDED: 'commandSucceeded',
                          COMMAND_FAILED: 'commandFailed',
                          CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                          CLOSE: 'close',
                          MESSAGE: 'message',
                          PINNED: 'pinned',
                          UNPINNED: 'unpinned'
                        },
                        minPoolSizeCheckFrequencyMS: 100,
                        autoEncrypter: undefined,
                        [Symbol(@@mdb.enableMongoLogger)]: false
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(poolState)]: 'ready',
                      [Symbol(server)]: [Circular *15],
                      [Symbol(connections)]: List {
                        count: 0,
                        head: <ref *16> {
                          next: [Circular *16],
                          prev: [Circular *16],
                          value: null
                        }
                      },
                      [Symbol(pending)]: 0,
                      [Symbol(checkedOut)]: Set(0) {},
                      [Symbol(minPoolSizeTimer)]: undefined,
                      [Symbol(generation)]: 0,
                      [Symbol(serviceGenerations)]: Map(0) {},
                      [Symbol(connectionCounter)]: Object [Generator] {},
                      [Symbol(cancellationToken)]: CancellationToken {
                        _events: [Object: null prototype] {},
                        _eventsCount: 0,
                        _maxListeners: Infinity,
                        [Symbol(kCapture)]: false
                      },
                      [Symbol(waitQueue)]: List {
                        count: 0,
                        head: <ref *17> {
                          next: [Circular *17],
                          prev: [Circular *17],
                          value: null
                        }
                      },
                      [Symbol(metrics)]: ConnectionPoolMetrics {
                        txnConnections: 0,
                        cursorConnections: 0,
                        otherConnections: 0
                      },
                      [Symbol(processingWaitQueue)]: false
                    },
                    operationCount: 0
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(monitor)]: Monitor {
                    _events: [Object: null prototype] {
                      serverHeartbeatStarted: [Function (anonymous)],
                      serverHeartbeatSucceeded: [
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      serverHeartbeatFailed: [Function (anonymous)],
                      resetServer: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    s: { state: 'idle' },
                    address: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                    options: {
                      connectTimeoutMS: 30000,
                      heartbeatFrequencyMS: 10000,
                      minHeartbeatFrequencyMS: 500
                    },
                    connectOptions: {
                      id: '<monitor>',
                      generation: 0,
                      connectionType: [class Connection extends TypedEventEmitter] {
                        COMMAND_STARTED: 'commandStarted',
                        COMMAND_SUCCEEDED: 'commandSucceeded',
                        COMMAND_FAILED: 'commandFailed',
                        CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                        CLOSE: 'close',
                        MESSAGE: 'message',
                        PINNED: 'pinned',
                        UNPINNED: 'unpinned'
                      },
                      cancellationToken: CancellationToken {
                        _events: [Object: null prototype] {},
                        _eventsCount: 0,
                        _maxListeners: Infinity,
                        [Symbol(kCapture)]: false
                      },
                      hostAddress: new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                      hosts: [
                        new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                      ],
                      compressors: [ 'none' ],
                      connectTimeoutMS: 30000,
                      directConnection: false,
                      metadata: {
                        driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                        os: {
                          type: 'Linux',
                          name: 'linux',
                          architecture: 'x64',
                          version: '6.1.13-200.fc37.x86_64'
                        },
                        platform: 'Node.js v18.12.1, LE (unified)',
                        version: '5.1.0|7.0.0'
                      },
                      enableUtf8Validation: true,
                      forceServerObjectId: false,
                      heartbeatFrequencyMS: 10000,
                      keepAlive: true,
                      keepAliveInitialDelay: 120000,
                      loadBalanced: false,
                      localThresholdMS: 15,
                      maxConnecting: 2,
                      maxIdleTimeMS: 0,
                      maxPoolSize: 100,
                      minPoolSize: 0,
                      minHeartbeatFrequencyMS: 500,
                      monitorCommands: false,
                      noDelay: true,
                      pkFactory: { createPk: [Function: createPk] },
                      raw: false,
                      readPreference: ReadPreference {
                        mode: 'primary',
                        tags: undefined,
                        hedge: undefined,
                        maxStalenessSeconds: undefined,
                        minWireVersion: undefined
                      },
                      retryReads: true,
                      retryWrites: true,
                      serverSelectionTimeoutMS: 30000,
                      socketTimeoutMS: 0,
                      srvMaxHosts: 0,
                      srvServiceName: 'mongodb',
                      writeConcern: WriteConcern { w: 'majority' },
                      waitQueueTimeoutMS: 0,
                      zlibCompressionLevel: 0,
                      dbName: 'test',
                      userSpecifiedAuthSource: false,
                      userSpecifiedReplicaSet: false,
                      srvHost: 'dcsweb.snm3hyr.mongodb.net',
                      tls: true,
                      mongoLoggerOptions: {
                        componentSeverities: {
                          command: 'off',
                          topology: 'off',
                          serverSelection: 'off',
                          connection: 'off',
                          default: 'off'
                        },
                        maxDocumentLength: 1000,
                        logDestination: <ref *2> WriteStream {
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: null,
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 0,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: null,
                            ended: false,
                            endEmitted: false,
                            reading: false,
                            constructed: true,
                            sync: true,
                            needReadable: false,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: false,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: false,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: null
                          },
                          _events: [Object: null prototype] {
                            end: [Function: onReadableStreamEnd]
                          },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: false,
                            needDrain: false,
                            ending: false,
                            ended: false,
                            finished: false,
                            destroyed: false,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: true,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: null,
                          _server: null,
                          columns: 140,
                          rows: 12,
                          _type: 'tty',
                          fd: 2,
                          _isStdio: true,
                          destroySoon: [Function: destroy],
                          _destroy: [Function: dummyDestroy],
                          [Symbol(async_id_symbol)]: 51,
                          [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: false,
                          [Symbol(kSetKeepAliveInitialDelay)]: 0,
                          [Symbol(kBytesRead)]: 0,
                          [Symbol(kBytesWritten)]: 0
                        }
                      },
                      replicaSet: 'atlas-6h3glt-shard-0',
                      useBigInt64: false,
                      promoteLongs: true,
                      promoteValues: true,
                      promoteBuffers: true,
                      [Symbol(@@mdb.enableMongoLogger)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(server)]: [Circular *15],
                    [Symbol(connection)]: Connection {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      id: '<monitor>',
                      address: '18.230.95.68:27017',
                      socketTimeoutMS: 0,
                      monitorCommands: false,
                      serverApi: undefined,
                      closed: false,
                      helloOk: true,
                      lastHelloMS: 88,
                      [Symbol(kCapture)]: false,
                      [Symbol(hello)]: {
                        helloOk: true,
                        topologyVersion: {
                          processId: new ObjectId("6402371beee3a1cd86210b91"),
                          counter: 4
                        },
                        hosts: [
                          'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                        ],
                        setName: 'atlas-6h3glt-shard-0',
                        setVersion: 1,
                        ismaster: false,
                        secondary: true,
                        primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        tags: {
                          workloadType: 'OPERATIONAL',
                          nodeType: 'ELECTABLE',
                          provider: 'AWS',
                          region: 'SA_EAST_1'
                        },
                        me: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                        lastWrite: {
                          opTime: {
                            ts: new Timestamp({ t: 1678058605, i: 7 }),
                            t: 28
                          },
                          lastWriteDate: 2023-03-05T23:23:25.000Z,
                          majorityOpTime: {
                            ts: new Timestamp({ t: 1678058605, i: 7 }),
                            t: 28
                          },
                          majorityWriteDate: 2023-03-05T23:23:25.000Z
                        },
                        maxBsonObjectSize: 16777216,
                        maxMessageSizeBytes: 48000000,
                        maxWriteBatchSize: 100000,
                        localTime: 2023-03-05T23:23:25.987Z,
                        logicalSessionTimeoutMinutes: 30,
                        connectionId: 45924,
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        readOnly: false,
                        ok: 1,
                        '$clusterTime': {
                          clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                          signature: {
                            hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                            keyId: new Long("7168531580753805315")
                          }
                        },
                        operationTime: new Timestamp({ t: 1678058605, i: 7 }),
                        isWritablePrimary: false
                      },
                      [Symbol(clusterTime)]: {
                        clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                        signature: {
                          hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                          keyId: new Long("7168531580753805315")
                        }
                      },
                      [Symbol(description)]: StreamDescription {
                        address: '18.230.95.68:27017',
                        type: 'RSSecondary',
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        maxBsonObjectSize: 16777216,
                        maxMessageSizeBytes: 48000000,
                        maxWriteBatchSize: 100000,
                        logicalSessionTimeoutMinutes: 30,
                        loadBalanced: false,
                        compressors: [ 'none' ]
                      },
                      [Symbol(generation)]: 0,
                      [Symbol(lastUseTime)]: 531458,
                      [Symbol(queue)]: Map(0) {},
                      [Symbol(messageStream)]: <ref *18> MessageStream {
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [
                            <ref *19> TLSSocket {
                              _tlsOptions: {
                                allowHalfOpen: undefined,
                                pipe: false,
                                secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                isServer: false,
                                requestCert: true,
                                rejectUnauthorized: true,
                                session: undefined,
                                ALPNProtocols: undefined,
                                requestOCSP: undefined,
                                enableTrace: undefined,
                                pskCallback: undefined,
                                highWaterMark: undefined,
                                onread: undefined,
                                signal: undefined
                              },
                              _secureEstablished: true,
                              _securePending: false,
                              _newSessionPending: false,
                              _controlReleased: true,
                              secureConnecting: false,
                              _SNICallback: null,
                              servername: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                              alpnProtocol: false,
                              authorized: true,
                              authorizationError: null,
                              encrypted: true,
                              _events: [Object: null prototype] {
                                end: [
                                  [Function: onReadableStreamEnd],
                                  [Function: bound onceWrapper] {
                                    listener: [Function: onend]
                                  }
                                ],
                                newListener: [
                                  [Function: keylogNewListener],
                                  [Function: newListener]
                                ],
                                secure: [Function: onConnectSecure],
                                close: [
                                  [Function (anonymous)],
                                  [Function: bound onceWrapper] {
                                    listener: [Function: onclose]
                                  }
                                ],
                                timeout: [Function (anonymous)],
                                error: [
                                  [Function: onerror],
                                  [Function (anonymous)]
                                ],
                                data: [Function: ondata],
                                unpipe: [Function: onunpipe],
                                finish: [Function: bound onceWrapper] {
                                  listener: [Function: onfinish]
                                }
                              },
                              _eventsCount: 9,
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [ [Circular *18] ],
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                constructed: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: true,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: false
                              },
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: undefined,
                              _server: null,
                              ssl: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *19]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *19]
                              },
                              _requestCert: true,
                              _rejectUnauthorized: true,
                              timeout: 0,
                              _peername: {
                                address: '18.230.95.68',
                                family: 'IPv4',
                                port: 27017
                              },
                              [Symbol(res)]: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *19]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *19]
                              },
                              [Symbol(verified)]: true,
                              [Symbol(pendingSession)]: null,
                              [Symbol(async_id_symbol)]: 116,
                              [Symbol(kHandle)]: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *19]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *19]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: Timeout {
                                _idleTimeout: -1,
                                _idlePrev: null,
                                _idleNext: null,
                                _idleStart: 16439,
                                _onTimeout: null,
                                _timerArgs: undefined,
                                _repeat: null,
                                _destroyed: true,
                                [Symbol(refed)]: false,
                                [Symbol(kHasPrimitive)]: false,
                                [Symbol(asyncId)]: 135,
                                [Symbol(triggerId)]: 116
                              },
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: true,
                              [Symbol(kSetKeepAlive)]: true,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0,
                              [Symbol(connect-options)]: {
                                rejectUnauthorized: true,
                                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                checkServerIdentity: [Function: checkServerIdentity],
                                minDHSize: 1024,
                                host: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                                port: 27017,
                                servername: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                                singleUse: true
                              },
                              [Symbol(disable-renegotiation)]: true
                            }
                          ],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _events: [Object: null prototype] {
                          message: [Function (anonymous)],
                          error: [
                            [Function: onerror],
                            [Function (anonymous)]
                          ],
                          unpipe: [Function: onunpipe],
                          close: [Function: bound onceWrapper] {
                            listener: [Function: onclose]
                          },
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: onfinish]
                          },
                          end: [Function: bound onceWrapper] {
                            listener: [Function: onend]
                          },
                          data: [Function: ondata]
                        },
                        _eventsCount: 7,
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: true,
                        isMonitoringConnection: true,
                        maxBsonMessageSize: 67108864,
                        [Symbol(kCapture)]: false,
                        [Symbol(buffer)]: BufferPool {
                          buffers: List {
                            count: 0,
                            head: <ref *20> {
                              next: [Circular *20],
                              prev: [Circular *20],
                              value: null
                            }
                          },
                          totalByteLength: 0
                        }
                      },
                      [Symbol(stream)]: <ref *19> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          end: [
                            [Function: onReadableStreamEnd],
                            [Function: bound onceWrapper] {
                              listener: [Function: onend]
                            }
                          ],
                          newListener: [
                            [Function: keylogNewListener],
                            [Function: newListener]
                          ],
                          secure: [Function: onConnectSecure],
                          close: [
                            [Function (anonymous)],
                            [Function: bound onceWrapper] {
                              listener: [Function: onclose]
                            }
                          ],
                          timeout: [Function (anonymous)],
                          error: [
                            [Function: onerror],
                            [Function (anonymous)]
                          ],
                          data: [Function: ondata],
                          unpipe: [Function: onunpipe],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: onfinish]
                          }
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [
                            <ref *18> MessageStream {
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [ [Circular *19] ],
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                constructed: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: true,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: true,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: false
                              },
                              _events: [Object: null prototype] {
                                message: [Function (anonymous)],
                                error: [
                                  [Function: onerror],
                                  [Function (anonymous)]
                                ],
                                unpipe: [Function: onunpipe],
                                close: [Function: bound onceWrapper] {
                                  listener: [Function: onclose]
                                },
                                finish: [Function: bound onceWrapper] {
                                  listener: [Function: onfinish]
                                },
                                end: [Function: bound onceWrapper] {
                                  listener: [Function: onend]
                                },
                                data: [Function: ondata]
                              },
                              _eventsCount: 7,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: true,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: true,
                              isMonitoringConnection: true,
                              maxBsonMessageSize: 67108864,
                              [Symbol(kCapture)]: false,
                              [Symbol(buffer)]: BufferPool {
                                buffers: List {
                                  count: 0,
                                  head: <ref *20> {
                                    next: [Circular *20],
                                    prev: [Circular *20],
                                    value: null
                                  }
                                },
                                totalByteLength: 0
                              }
                            }
                          ],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *19]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *19]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        timeout: 0,
                        _peername: {
                          address: '18.230.95.68',
                          family: 'IPv4',
                          port: 27017
                        },
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *19]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *19]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 116,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *19]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *19]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: Timeout {
                          _idleTimeout: -1,
                          _idlePrev: null,
                          _idleNext: null,
                          _idleStart: 16439,
                          _onTimeout: null,
                          _timerArgs: undefined,
                          _repeat: null,
                          _destroyed: true,
                          [Symbol(refed)]: false,
                          [Symbol(kHasPrimitive)]: false,
                          [Symbol(asyncId)]: 135,
                          [Symbol(triggerId)]: 116
                        },
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: true,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 0,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          host: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                          port: 27017,
                          servername: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                          singleUse: true
                        },
                        [Symbol(disable-renegotiation)]: true
                      },
                      [Symbol(delayedTimeoutId)]: null
                    },
                    [Symbol(cancellationToken)]: CancellationToken {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: Infinity,
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(monitorId)]: MonitorInterval {
                      isExpeditedCallToFnScheduled: true,
                      stopped: false,
                      isExecutionInProgress: false,
                      hasExecutedOnce: false,
                      _executeAndReschedule: [Function (anonymous)],
                      fn: [Function (anonymous)],
                      lastExecutionEnded: 531556,
                      heartbeatFrequencyMS: 10000,
                      minHeartbeatFrequencyMS: 500,
                      timerId: Timeout {
                        _idleTimeout: 500,
                        _idlePrev: [TimersList],
                        _idleNext: [TimersList],
                        _idleStart: 16459,
                        _onTimeout: [Function (anonymous)],
                        _timerArgs: undefined,
                        _repeat: null,
                        _destroyed: false,
                        [Symbol(refed)]: true,
                        [Symbol(kHasPrimitive)]: false,
                        [Symbol(asyncId)]: 155,
                        [Symbol(triggerId)]: 149
                      }
                    }
                  }
                },
                'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017' => <ref *21> Server {
                  _events: [Object: null prototype] {
                    serverHeartbeatStarted: [Function (anonymous)],
                    serverHeartbeatSucceeded: [Function (anonymous)],
                    serverHeartbeatFailed: [Function (anonymous)],
                    commandStarted: [Function (anonymous)],
                    commandSucceeded: [Function (anonymous)],
                    commandFailed: [Function (anonymous)],
                    connectionPoolCreated: [Function (anonymous)],
                    connectionPoolReady: [Function (anonymous)],
                    connectionPoolCleared: [Function (anonymous)],
                    connectionPoolClosed: [Function (anonymous)],
                    connectionCreated: [Function (anonymous)],
                    connectionReady: [Function (anonymous)],
                    connectionClosed: [Function (anonymous)],
                    connectionCheckOutStarted: [Function (anonymous)],
                    connectionCheckOutFailed: [Function (anonymous)],
                    connectionCheckedOut: [Function (anonymous)],
                    connectionCheckedIn: [Function (anonymous)],
                    descriptionReceived: [Function (anonymous)]
                  },
                  _eventsCount: 18,
                  _maxListeners: undefined,
                  serverApi: undefined,
                  s: {
                    description: ServerDescription {
                      address: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                      type: 'RSSecondary',
                      hosts: [
                        'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                        'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                        'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                      ],
                      passives: [],
                      arbiters: [],
                      tags: {
                        workloadType: 'OPERATIONAL',
                        region: 'SA_EAST_1',
                        nodeType: 'ELECTABLE',
                        provider: 'AWS'
                      },
                      minWireVersion: 0,
                      maxWireVersion: 13,
                      roundTripTime: 330,
                      lastUpdateTime: 531576,
                      lastWriteDate: 2023-03-05T23:23:25.000Z,
                      error: null,
                      topologyVersion: {
                        processId: new ObjectId("6402390def6293ac4d778e4a"),
                        counter: 3
                      },
                      setName: 'atlas-6h3glt-shard-0',
                      setVersion: 1,
                      electionId: null,
                      logicalSessionTimeoutMinutes: 30,
                      primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                      me: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                      '$clusterTime': {
                        clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                        signature: {
                          hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                          keyId: new Long("7168531580753805315")
                        }
                      }
                    },
                    options: [Object: null prototype] {
                      hosts: [
                        new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                      ],
                      credentials: MongoCredentials {
                        username: 'dcsweb',
                        password: 'MopG23GHLEu3GwB0',
                        source: 'admin',
                        mechanism: 'DEFAULT',
                        mechanismProperties: {}
                      },
                      compressors: [ 'none' ],
                      connectTimeoutMS: 30000,
                      directConnection: false,
                      metadata: {
                        driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                        os: {
                          type: 'Linux',
                          name: 'linux',
                          architecture: 'x64',
                          version: '6.1.13-200.fc37.x86_64'
                        },
                        platform: 'Node.js v18.12.1, LE (unified)',
                        version: '5.1.0|7.0.0'
                      },
                      enableUtf8Validation: true,
                      forceServerObjectId: false,
                      heartbeatFrequencyMS: 10000,
                      keepAlive: true,
                      keepAliveInitialDelay: 120000,
                      loadBalanced: false,
                      localThresholdMS: 15,
                      maxConnecting: 2,
                      maxIdleTimeMS: 0,
                      maxPoolSize: 100,
                      minPoolSize: 0,
                      minHeartbeatFrequencyMS: 500,
                      monitorCommands: false,
                      noDelay: true,
                      pkFactory: { createPk: [Function: createPk] },
                      raw: false,
                      readPreference: ReadPreference {
                        mode: 'primary',
                        tags: undefined,
                        hedge: undefined,
                        maxStalenessSeconds: undefined,
                        minWireVersion: undefined
                      },
                      retryReads: true,
                      retryWrites: true,
                      serverSelectionTimeoutMS: 30000,
                      socketTimeoutMS: 0,
                      srvMaxHosts: 0,
                      srvServiceName: 'mongodb',
                      writeConcern: WriteConcern { w: 'majority' },
                      waitQueueTimeoutMS: 0,
                      zlibCompressionLevel: 0,
                      dbName: 'test',
                      userSpecifiedAuthSource: false,
                      userSpecifiedReplicaSet: false,
                      srvHost: 'dcsweb.snm3hyr.mongodb.net',
                      tls: true,
                      mongoLoggerOptions: {
                        componentSeverities: {
                          command: 'off',
                          topology: 'off',
                          serverSelection: 'off',
                          connection: 'off',
                          default: 'off'
                        },
                        maxDocumentLength: 1000,
                        logDestination: <ref *2> WriteStream {
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: null,
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 0,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: null,
                            ended: false,
                            endEmitted: false,
                            reading: false,
                            constructed: true,
                            sync: true,
                            needReadable: false,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: false,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: false,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: null
                          },
                          _events: [Object: null prototype] {
                            end: [Function: onReadableStreamEnd]
                          },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: false,
                            needDrain: false,
                            ending: false,
                            ended: false,
                            finished: false,
                            destroyed: false,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: true,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: null,
                          _server: null,
                          columns: 140,
                          rows: 12,
                          _type: 'tty',
                          fd: 2,
                          _isStdio: true,
                          destroySoon: [Function: destroy],
                          _destroy: [Function: dummyDestroy],
                          [Symbol(async_id_symbol)]: 51,
                          [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: false,
                          [Symbol(kSetKeepAliveInitialDelay)]: 0,
                          [Symbol(kBytesRead)]: 0,
                          [Symbol(kBytesWritten)]: 0
                        }
                      },
                      replicaSet: 'atlas-6h3glt-shard-0',
                      [Symbol(@@mdb.enableMongoLogger)]: false
                    },
                    state: 'connected',
                    topology: [Circular *5],
                    pool: ConnectionPool {
                      _events: [Object: null prototype] {
                        connectionPoolCreated: [Function (anonymous)],
                        connectionPoolReady: [Function (anonymous)],
                        connectionPoolCleared: [Function (anonymous)],
                        connectionPoolClosed: [Function (anonymous)],
                        connectionCreated: [Function (anonymous)],
                        connectionReady: [Function (anonymous)],
                        connectionClosed: [Function (anonymous)],
                        connectionCheckOutStarted: [Function (anonymous)],
                        connectionCheckOutFailed: [Function (anonymous)],
                        connectionCheckedOut: [Function (anonymous)],
                        connectionCheckedIn: [Function (anonymous)],
                        commandStarted: [Function (anonymous)],
                        commandSucceeded: [Function (anonymous)],
                        commandFailed: [Function (anonymous)],
                        clusterTimeReceived: [Function (anonymous)]
                      },
                      _eventsCount: 15,
                      _maxListeners: undefined,
                      options: {
                        hostAddress: new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017'),
                        hosts: [
                          new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                          new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                          new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                        ],
                        credentials: MongoCredentials {
                          username: 'dcsweb',
                          password: 'MopG23GHLEu3GwB0',
                          source: 'admin',
                          mechanism: 'DEFAULT',
                          mechanismProperties: {}
                        },
                        compressors: [ 'none' ],
                        connectTimeoutMS: 30000,
                        directConnection: false,
                        metadata: {
                          driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                          os: {
                            type: 'Linux',
                            name: 'linux',
                            architecture: 'x64',
                            version: '6.1.13-200.fc37.x86_64'
                          },
                          platform: 'Node.js v18.12.1, LE (unified)',
                          version: '5.1.0|7.0.0'
                        },
                        enableUtf8Validation: true,
                        forceServerObjectId: false,
                        heartbeatFrequencyMS: 10000,
                        keepAlive: true,
                        keepAliveInitialDelay: 120000,
                        loadBalanced: false,
                        localThresholdMS: 15,
                        maxConnecting: 2,
                        maxIdleTimeMS: 0,
                        maxPoolSize: 100,
                        minPoolSize: 0,
                        minHeartbeatFrequencyMS: 500,
                        monitorCommands: false,
                        noDelay: true,
                        pkFactory: { createPk: [Function: createPk] },
                        raw: false,
                        readPreference: ReadPreference {
                          mode: 'primary',
                          tags: undefined,
                          hedge: undefined,
                          maxStalenessSeconds: undefined,
                          minWireVersion: undefined
                        },
                        retryReads: true,
                        retryWrites: true,
                        serverSelectionTimeoutMS: 30000,
                        socketTimeoutMS: 0,
                        srvMaxHosts: 0,
                        srvServiceName: 'mongodb',
                        writeConcern: WriteConcern { w: 'majority' },
                        waitQueueTimeoutMS: 0,
                        zlibCompressionLevel: 0,
                        dbName: 'test',
                        userSpecifiedAuthSource: false,
                        userSpecifiedReplicaSet: false,
                        srvHost: 'dcsweb.snm3hyr.mongodb.net',
                        tls: true,
                        mongoLoggerOptions: {
                          componentSeverities: {
                            command: 'off',
                            topology: 'off',
                            serverSelection: 'off',
                            connection: 'off',
                            default: 'off'
                          },
                          maxDocumentLength: 1000,
                          logDestination: <ref *2> WriteStream {
                            connecting: false,
                            _hadError: false,
                            _parent: null,
                            _host: null,
                            _closeAfterHandlingError: false,
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 0,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [],
                              flowing: null,
                              ended: false,
                              endEmitted: false,
                              reading: false,
                              constructed: true,
                              sync: true,
                              needReadable: false,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: false,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: null
                            },
                            _events: [Object: null prototype] {
                              end: [Function: onReadableStreamEnd]
                            },
                            _eventsCount: 1,
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: false,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: true,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: null,
                            _server: null,
                            columns: 140,
                            rows: 12,
                            _type: 'tty',
                            fd: 2,
                            _isStdio: true,
                            destroySoon: [Function: destroy],
                            _destroy: [Function: dummyDestroy],
                            [Symbol(async_id_symbol)]: 51,
                            [Symbol(kHandle)]: TTY {
                              [Symbol(owner_symbol)]: [Circular *2]
                            },
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: null,
                            [Symbol(kBuffer)]: null,
                            [Symbol(kBufferCb)]: null,
                            [Symbol(kBufferGen)]: null,
                            [Symbol(kCapture)]: false,
                            [Symbol(kSetNoDelay)]: false,
                            [Symbol(kSetKeepAlive)]: false,
                            [Symbol(kSetKeepAliveInitialDelay)]: 0,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0
                          }
                        },
                        replicaSet: 'atlas-6h3glt-shard-0',
                        connectionType: [class Connection extends TypedEventEmitter] {
                          COMMAND_STARTED: 'commandStarted',
                          COMMAND_SUCCEEDED: 'commandSucceeded',
                          COMMAND_FAILED: 'commandFailed',
                          CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                          CLOSE: 'close',
                          MESSAGE: 'message',
                          PINNED: 'pinned',
                          UNPINNED: 'unpinned'
                        },
                        minPoolSizeCheckFrequencyMS: 100,
                        autoEncrypter: undefined,
                        [Symbol(@@mdb.enableMongoLogger)]: false
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(poolState)]: 'ready',
                      [Symbol(server)]: [Circular *21],
                      [Symbol(connections)]: List {
                        count: 0,
                        head: <ref *22> {
                          next: [Circular *22],
                          prev: [Circular *22],
                          value: null
                        }
                      },
                      [Symbol(pending)]: 0,
                      [Symbol(checkedOut)]: Set(0) {},
                      [Symbol(minPoolSizeTimer)]: undefined,
                      [Symbol(generation)]: 0,
                      [Symbol(serviceGenerations)]: Map(0) {},
                      [Symbol(connectionCounter)]: Object [Generator] {},
                      [Symbol(cancellationToken)]: CancellationToken {
                        _events: [Object: null prototype] {},
                        _eventsCount: 0,
                        _maxListeners: Infinity,
                        [Symbol(kCapture)]: false
                      },
                      [Symbol(waitQueue)]: List {
                        count: 0,
                        head: <ref *23> {
                          next: [Circular *23],
                          prev: [Circular *23],
                          value: null
                        }
                      },
                      [Symbol(metrics)]: ConnectionPoolMetrics {
                        txnConnections: 0,
                        cursorConnections: 0,
                        otherConnections: 0
                      },
                      [Symbol(processingWaitQueue)]: false
                    },
                    operationCount: 0
                  },
                  [Symbol(kCapture)]: false,
                  [Symbol(monitor)]: Monitor {
                    _events: [Object: null prototype] {
                      serverHeartbeatStarted: [Function (anonymous)],
                      serverHeartbeatSucceeded: [
                        [Function (anonymous)],
                        [Function (anonymous)]
                      ],
                      serverHeartbeatFailed: [Function (anonymous)],
                      resetServer: [Function (anonymous)]
                    },
                    _eventsCount: 4,
                    _maxListeners: undefined,
                    s: { state: 'idle' },
                    address: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                    options: {
                      connectTimeoutMS: 30000,
                      heartbeatFrequencyMS: 10000,
                      minHeartbeatFrequencyMS: 500
                    },
                    connectOptions: {
                      id: '<monitor>',
                      generation: 0,
                      connectionType: [class Connection extends TypedEventEmitter] {
                        COMMAND_STARTED: 'commandStarted',
                        COMMAND_SUCCEEDED: 'commandSucceeded',
                        COMMAND_FAILED: 'commandFailed',
                        CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                        CLOSE: 'close',
                        MESSAGE: 'message',
                        PINNED: 'pinned',
                        UNPINNED: 'unpinned'
                      },
                      cancellationToken: CancellationToken {
                        _events: [Object: null prototype] {},
                        _eventsCount: 0,
                        _maxListeners: Infinity,
                        [Symbol(kCapture)]: false
                      },
                      hostAddress: new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017'),
                      hosts: [
                        new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                        new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                      ],
                      compressors: [ 'none' ],
                      connectTimeoutMS: 30000,
                      directConnection: false,
                      metadata: {
                        driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                        os: {
                          type: 'Linux',
                          name: 'linux',
                          architecture: 'x64',
                          version: '6.1.13-200.fc37.x86_64'
                        },
                        platform: 'Node.js v18.12.1, LE (unified)',
                        version: '5.1.0|7.0.0'
                      },
                      enableUtf8Validation: true,
                      forceServerObjectId: false,
                      heartbeatFrequencyMS: 10000,
                      keepAlive: true,
                      keepAliveInitialDelay: 120000,
                      loadBalanced: false,
                      localThresholdMS: 15,
                      maxConnecting: 2,
                      maxIdleTimeMS: 0,
                      maxPoolSize: 100,
                      minPoolSize: 0,
                      minHeartbeatFrequencyMS: 500,
                      monitorCommands: false,
                      noDelay: true,
                      pkFactory: { createPk: [Function: createPk] },
                      raw: false,
                      readPreference: ReadPreference {
                        mode: 'primary',
                        tags: undefined,
                        hedge: undefined,
                        maxStalenessSeconds: undefined,
                        minWireVersion: undefined
                      },
                      retryReads: true,
                      retryWrites: true,
                      serverSelectionTimeoutMS: 30000,
                      socketTimeoutMS: 0,
                      srvMaxHosts: 0,
                      srvServiceName: 'mongodb',
                      writeConcern: WriteConcern { w: 'majority' },
                      waitQueueTimeoutMS: 0,
                      zlibCompressionLevel: 0,
                      dbName: 'test',
                      userSpecifiedAuthSource: false,
                      userSpecifiedReplicaSet: false,
                      srvHost: 'dcsweb.snm3hyr.mongodb.net',
                      tls: true,
                      mongoLoggerOptions: {
                        componentSeverities: {
                          command: 'off',
                          topology: 'off',
                          serverSelection: 'off',
                          connection: 'off',
                          default: 'off'
                        },
                        maxDocumentLength: 1000,
                        logDestination: <ref *2> WriteStream {
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: null,
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 0,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: null,
                            ended: false,
                            endEmitted: false,
                            reading: false,
                            constructed: true,
                            sync: true,
                            needReadable: false,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: false,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: false,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: null
                          },
                          _events: [Object: null prototype] {
                            end: [Function: onReadableStreamEnd]
                          },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: false,
                            needDrain: false,
                            ending: false,
                            ended: false,
                            finished: false,
                            destroyed: false,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: true,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: false,
                            closeEmitted: false,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: null,
                          _server: null,
                          columns: 140,
                          rows: 12,
                          _type: 'tty',
                          fd: 2,
                          _isStdio: true,
                          destroySoon: [Function: destroy],
                          _destroy: [Function: dummyDestroy],
                          [Symbol(async_id_symbol)]: 51,
                          [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: false,
                          [Symbol(kSetKeepAliveInitialDelay)]: 0,
                          [Symbol(kBytesRead)]: 0,
                          [Symbol(kBytesWritten)]: 0
                        }
                      },
                      replicaSet: 'atlas-6h3glt-shard-0',
                      useBigInt64: false,
                      promoteLongs: true,
                      promoteValues: true,
                      promoteBuffers: true,
                      [Symbol(@@mdb.enableMongoLogger)]: false
                    },
                    [Symbol(kCapture)]: false,
                    [Symbol(server)]: [Circular *21],
                    [Symbol(connection)]: Connection {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      id: '<monitor>',
                      address: '54.207.205.239:27017',
                      socketTimeoutMS: 0,
                      monitorCommands: false,
                      serverApi: undefined,
                      closed: false,
                      helloOk: true,
                      lastHelloMS: 67,
                      [Symbol(kCapture)]: false,
                      [Symbol(hello)]: {
                        helloOk: true,
                        topologyVersion: {
                          processId: new ObjectId("6402390def6293ac4d778e4a"),
                          counter: 3
                        },
                        hosts: [
                          'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                        ],
                        setName: 'atlas-6h3glt-shard-0',
                        setVersion: 1,
                        ismaster: false,
                        secondary: true,
                        primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        tags: {
                          workloadType: 'OPERATIONAL',
                          region: 'SA_EAST_1',
                          nodeType: 'ELECTABLE',
                          provider: 'AWS'
                        },
                        me: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                        lastWrite: {
                          opTime: {
                            ts: new Timestamp({ t: 1678058605, i: 7 }),
                            t: 28
                          },
                          lastWriteDate: 2023-03-05T23:23:25.000Z,
                          majorityOpTime: {
                            ts: new Timestamp({ t: 1678058605, i: 7 }),
                            t: 28
                          },
                          majorityWriteDate: 2023-03-05T23:23:25.000Z
                        },
                        maxBsonObjectSize: 16777216,
                        maxMessageSizeBytes: 48000000,
                        maxWriteBatchSize: 100000,
                        localTime: 2023-03-05T23:23:26.023Z,
                        logicalSessionTimeoutMinutes: 30,
                        connectionId: 43057,
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        readOnly: false,
                        ok: 1,
                        '$clusterTime': {
                          clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                          signature: {
                            hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                            keyId: new Long("7168531580753805315")
                          }
                        },
                        operationTime: new Timestamp({ t: 1678058605, i: 7 }),
                        isWritablePrimary: false
                      },
                      [Symbol(clusterTime)]: {
                        clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                        signature: {
                          hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                          keyId: new Long("7168531580753805315")
                        }
                      },
                      [Symbol(description)]: StreamDescription {
                        address: '54.207.205.239:27017',
                        type: 'RSSecondary',
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        maxBsonObjectSize: 16777216,
                        maxMessageSizeBytes: 48000000,
                        maxWriteBatchSize: 100000,
                        logicalSessionTimeoutMinutes: 30,
                        loadBalanced: false,
                        compressors: [ 'none' ]
                      },
                      [Symbol(generation)]: 0,
                      [Symbol(lastUseTime)]: 531508,
                      [Symbol(queue)]: Map(0) {},
                      [Symbol(messageStream)]: <ref *24> MessageStream {
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [
                            <ref *25> TLSSocket {
                              _tlsOptions: {
                                allowHalfOpen: undefined,
                                pipe: false,
                                secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                isServer: false,
                                requestCert: true,
                                rejectUnauthorized: true,
                                session: undefined,
                                ALPNProtocols: undefined,
                                requestOCSP: undefined,
                                enableTrace: undefined,
                                pskCallback: undefined,
                                highWaterMark: undefined,
                                onread: undefined,
                                signal: undefined
                              },
                              _secureEstablished: true,
                              _securePending: false,
                              _newSessionPending: false,
                              _controlReleased: true,
                              secureConnecting: false,
                              _SNICallback: null,
                              servername: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                              alpnProtocol: false,
                              authorized: true,
                              authorizationError: null,
                              encrypted: true,
                              _events: [Object: null prototype] {
                                end: [
                                  [Function: onReadableStreamEnd],
                                  [Function: bound onceWrapper] {
                                    listener: [Function: onend]
                                  }
                                ],
                                newListener: [
                                  [Function: keylogNewListener],
                                  [Function: newListener]
                                ],
                                secure: [Function: onConnectSecure],
                                close: [
                                  [Function (anonymous)],
                                  [Function: bound onceWrapper] {
                                    listener: [Function: onclose]
                                  }
                                ],
                                timeout: [Function (anonymous)],
                                error: [
                                  [Function: onerror],
                                  [Function (anonymous)]
                                ],
                                data: [Function: ondata],
                                unpipe: [Function: onunpipe],
                                finish: [Function: bound onceWrapper] {
                                  listener: [Function: onfinish]
                                }
                              },
                              _eventsCount: 9,
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [ [Circular *24] ],
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                constructed: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: true,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: false
                              },
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: undefined,
                              _server: null,
                              ssl: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *25]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *25]
                              },
                              _requestCert: true,
                              _rejectUnauthorized: true,
                              timeout: 0,
                              _peername: {
                                address: '54.207.205.239',
                                family: 'IPv4',
                                port: 27017
                              },
                              [Symbol(res)]: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *25]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *25]
                              },
                              [Symbol(verified)]: true,
                              [Symbol(pendingSession)]: null,
                              [Symbol(async_id_symbol)]: 122,
                              [Symbol(kHandle)]: TLSWrap {
                                _parent: TCP {
                                  reading: [Getter/Setter],
                                  onconnection: null,
                                  [Symbol(owner_symbol)]: [Circular *25]
                                },
                                _parentWrap: undefined,
                                _secureContext: SecureContext {
                                  context: SecureContext {}
                                },
                                reading: true,
                                onkeylog: [Function: onkeylog],
                                onhandshakestart: {},
                                onhandshakedone: [Function (anonymous)],
                                onocspresponse: [Function: onocspresponse],
                                onnewsession: [Function: onnewsessionclient],
                                onerror: [Function: onerror],
                                [Symbol(owner_symbol)]: [Circular *25]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: Timeout {
                                _idleTimeout: -1,
                                _idlePrev: null,
                                _idleNext: null,
                                _idleStart: 16476,
                                _onTimeout: null,
                                _timerArgs: undefined,
                                _repeat: null,
                                _destroyed: true,
                                [Symbol(refed)]: false,
                                [Symbol(kHasPrimitive)]: false,
                                [Symbol(asyncId)]: 145,
                                [Symbol(triggerId)]: 122
                              },
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: true,
                              [Symbol(kSetKeepAlive)]: true,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0,
                              [Symbol(connect-options)]: {
                                rejectUnauthorized: true,
                                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                checkServerIdentity: [Function: checkServerIdentity],
                                minDHSize: 1024,
                                host: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                                port: 27017,
                                servername: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                                singleUse: true
                              },
                              [Symbol(disable-renegotiation)]: true
                            }
                          ],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _events: [Object: null prototype] {
                          message: [Function (anonymous)],
                          error: [
                            [Function: onerror],
                            [Function (anonymous)]
                          ],
                          unpipe: [Function: onunpipe],
                          close: [Function: bound onceWrapper] {
                            listener: [Function: onclose]
                          },
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: onfinish]
                          },
                          end: [Function: bound onceWrapper] {
                            listener: [Function: onend]
                          },
                          data: [Function: ondata]
                        },
                        _eventsCount: 7,
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: true,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: true,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: true,
                        isMonitoringConnection: true,
                        maxBsonMessageSize: 67108864,
                        [Symbol(kCapture)]: false,
                        [Symbol(buffer)]: BufferPool {
                          buffers: List {
                            count: 0,
                            head: <ref *26> {
                              next: [Circular *26],
                              prev: [Circular *26],
                              value: null
                            }
                          },
                          totalByteLength: 0
                        }
                      },
                      [Symbol(stream)]: <ref *25> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          end: [
                            [Function: onReadableStreamEnd],
                            [Function: bound onceWrapper] {
                              listener: [Function: onend]
                            }
                          ],
                          newListener: [
                            [Function: keylogNewListener],
                            [Function: newListener]
                          ],
                          secure: [Function: onConnectSecure],
                          close: [
                            [Function (anonymous)],
                            [Function: bound onceWrapper] {
                              listener: [Function: onclose]
                            }
                          ],
                          timeout: [Function (anonymous)],
                          error: [
                            [Function: onerror],
                            [Function (anonymous)]
                          ],
                          data: [Function: ondata],
                          unpipe: [Function: onunpipe],
                          finish: [Function: bound onceWrapper] {
                            listener: [Function: onfinish]
                          }
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [
                            <ref *24> MessageStream {
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [ [Circular *25] ],
                                flowing: true,
                                ended: false,
                                endEmitted: false,
                                reading: true,
                                constructed: true,
                                sync: false,
                                needReadable: true,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: true,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: true,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: false
                              },
                              _events: [Object: null prototype] {
                                message: [Function (anonymous)],
                                error: [
                                  [Function: onerror],
                                  [Function (anonymous)]
                                ],
                                unpipe: [Function: onunpipe],
                                close: [Function: bound onceWrapper] {
                                  listener: [Function: onclose]
                                },
                                finish: [Function: bound onceWrapper] {
                                  listener: [Function: onfinish]
                                },
                                end: [Function: bound onceWrapper] {
                                  listener: [Function: onend]
                                },
                                data: [Function: ondata]
                              },
                              _eventsCount: 7,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: true,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: false,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: true,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: true,
                              isMonitoringConnection: true,
                              maxBsonMessageSize: 67108864,
                              [Symbol(kCapture)]: false,
                              [Symbol(buffer)]: BufferPool {
                                buffers: List {
                                  count: 0,
                                  head: <ref *26> {
                                    next: [Circular *26],
                                    prev: [Circular *26],
                                    value: null
                                  }
                                },
                                totalByteLength: 0
                              }
                            }
                          ],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *25]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *25]
                        },
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        timeout: 0,
                        _peername: {
                          address: '54.207.205.239',
                          family: 'IPv4',
                          port: 27017
                        },
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *25]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *25]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 122,
                        [Symbol(kHandle)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *25]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *25]
                        },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: Timeout {
                          _idleTimeout: -1,
                          _idlePrev: null,
                          _idleNext: null,
                          _idleStart: 16476,
                          _onTimeout: null,
                          _timerArgs: undefined,
                          _repeat: null,
                          _destroyed: true,
                          [Symbol(refed)]: false,
                          [Symbol(kHasPrimitive)]: false,
                          [Symbol(asyncId)]: 145,
                          [Symbol(triggerId)]: 122
                        },
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: true,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 0,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          host: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                          port: 27017,
                          servername: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                          singleUse: true
                        },
                        [Symbol(disable-renegotiation)]: true
                      },
                      [Symbol(delayedTimeoutId)]: null
                    },
                    [Symbol(cancellationToken)]: CancellationToken {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: Infinity,
                      [Symbol(kCapture)]: false
                    },
                    [Symbol(monitorId)]: MonitorInterval {
                      isExpeditedCallToFnScheduled: true,
                      stopped: false,
                      isExecutionInProgress: false,
                      hasExecutedOnce: false,
                      _executeAndReschedule: [Function (anonymous)],
                      fn: [Function (anonymous)],
                      lastExecutionEnded: 531577,
                      heartbeatFrequencyMS: 10000,
                      minHeartbeatFrequencyMS: 500,
                      timerId: Timeout {
                        _idleTimeout: 499,
                        _idlePrev: [TimersList],
                        _idleNext: [TimersList],
                        _idleStart: 16480,
                        _onTimeout: [Function (anonymous)],
                        _timerArgs: undefined,
                        _repeat: null,
                        _destroyed: false,
                        [Symbol(refed)]: true,
                        [Symbol(kHasPrimitive)]: false,
                        [Symbol(asyncId)]: 172,
                        [Symbol(triggerId)]: 167
                      }
                    }
                  }
                }
              },
              credentials: MongoCredentials {
                username: 'dcsweb',
                password: 'MopG23GHLEu3GwB0',
                source: 'admin',
                mechanism: 'DEFAULT',
                mechanismProperties: {}
              },
              clusterTime: {
                clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                signature: {
                  hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                  keyId: new Long("7168531580753805315")
                }
              },
              connectionTimers: Set(0) {},
              detectShardedTopology: [Function: detectShardedTopology],
              detectSrvRecords: [Function: detectSrvRecords],
              srvPoller: SrvPoller {
                _events: [Object: null prototype] {},
                _eventsCount: 0,
                _maxListeners: undefined,
                srvHost: 'dcsweb.snm3hyr.mongodb.net',
                srvMaxHosts: 0,
                srvServiceName: 'mongodb',
                rescanSrvIntervalMS: 60000,
                heartbeatFrequencyMS: 10000,
                haMode: false,
                generation: 0,
                _timeout: undefined,
                [Symbol(kCapture)]: false
              }
            },
            client: [Circular *3],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: List {
              count: 0,
              head: <ref *27> {
                next: [Circular *27],
                prev: [Circular *27],
                value: null
              }
            }
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [
              new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
              new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
              new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
            ],
            credentials: MongoCredentials {
              username: 'dcsweb',
              password: 'MopG23GHLEu3GwB0',
              source: 'admin',
              mechanism: 'DEFAULT',
              mechanismProperties: {}
            },
            compressors: [ 'none' ],
            connectTimeoutMS: 30000,
            directConnection: false,
            metadata: {
              driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
              os: {
                type: 'Linux',
                name: 'linux',
                architecture: 'x64',
                version: '6.1.13-200.fc37.x86_64'
              },
              platform: 'Node.js v18.12.1, LE (unified)',
              version: '5.1.0|7.0.0'
            },
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: { createPk: [Function: createPk] },
            raw: false,
            readPreference: ReadPreference {
              mode: 'primary',
              tags: undefined,
              hedge: undefined,
              maxStalenessSeconds: undefined,
              minWireVersion: undefined
            },
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: WriteConcern { w: 'majority' },
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            dbName: 'test',
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'dcsweb.snm3hyr.mongodb.net',
            tls: true,
            mongoLoggerOptions: {
              componentSeverities: {
                command: 'off',
                topology: 'off',
                serverSelection: 'off',
                connection: 'off',
                default: 'off'
              },
              maxDocumentLength: 1000,
              logDestination: <ref *2> WriteStream {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: null,
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 0,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: null,
                  ended: false,
                  endEmitted: false,
                  reading: false,
                  constructed: true,
                  sync: true,
                  needReadable: false,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: false,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: null
                },
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd]
                },
                _eventsCount: 1,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: false,
                  needDrain: false,
                  ending: false,
                  ended: false,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: true,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                columns: 140,
                rows: 12,
                _type: 'tty',
                fd: 2,
                _isStdio: true,
                destroySoon: [Function: destroy],
                _destroy: [Function: dummyDestroy],
                [Symbol(async_id_symbol)]: 51,
                [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: false,
                [Symbol(kSetKeepAliveInitialDelay)]: 0,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            },
            replicaSet: 'atlas-6h3glt-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        },
        '$initialConnection': Promise { [Circular *28] },
        db: Db {
          s: {
            client: <ref *3> MongoClient {
              _events: [Object: null prototype] {
                topologyDescriptionChanged: [Function (anonymous)]
              },
              _eventsCount: 1,
              _maxListeners: 0,
              mongoLogger: MongoLogger {
                componentSeverities: {
                  command: 'off',
                  topology: 'off',
                  serverSelection: 'off',
                  connection: 'off',
                  default: 'off'
                },
                maxDocumentLength: 1000,
                logDestination: <ref *2> WriteStream {
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: null,
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 0,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: null,
                    ended: false,
                    endEmitted: false,
                    reading: false,
                    constructed: true,
                    sync: true,
                    needReadable: false,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: false,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: false,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: null
                  },
                  _events: [Object: null prototype] {
                    end: [Function: onReadableStreamEnd]
                  },
                  _eventsCount: 1,
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: null,
                  _server: null,
                  columns: 140,
                  rows: 12,
                  _type: 'tty',
                  fd: 2,
                  _isStdio: true,
                  destroySoon: [Function: destroy],
                  _destroy: [Function: dummyDestroy],
                  [Symbol(async_id_symbol)]: 51,
                  [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: false,
                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
                }
              },
              s: {
                url: 'mongodb+srv://dcsweb:MopG23GHLEu3GwB0@dcsweb.snm3hyr.mongodb.net/?retryWrites=true&w=majority',
                bsonOptions: {
                  raw: false,
                  useBigInt64: false,
                  promoteLongs: true,
                  promoteValues: true,
                  promoteBuffers: false,
                  ignoreUndefined: false,
                  bsonRegExp: false,
                  serializeFunctions: false,
                  fieldsAsRaw: {},
                  enableUtf8Validation: true
                },
                namespace: MongoDBNamespace { db: 'admin', collection: undefined },
                hasBeenClosed: false,
                sessionPool: ServerSessionPool {
                  client: [Circular *3],
                  sessions: List {
                    count: 0,
                    head: <ref *4> {
                      next: [Circular *4],
                      prev: [Circular *4],
                      value: null
                    }
                  }
                },
                activeSessions: Set(0) {},
                options: [Getter],
                readConcern: [Getter],
                writeConcern: [Getter],
                readPreference: [Getter],
                isMongoClient: [Getter]
              },
              topology: <ref *5> Topology {
                _events: [Object: null prototype] {
                  topologyDescriptionChanged: [
                    [Function: detectShardedTopology],
                    [Function (anonymous)]
                  ],
                  connectionPoolCreated: [Function (anonymous)],
                  connectionPoolReady: [Function (anonymous)],
                  connectionPoolCleared: [Function (anonymous)],
                  connectionPoolClosed: [Function (anonymous)],
                  connectionCreated: [Function (anonymous)],
                  connectionReady: [Function (anonymous)],
                  connectionClosed: [Function (anonymous)],
                  connectionCheckOutStarted: [Function (anonymous)],
                  connectionCheckOutFailed: [Function (anonymous)],
                  connectionCheckedOut: [Function (anonymous)],
                  connectionCheckedIn: [Function (anonymous)],
                  commandStarted: [Function (anonymous)],
                  commandSucceeded: [Function (anonymous)],
                  commandFailed: [Function (anonymous)],
                  serverOpening: [Function (anonymous)],
                  serverClosed: [Function (anonymous)],
                  serverDescriptionChanged: [Function (anonymous)],
                  topologyOpening: [Function (anonymous)],
                  topologyClosed: [Function (anonymous)],
                  error: [Function (anonymous)],
                  timeout: [Function (anonymous)],
                  close: [Function (anonymous)],
                  serverHeartbeatStarted: [Function (anonymous)],
                  serverHeartbeatSucceeded: [Function (anonymous)],
                  serverHeartbeatFailed: [Function (anonymous)]
                },
                _eventsCount: 26,
                _maxListeners: undefined,
                selectServerAsync: [Function (anonymous)],
                s: {
                  id: 0,
                  options: [Object: null prototype] {
                    hosts: [
                      new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                      new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                      new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                    ],
                    credentials: MongoCredentials {
                      username: 'dcsweb',
                      password: 'MopG23GHLEu3GwB0',
                      source: 'admin',
                      mechanism: 'DEFAULT',
                      mechanismProperties: {}
                    },
                    compressors: [ 'none' ],
                    connectTimeoutMS: 30000,
                    directConnection: false,
                    metadata: {
                      driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                      os: {
                        type: 'Linux',
                        name: 'linux',
                        architecture: 'x64',
                        version: '6.1.13-200.fc37.x86_64'
                      },
                      platform: 'Node.js v18.12.1, LE (unified)',
                      version: '5.1.0|7.0.0'
                    },
                    enableUtf8Validation: true,
                    forceServerObjectId: false,
                    heartbeatFrequencyMS: 10000,
                    keepAlive: true,
                    keepAliveInitialDelay: 120000,
                    loadBalanced: false,
                    localThresholdMS: 15,
                    maxConnecting: 2,
                    maxIdleTimeMS: 0,
                    maxPoolSize: 100,
                    minPoolSize: 0,
                    minHeartbeatFrequencyMS: 500,
                    monitorCommands: false,
                    noDelay: true,
                    pkFactory: { createPk: [Function: createPk] },
                    raw: false,
                    readPreference: ReadPreference {
                      mode: 'primary',
                      tags: undefined,
                      hedge: undefined,
                      maxStalenessSeconds: undefined,
                      minWireVersion: undefined
                    },
                    retryReads: true,
                    retryWrites: true,
                    serverSelectionTimeoutMS: 30000,
                    socketTimeoutMS: 0,
                    srvMaxHosts: 0,
                    srvServiceName: 'mongodb',
                    writeConcern: WriteConcern { w: 'majority' },
                    waitQueueTimeoutMS: 0,
                    zlibCompressionLevel: 0,
                    dbName: 'test',
                    userSpecifiedAuthSource: false,
                    userSpecifiedReplicaSet: false,
                    srvHost: 'dcsweb.snm3hyr.mongodb.net',
                    tls: true,
                    mongoLoggerOptions: {
                      componentSeverities: {
                        command: 'off',
                        topology: 'off',
                        serverSelection: 'off',
                        connection: 'off',
                        default: 'off'
                      },
                      maxDocumentLength: 1000,
                      logDestination: <ref *2> WriteStream {
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: null,
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 0,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: null,
                          ended: false,
                          endEmitted: false,
                          reading: false,
                          constructed: true,
                          sync: true,
                          needReadable: false,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: false,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: false,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: null
                        },
                        _events: [Object: null prototype] {
                          end: [Function: onReadableStreamEnd]
                        },
                        _eventsCount: 1,
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: false,
                          needDrain: false,
                          ending: false,
                          ended: false,
                          finished: false,
                          destroyed: false,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: true,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: false,
                          closeEmitted: false,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: null,
                        _server: null,
                        columns: 140,
                        rows: 12,
                        _type: 'tty',
                        fd: 2,
                        _isStdio: true,
                        destroySoon: [Function: destroy],
                        _destroy: [Function: dummyDestroy],
                        [Symbol(async_id_symbol)]: 51,
                        [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: false,
                        [Symbol(kSetKeepAliveInitialDelay)]: 0,
                        [Symbol(kBytesRead)]: 0,
                        [Symbol(kBytesWritten)]: 0
                      }
                    },
                    replicaSet: 'atlas-6h3glt-shard-0',
                    [Symbol(@@mdb.enableMongoLogger)]: false
                  },
                  seedlist: [
                    new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                    new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                    new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                  ],
                  state: 'connected',
                  description: TopologyDescription {
                    type: 'ReplicaSetWithPrimary',
                    servers: Map(3) {
                      'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017' => ServerDescription {
                        address: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        type: 'RSPrimary',
                        hosts: [
                          'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                        ],
                        passives: [],
                        arbiters: [],
                        tags: {
                          region: 'SA_EAST_1',
                          nodeType: 'ELECTABLE',
                          provider: 'AWS',
                          workloadType: 'OPERATIONAL'
                        },
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        roundTripTime: 402,
                        lastUpdateTime: 531563,
                        lastWriteDate: 2023-03-05T23:23:25.000Z,
                        error: null,
                        topologyVersion: {
                          processId: new ObjectId("6402382a0e21490e021d214d"),
                          counter: 6
                        },
                        setName: 'atlas-6h3glt-shard-0',
                        setVersion: 1,
                        electionId: new ObjectId("7fffffff000000000000001c"),
                        logicalSessionTimeoutMinutes: 30,
                        primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        '$clusterTime': {
                          clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                          signature: {
                            hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                            keyId: new Long("7168531580753805315")
                          }
                        }
                      },
                      'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017' => ServerDescription {
                        address: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                        type: 'RSSecondary',
                        hosts: [
                          'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                        ],
                        passives: [],
                        arbiters: [],
                        tags: {
                          workloadType: 'OPERATIONAL',
                          nodeType: 'ELECTABLE',
                          provider: 'AWS',
                          region: 'SA_EAST_1'
                        },
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        roundTripTime: 308,
                        lastUpdateTime: 531552,
                        lastWriteDate: 2023-03-05T23:23:25.000Z,
                        error: null,
                        topologyVersion: {
                          processId: new ObjectId("6402371beee3a1cd86210b91"),
                          counter: 4
                        },
                        setName: 'atlas-6h3glt-shard-0',
                        setVersion: 1,
                        electionId: null,
                        logicalSessionTimeoutMinutes: 30,
                        primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        me: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                        '$clusterTime': {
                          clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                          signature: {
                            hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                            keyId: new Long("7168531580753805315")
                          }
                        }
                      },
                      'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017' => ServerDescription {
                        address: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                        type: 'RSSecondary',
                        hosts: [
                          'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                          'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                        ],
                        passives: [],
                        arbiters: [],
                        tags: {
                          workloadType: 'OPERATIONAL',
                          region: 'SA_EAST_1',
                          nodeType: 'ELECTABLE',
                          provider: 'AWS'
                        },
                        minWireVersion: 0,
                        maxWireVersion: 13,
                        roundTripTime: 330,
                        lastUpdateTime: 531576,
                        lastWriteDate: 2023-03-05T23:23:25.000Z,
                        error: null,
                        topologyVersion: {
                          processId: new ObjectId("6402390def6293ac4d778e4a"),
                          counter: 3
                        },
                        setName: 'atlas-6h3glt-shard-0',
                        setVersion: 1,
                        electionId: null,
                        logicalSessionTimeoutMinutes: 30,
                        primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        me: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                        '$clusterTime': {
                          clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                          signature: {
                            hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                            keyId: new Long("7168531580753805315")
                          }
                        }
                      }
                    },
                    stale: false,
                    compatible: true,
                    heartbeatFrequencyMS: 10000,
                    localThresholdMS: 15,
                    setName: 'atlas-6h3glt-shard-0',
                    maxElectionId: new ObjectId("7fffffff000000000000001c"),
                    maxSetVersion: 1,
                    commonWireVersion: 0,
                    logicalSessionTimeoutMinutes: 30
                  },
                  serverSelectionTimeoutMS: 30000,
                  heartbeatFrequencyMS: 10000,
                  minHeartbeatFrequencyMS: 500,
                  servers: Map(3) {
                    'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017' => <ref *6> Server {
                      _events: [Object: null prototype] {
                        serverHeartbeatStarted: [Function (anonymous)],
                        serverHeartbeatSucceeded: [Function (anonymous)],
                        serverHeartbeatFailed: [Function (anonymous)],
                        commandStarted: [Function (anonymous)],
                        commandSucceeded: [Function (anonymous)],
                        commandFailed: [Function (anonymous)],
                        connectionPoolCreated: [Function (anonymous)],
                        connectionPoolReady: [Function (anonymous)],
                        connectionPoolCleared: [Function (anonymous)],
                        connectionPoolClosed: [Function (anonymous)],
                        connectionCreated: [Function (anonymous)],
                        connectionReady: [Function (anonymous)],
                        connectionClosed: [Function (anonymous)],
                        connectionCheckOutStarted: [Function (anonymous)],
                        connectionCheckOutFailed: [Function (anonymous)],
                        connectionCheckedOut: [Function (anonymous)],
                        connectionCheckedIn: [Function (anonymous)],
                        descriptionReceived: [Function (anonymous)]
                      },
                      _eventsCount: 18,
                      _maxListeners: undefined,
                      serverApi: undefined,
                      s: {
                        description: ServerDescription {
                          address: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                          type: 'RSPrimary',
                          hosts: [
                            'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                            'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                            'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                          ],
                          passives: [],
                          arbiters: [],
                          tags: {
                            region: 'SA_EAST_1',
                            nodeType: 'ELECTABLE',
                            provider: 'AWS',
                            workloadType: 'OPERATIONAL'
                          },
                          minWireVersion: 0,
                          maxWireVersion: 13,
                          roundTripTime: 402,
                          lastUpdateTime: 531563,
                          lastWriteDate: 2023-03-05T23:23:25.000Z,
                          error: null,
                          topologyVersion: {
                            processId: new ObjectId("6402382a0e21490e021d214d"),
                            counter: 6
                          },
                          setName: 'atlas-6h3glt-shard-0',
                          setVersion: 1,
                          electionId: new ObjectId("7fffffff000000000000001c"),
                          logicalSessionTimeoutMinutes: 30,
                          primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                          me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                          '$clusterTime': {
                            clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                            signature: {
                              hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                              keyId: new Long("7168531580753805315")
                            }
                          }
                        },
                        options: [Object: null prototype] {
                          hosts: [
                            new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                          ],
                          credentials: MongoCredentials {
                            username: 'dcsweb',
                            password: 'MopG23GHLEu3GwB0',
                            source: 'admin',
                            mechanism: 'DEFAULT',
                            mechanismProperties: {}
                          },
                          compressors: [ 'none' ],
                          connectTimeoutMS: 30000,
                          directConnection: false,
                          metadata: {
                            driver: {
                              name: 'nodejs|Mongoose',
                              version: '5.1.0'
                            },
                            os: {
                              type: 'Linux',
                              name: 'linux',
                              architecture: 'x64',
                              version: '6.1.13-200.fc37.x86_64'
                            },
                            platform: 'Node.js v18.12.1, LE (unified)',
                            version: '5.1.0|7.0.0'
                          },
                          enableUtf8Validation: true,
                          forceServerObjectId: false,
                          heartbeatFrequencyMS: 10000,
                          keepAlive: true,
                          keepAliveInitialDelay: 120000,
                          loadBalanced: false,
                          localThresholdMS: 15,
                          maxConnecting: 2,
                          maxIdleTimeMS: 0,
                          maxPoolSize: 100,
                          minPoolSize: 0,
                          minHeartbeatFrequencyMS: 500,
                          monitorCommands: false,
                          noDelay: true,
                          pkFactory: { createPk: [Function: createPk] },
                          raw: false,
                          readPreference: ReadPreference {
                            mode: 'primary',
                            tags: undefined,
                            hedge: undefined,
                            maxStalenessSeconds: undefined,
                            minWireVersion: undefined
                          },
                          retryReads: true,
                          retryWrites: true,
                          serverSelectionTimeoutMS: 30000,
                          socketTimeoutMS: 0,
                          srvMaxHosts: 0,
                          srvServiceName: 'mongodb',
                          writeConcern: WriteConcern { w: 'majority' },
                          waitQueueTimeoutMS: 0,
                          zlibCompressionLevel: 0,
                          dbName: 'test',
                          userSpecifiedAuthSource: false,
                          userSpecifiedReplicaSet: false,
                          srvHost: 'dcsweb.snm3hyr.mongodb.net',
                          tls: true,
                          mongoLoggerOptions: {
                            componentSeverities: {
                              command: 'off',
                              topology: 'off',
                              serverSelection: 'off',
                              connection: 'off',
                              default: 'off'
                            },
                            maxDocumentLength: 1000,
                            logDestination: <ref *2> WriteStream {
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: null,
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 0,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [],
                                flowing: null,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                constructed: true,
                                sync: true,
                                needReadable: false,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: false,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: null
                              },
                              _events: [Object: null prototype] {
                                end: [Function: onReadableStreamEnd]
                              },
                              _eventsCount: 1,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: true,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: null,
                              _server: null,
                              columns: 140,
                              rows: 12,
                              _type: 'tty',
                              fd: 2,
                              _isStdio: true,
                              destroySoon: [Function: destroy],
                              _destroy: [Function: dummyDestroy],
                              [Symbol(async_id_symbol)]: 51,
                              [Symbol(kHandle)]: TTY {
                                [Symbol(owner_symbol)]: [Circular *2]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: null,
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: false,
                              [Symbol(kSetKeepAlive)]: false,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0
                            }
                          },
                          replicaSet: 'atlas-6h3glt-shard-0',
                          [Symbol(@@mdb.enableMongoLogger)]: false
                        },
                        state: 'connected',
                        topology: [Circular *5],
                        pool: ConnectionPool {
                          _events: [Object: null prototype] {
                            connectionPoolCreated: [Function (anonymous)],
                            connectionPoolReady: [Function (anonymous)],
                            connectionPoolCleared: [Function (anonymous)],
                            connectionPoolClosed: [Function (anonymous)],
                            connectionCreated: [Function (anonymous)],
                            connectionReady: [Function (anonymous)],
                            connectionClosed: [Function (anonymous)],
                            connectionCheckOutStarted: [Function (anonymous)],
                            connectionCheckOutFailed: [Function (anonymous)],
                            connectionCheckedOut: [Function (anonymous)],
                            connectionCheckedIn: [Function (anonymous)],
                            commandStarted: [Function (anonymous)],
                            commandSucceeded: [Function (anonymous)],
                            commandFailed: [Function (anonymous)],
                            clusterTimeReceived: [Function (anonymous)]
                          },
                          _eventsCount: 15,
                          _maxListeners: undefined,
                          options: {
                            hostAddress: new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                            hosts: [
                              new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                              new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                              new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                            ],
                            credentials: MongoCredentials {
                              username: 'dcsweb',
                              password: 'MopG23GHLEu3GwB0',
                              source: 'admin',
                              mechanism: 'DEFAULT',
                              mechanismProperties: {}
                            },
                            compressors: [ 'none' ],
                            connectTimeoutMS: 30000,
                            directConnection: false,
                            metadata: {
                              driver: {
                                name: 'nodejs|Mongoose',
                                version: '5.1.0'
                              },
                              os: {
                                type: 'Linux',
                                name: 'linux',
                                architecture: 'x64',
                                version: '6.1.13-200.fc37.x86_64'
                              },
                              platform: 'Node.js v18.12.1, LE (unified)',
                              version: '5.1.0|7.0.0'
                            },
                            enableUtf8Validation: true,
                            forceServerObjectId: false,
                            heartbeatFrequencyMS: 10000,
                            keepAlive: true,
                            keepAliveInitialDelay: 120000,
                            loadBalanced: false,
                            localThresholdMS: 15,
                            maxConnecting: 2,
                            maxIdleTimeMS: 0,
                            maxPoolSize: 100,
                            minPoolSize: 0,
                            minHeartbeatFrequencyMS: 500,
                            monitorCommands: false,
                            noDelay: true,
                            pkFactory: { createPk: [Function: createPk] },
                            raw: false,
                            readPreference: ReadPreference {
                              mode: 'primary',
                              tags: undefined,
                              hedge: undefined,
                              maxStalenessSeconds: undefined,
                              minWireVersion: undefined
                            },
                            retryReads: true,
                            retryWrites: true,
                            serverSelectionTimeoutMS: 30000,
                            socketTimeoutMS: 0,
                            srvMaxHosts: 0,
                            srvServiceName: 'mongodb',
                            writeConcern: WriteConcern { w: 'majority' },
                            waitQueueTimeoutMS: 0,
                            zlibCompressionLevel: 0,
                            dbName: 'test',
                            userSpecifiedAuthSource: false,
                            userSpecifiedReplicaSet: false,
                            srvHost: 'dcsweb.snm3hyr.mongodb.net',
                            tls: true,
                            mongoLoggerOptions: {
                              componentSeverities: {
                                command: 'off',
                                topology: 'off',
                                serverSelection: 'off',
                                connection: 'off',
                                default: 'off'
                              },
                              maxDocumentLength: 1000,
                              logDestination: <ref *2> WriteStream {
                                connecting: false,
                                _hadError: false,
                                _parent: null,
                                _host: null,
                                _closeAfterHandlingError: false,
                                _readableState: ReadableState {
                                  objectMode: false,
                                  highWaterMark: 0,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: [],
                                  flowing: null,
                                  ended: false,
                                  endEmitted: false,
                                  reading: false,
                                  constructed: true,
                                  sync: true,
                                  needReadable: false,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  destroyed: false,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrainWriters: null,
                                  multiAwaitDrain: false,
                                  readingMore: false,
                                  dataEmitted: false,
                                  decoder: null,
                                  encoding: null,
                                  [Symbol(kPaused)]: null
                                },
                                _events: [Object: null prototype] {
                                  end: [Function: onReadableStreamEnd]
                                },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                _writableState: WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: false,
                                  needDrain: false,
                                  ending: false,
                                  ended: false,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: true,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  afterWriteTickInfo: null,
                                  buffered: [],
                                  bufferedIndex: 0,
                                  allBuffers: true,
                                  allNoop: true,
                                  pendingcb: 0,
                                  constructed: true,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  [Symbol(kOnFinished)]: []
                                },
                                allowHalfOpen: false,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                columns: 140,
                                rows: 12,
                                _type: 'tty',
                                fd: 2,
                                _isStdio: true,
                                destroySoon: [Function: destroy],
                                _destroy: [Function: dummyDestroy],
                                [Symbol(async_id_symbol)]: 51,
                                [Symbol(kHandle)]: TTY {
                                  [Symbol(owner_symbol)]: [Circular *2]
                                },
                                [Symbol(lastWriteQueueSize)]: 0,
                                [Symbol(timeout)]: null,
                                [Symbol(kBuffer)]: null,
                                [Symbol(kBufferCb)]: null,
                                [Symbol(kBufferGen)]: null,
                                [Symbol(kCapture)]: false,
                                [Symbol(kSetNoDelay)]: false,
                                [Symbol(kSetKeepAlive)]: false,
                                [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                [Symbol(kBytesRead)]: 0,
                                [Symbol(kBytesWritten)]: 0
                              }
                            },
                            replicaSet: 'atlas-6h3glt-shard-0',
                            connectionType: [class Connection extends TypedEventEmitter] {
                              COMMAND_STARTED: 'commandStarted',
                              COMMAND_SUCCEEDED: 'commandSucceeded',
                              COMMAND_FAILED: 'commandFailed',
                              CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                              CLOSE: 'close',
                              MESSAGE: 'message',
                              PINNED: 'pinned',
                              UNPINNED: 'unpinned'
                            },
                            minPoolSizeCheckFrequencyMS: 100,
                            autoEncrypter: undefined,
                            [Symbol(@@mdb.enableMongoLogger)]: false
                          },
                          [Symbol(kCapture)]: false,
                          [Symbol(poolState)]: 'ready',
                          [Symbol(server)]: [Circular *6],
                          [Symbol(connections)]: List {
                            count: 1,
                            head: <ref *7> {
                              next: {
                                next: [Circular *7],
                                prev: [Circular *7],
                                value: Connection {
                                  _events: [Object: null prototype] {
                                    commandStarted: [Function (anonymous)],
                                    commandSucceeded: [Function (anonymous)],
                                    commandFailed: [Function (anonymous)],
                                    clusterTimeReceived: [Function (anonymous)]
                                  },
                                  _eventsCount: 4,
                                  _maxListeners: undefined,
                                  id: 1,
                                  address: '18.230.140.150:27017',
                                  socketTimeoutMS: 0,
                                  monitorCommands: false,
                                  serverApi: undefined,
                                  closed: false,
                                  helloOk: true,
                                  lastHelloMS: 54,
                                  [Symbol(kCapture)]: false,
                                  [Symbol(hello)]: {
                                    helloOk: true,
                                    topologyVersion: {
                                      processId: new ObjectId("6402382a0e21490e021d214d"),
                                      counter: 6
                                    },
                                    hosts: [
                                      'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                                      'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                                      'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                                    ],
                                    setName: 'atlas-6h3glt-shard-0',
                                    setVersion: 1,
                                    ismaster: true,
                                    secondary: false,
                                    primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                                    tags: {
                                      region: 'SA_EAST_1',
                                      nodeType: 'ELECTABLE',
                                      provider: 'AWS',
                                      workloadType: 'OPERATIONAL'
                                    },
                                    me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                                    electionId: new ObjectId("7fffffff000000000000001c"),
                                    lastWrite: {
                                      opTime: {
                                        ts: new Timestamp({ t: 1678058606, i: 1 }),
                                        t: 28
                                      },
                                      lastWriteDate: 2023-03-05T23:23:26.000Z,
                                      majorityOpTime: {
                                        ts: new Timestamp({ t: 1678058606, i: 1 }),
                                        t: 28
                                      },
                                      majorityWriteDate: 2023-03-05T23:23:26.000Z
                                    },
                                    maxBsonObjectSize: 16777216,
                                    maxMessageSizeBytes: 48000000,
                                    maxWriteBatchSize: 100000,
                                    localTime: 2023-03-05T23:23:26.221Z,
                                    logicalSessionTimeoutMinutes: 30,
                                    connectionId: 47148,
                                    minWireVersion: 0,
                                    maxWireVersion: 13,
                                    readOnly: false,
                                    ok: 1,
                                    '$clusterTime': {
                                      clusterTime: new Timestamp({ t: 1678058606, i: 1 }),
                                      signature: {
                                        hash: new Binary(Buffer.from("c31d451e3e3b615e1de5f3d7a35cc20989fc2968", "hex"), 0),
                                        keyId: new Long("7168531580753805315")
                                      }
                                    },
                                    operationTime: new Timestamp({ t: 1678058606, i: 1 }),
                                    saslSupportedMechs: [ 'SCRAM-SHA-1' ],
                                    isWritablePrimary: true
                                  },
                                  [Symbol(clusterTime)]: {
                                    clusterTime: new Timestamp({ t: 1678058606, i: 1 }),
                                    signature: {
                                      hash: new Binary(Buffer.from("c31d451e3e3b615e1de5f3d7a35cc20989fc2968", "hex"), 0),
                                      keyId: new Long("7168531580753805315")
                                    }
                                  },
                                  [Symbol(description)]: StreamDescription {
                                    address: '18.230.140.150:27017',
                                    type: 'RSPrimary',
                                    minWireVersion: 0,
                                    maxWireVersion: 13,
                                    maxBsonObjectSize: 16777216,
                                    maxMessageSizeBytes: 48000000,
                                    maxWriteBatchSize: 100000,
                                    logicalSessionTimeoutMinutes: 30,
                                    loadBalanced: false,
                                    compressors: [ 'none' ]
                                  },
                                  [Symbol(generation)]: 0,
                                  [Symbol(lastUseTime)]: 531968,
                                  [Symbol(queue)]: Map(0) {},
                                  [Symbol(messageStream)]: <ref *8> MessageStream {
                                    _readableState: ReadableState {
                                      objectMode: false,
                                      highWaterMark: 16384,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: [
                                        <ref *9> TLSSocket {
                                          _tlsOptions: {
                                            allowHalfOpen: undefined,
                                            pipe: false,
                                            secureContext: SecureContext {
                                              context: SecureContext {}
                                            },
                                            isServer: false,
                                            requestCert: true,
                                            rejectUnauthorized: true,
                                            session: undefined,
                                            ALPNProtocols: undefined,
                                            requestOCSP: undefined,
                                            enableTrace: undefined,
                                            pskCallback: undefined,
                                            highWaterMark: undefined,
                                            onread: undefined,
                                            signal: undefined
                                          },
                                          _secureEstablished: true,
                                          _securePending: false,
                                          _newSessionPending: false,
                                          _controlReleased: true,
                                          secureConnecting: false,
                                          _SNICallback: null,
                                          servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                          alpnProtocol: false,
                                          authorized: true,
                                          authorizationError: null,
                                          encrypted: true,
                                          _events: [Object: null prototype] {
                                            end: [
                                              [Function: onReadableStreamEnd],
                                              [Function: bound onceWrapper] {
                                                listener: [Function: onend]
                                              }
                                            ],
                                            newListener: [
                                              [Function: keylogNewListener],
                                              [Function: newListener]
                                            ],
                                            secure: [Function: onConnectSecure],
                                            close: [
                                              [Function (anonymous)],
                                              [Function: bound onceWrapper] {
                                                listener: [Function: onclose]
                                              }
                                            ],
                                            timeout: [Function (anonymous)],
                                            error: [
                                              [Function: onerror],
                                              [Function (anonymous)]
                                            ],
                                            data: [Function: ondata],
                                            unpipe: [Function: onunpipe],
                                            finish: [Function: bound onceWrapper] {
                                              listener: [Function: onfinish]
                                            }
                                          },
                                          _eventsCount: 9,
                                          connecting: false,
                                          _hadError: false,
                                          _parent: null,
                                          _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                          _closeAfterHandlingError: false,
                                          _readableState: ReadableState {
                                            objectMode: false,
                                            highWaterMark: 16384,
                                            buffer: BufferList { head: null, tail: null, length: 0 },
                                            length: 0,
                                            pipes: [ [Circular *8] ],
                                            flowing: true,
                                            ended: false,
                                            endEmitted: false,
                                            reading: true,
                                            constructed: true,
                                            sync: false,
                                            needReadable: true,
                                            emittedReadable: false,
                                            readableListening: false,
                                            resumeScheduled: false,
                                            errorEmitted: false,
                                            emitClose: false,
                                            autoDestroy: true,
                                            destroyed: false,
                                            errored: null,
                                            closed: false,
                                            closeEmitted: false,
                                            defaultEncoding: 'utf8',
                                            awaitDrainWriters: null,
                                            multiAwaitDrain: false,
                                            readingMore: false,
                                            dataEmitted: true,
                                            decoder: null,
                                            encoding: null,
                                            [Symbol(kPaused)]: false
                                          },
                                          _maxListeners: undefined,
                                          _writableState: WritableState {
                                            objectMode: false,
                                            highWaterMark: 16384,
                                            finalCalled: false,
                                            needDrain: false,
                                            ending: false,
                                            ended: false,
                                            finished: false,
                                            destroyed: false,
                                            decodeStrings: false,
                                            defaultEncoding: 'utf8',
                                            length: 0,
                                            writing: false,
                                            corked: 0,
                                            sync: false,
                                            bufferProcessing: false,
                                            onwrite: [Function: bound onwrite],
                                            writecb: null,
                                            writelen: 0,
                                            afterWriteTickInfo: null,
                                            buffered: [],
                                            bufferedIndex: 0,
                                            allBuffers: true,
                                            allNoop: true,
                                            pendingcb: 0,
                                            constructed: true,
                                            prefinished: false,
                                            errorEmitted: false,
                                            emitClose: false,
                                            autoDestroy: true,
                                            errored: null,
                                            closed: false,
                                            closeEmitted: false,
                                            [Symbol(kOnFinished)]: []
                                          },
                                          allowHalfOpen: false,
                                          _sockname: null,
                                          _pendingData: null,
                                          _pendingEncoding: '',
                                          server: undefined,
                                          _server: null,
                                          ssl: TLSWrap {
                                            _parent: TCP {
                                              reading: [Getter/Setter],
                                              onconnection: null,
                                              [Symbol(owner_symbol)]: [Circular *9]
                                            },
                                            _parentWrap: undefined,
                                            _secureContext: SecureContext {
                                              context: SecureContext {}
                                            },
                                            reading: true,
                                            onkeylog: [Function: onkeylog],
                                            onhandshakestart: {},
                                            onhandshakedone: [Function (anonymous)],
                                            onocspresponse: [Function: onocspresponse],
                                            onnewsession: [Function: onnewsessionclient],
                                            onerror: [Function: onerror],
                                            [Symbol(owner_symbol)]: [Circular *9]
                                          },
                                          _requestCert: true,
                                          _rejectUnauthorized: true,
                                          timeout: 0,
                                          _peername: {
                                            address: '18.230.140.150',
                                            family: 'IPv4',
                                            port: 27017
                                          },
                                          [Symbol(res)]: TLSWrap {
                                            _parent: TCP {
                                              reading: [Getter/Setter],
                                              onconnection: null,
                                              [Symbol(owner_symbol)]: [Circular *9]
                                            },
                                            _parentWrap: undefined,
                                            _secureContext: SecureContext {
                                              context: SecureContext {}
                                            },
                                            reading: true,
                                            onkeylog: [Function: onkeylog],
                                            onhandshakestart: {},
                                            onhandshakedone: [Function (anonymous)],
                                            onocspresponse: [Function: onocspresponse],
                                            onnewsession: [Function: onnewsessionclient],
                                            onerror: [Function: onerror],
                                            [Symbol(owner_symbol)]: [Circular *9]
                                          },
                                          [Symbol(verified)]: true,
                                          [Symbol(pendingSession)]: null,
                                          [Symbol(async_id_symbol)]: 162,
                                          [Symbol(kHandle)]: TLSWrap {
                                            _parent: TCP {
                                              reading: [Getter/Setter],
                                              onconnection: null,
                                              [Symbol(owner_symbol)]: [Circular *9]
                                            },
                                            _parentWrap: undefined,
                                            _secureContext: SecureContext {
                                              context: SecureContext {}
                                            },
                                            reading: true,
                                            onkeylog: [Function: onkeylog],
                                            onhandshakestart: {},
                                            onhandshakedone: [Function (anonymous)],
                                            onocspresponse: [Function: onocspresponse],
                                            onnewsession: [Function: onnewsessionclient],
                                            onerror: [Function: onerror],
                                            [Symbol(owner_symbol)]: [Circular *9]
                                          },
                                          [Symbol(lastWriteQueueSize)]: 0,
                                          [Symbol(timeout)]: Timeout {
                                            _idleTimeout: -1,
                                            _idlePrev: null,
                                            _idleNext: null,
                                            _idleStart: 16675,
                                            _onTimeout: null,
                                            _timerArgs: undefined,
                                            _repeat: null,
                                            _destroyed: true,
                                            [Symbol(refed)]: false,
                                            [Symbol(kHasPrimitive)]: false,
                                            [Symbol(asyncId)]: 176,
                                            [Symbol(triggerId)]: 175
                                          },
                                          [Symbol(kBuffer)]: null,
                                          [Symbol(kBufferCb)]: null,
                                          [Symbol(kBufferGen)]: null,
                                          [Symbol(kCapture)]: false,
                                          [Symbol(kSetNoDelay)]: true,
                                          [Symbol(kSetKeepAlive)]: true,
                                          [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                          [Symbol(kBytesRead)]: 0,
                                          [Symbol(kBytesWritten)]: 0,
                                          [Symbol(connect-options)]: {
                                            rejectUnauthorized: true,
                                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                            checkServerIdentity: [Function: checkServerIdentity],
                                            minDHSize: 1024,
                                            host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                            port: 27017,
                                            servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                            singleUse: true
                                          },
                                          [Symbol(disable-renegotiation)]: true
                                        }
                                      ],
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: true,
                                      constructed: true,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      errorEmitted: false,
                                      emitClose: true,
                                      autoDestroy: true,
                                      destroyed: false,
                                      errored: null,
                                      closed: false,
                                      closeEmitted: false,
                                      defaultEncoding: 'utf8',
                                      awaitDrainWriters: null,
                                      multiAwaitDrain: false,
                                      readingMore: false,
                                      dataEmitted: true,
                                      decoder: null,
                                      encoding: null,
                                      [Symbol(kPaused)]: false
                                    },
                                    _events: [Object: null prototype] {
                                      message: [Function (anonymous)],
                                      error: [
                                        [Function: onerror],
                                        [Function (anonymous)]
                                      ],
                                      unpipe: [Function: onunpipe],
                                      close: [Function: bound onceWrapper] {
                                        listener: [Function: onclose]
                                      },
                                      finish: [Function: bound onceWrapper] {
                                        listener: [Function: onfinish]
                                      },
                                      end: [Function: bound onceWrapper] {
                                        listener: [Function: onend]
                                      },
                                      data: [Function: ondata]
                                    },
                                    _eventsCount: 7,
                                    _maxListeners: undefined,
                                    _writableState: WritableState {
                                      objectMode: false,
                                      highWaterMark: 16384,
                                      finalCalled: false,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      destroyed: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function: bound onwrite],
                                      writecb: null,
                                      writelen: 0,
                                      afterWriteTickInfo: null,
                                      buffered: [],
                                      bufferedIndex: 0,
                                      allBuffers: true,
                                      allNoop: true,
                                      pendingcb: 0,
                                      constructed: true,
                                      prefinished: false,
                                      errorEmitted: false,
                                      emitClose: true,
                                      autoDestroy: true,
                                      errored: null,
                                      closed: false,
                                      closeEmitted: false,
                                      [Symbol(kOnFinished)]: []
                                    },
                                    allowHalfOpen: true,
                                    isMonitoringConnection: false,
                                    maxBsonMessageSize: 67108864,
                                    [Symbol(kCapture)]: false,
                                    [Symbol(buffer)]: BufferPool {
                                      buffers: List {
                                        count: 0,
                                        head: <ref *10> {
                                          next: [Circular *10],
                                          prev: [Circular *10],
                                          value: null
                                        }
                                      },
                                      totalByteLength: 0
                                    }
                                  },
                                  [Symbol(stream)]: <ref *9> TLSSocket {
                                    _tlsOptions: {
                                      allowHalfOpen: undefined,
                                      pipe: false,
                                      secureContext: SecureContext {
                                        context: SecureContext {}
                                      },
                                      isServer: false,
                                      requestCert: true,
                                      rejectUnauthorized: true,
                                      session: undefined,
                                      ALPNProtocols: undefined,
                                      requestOCSP: undefined,
                                      enableTrace: undefined,
                                      pskCallback: undefined,
                                      highWaterMark: undefined,
                                      onread: undefined,
                                      signal: undefined
                                    },
                                    _secureEstablished: true,
                                    _securePending: false,
                                    _newSessionPending: false,
                                    _controlReleased: true,
                                    secureConnecting: false,
                                    _SNICallback: null,
                                    servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                    alpnProtocol: false,
                                    authorized: true,
                                    authorizationError: null,
                                    encrypted: true,
                                    _events: [Object: null prototype] {
                                      end: [
                                        [Function: onReadableStreamEnd],
                                        [Function: bound onceWrapper] {
                                          listener: [Function: onend]
                                        }
                                      ],
                                      newListener: [
                                        [Function: keylogNewListener],
                                        [Function: newListener]
                                      ],
                                      secure: [Function: onConnectSecure],
                                      close: [
                                        [Function (anonymous)],
                                        [Function: bound onceWrapper] {
                                          listener: [Function: onclose]
                                        }
                                      ],
                                      timeout: [Function (anonymous)],
                                      error: [
                                        [Function: onerror],
                                        [Function (anonymous)]
                                      ],
                                      data: [Function: ondata],
                                      unpipe: [Function: onunpipe],
                                      finish: [Function: bound onceWrapper] {
                                        listener: [Function: onfinish]
                                      }
                                    },
                                    _eventsCount: 9,
                                    connecting: false,
                                    _hadError: false,
                                    _parent: null,
                                    _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                    _closeAfterHandlingError: false,
                                    _readableState: ReadableState {
                                      objectMode: false,
                                      highWaterMark: 16384,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: [
                                        <ref *8> MessageStream {
                                          _readableState: ReadableState {
                                            objectMode: false,
                                            highWaterMark: 16384,
                                            buffer: BufferList { head: null, tail: null, length: 0 },
                                            length: 0,
                                            pipes: [ [Circular *9] ],
                                            flowing: true,
                                            ended: false,
                                            endEmitted: false,
                                            reading: true,
                                            constructed: true,
                                            sync: false,
                                            needReadable: true,
                                            emittedReadable: false,
                                            readableListening: false,
                                            resumeScheduled: false,
                                            errorEmitted: false,
                                            emitClose: true,
                                            autoDestroy: true,
                                            destroyed: false,
                                            errored: null,
                                            closed: false,
                                            closeEmitted: false,
                                            defaultEncoding: 'utf8',
                                            awaitDrainWriters: null,
                                            multiAwaitDrain: false,
                                            readingMore: false,
                                            dataEmitted: true,
                                            decoder: null,
                                            encoding: null,
                                            [Symbol(kPaused)]: false
                                          },
                                          _events: [Object: null prototype] {
                                            message: [Function (anonymous)],
                                            error: [
                                              [Function: onerror],
                                              [Function (anonymous)]
                                            ],
                                            unpipe: [Function: onunpipe],
                                            close: [Function: bound onceWrapper] {
                                              listener: [Function: onclose]
                                            },
                                            finish: [Function: bound onceWrapper] {
                                              listener: [Function: onfinish]
                                            },
                                            end: [Function: bound onceWrapper] {
                                              listener: [Function: onend]
                                            },
                                            data: [Function: ondata]
                                          },
                                          _eventsCount: 7,
                                          _maxListeners: undefined,
                                          _writableState: WritableState {
                                            objectMode: false,
                                            highWaterMark: 16384,
                                            finalCalled: false,
                                            needDrain: false,
                                            ending: false,
                                            ended: false,
                                            finished: false,
                                            destroyed: false,
                                            decodeStrings: true,
                                            defaultEncoding: 'utf8',
                                            length: 0,
                                            writing: false,
                                            corked: 0,
                                            sync: false,
                                            bufferProcessing: false,
                                            onwrite: [Function: bound onwrite],
                                            writecb: null,
                                            writelen: 0,
                                            afterWriteTickInfo: null,
                                            buffered: [],
                                            bufferedIndex: 0,
                                            allBuffers: true,
                                            allNoop: true,
                                            pendingcb: 0,
                                            constructed: true,
                                            prefinished: false,
                                            errorEmitted: false,
                                            emitClose: true,
                                            autoDestroy: true,
                                            errored: null,
                                            closed: false,
                                            closeEmitted: false,
                                            [Symbol(kOnFinished)]: []
                                          },
                                          allowHalfOpen: true,
                                          isMonitoringConnection: false,
                                          maxBsonMessageSize: 67108864,
                                          [Symbol(kCapture)]: false,
                                          [Symbol(buffer)]: BufferPool {
                                            buffers: List {
                                              count: 0,
                                              head: <ref *10> {
                                                next: [Circular *10],
                                                prev: [Circular *10],
                                                value: null
                                              }
                                            },
                                            totalByteLength: 0
                                          }
                                        }
                                      ],
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: true,
                                      constructed: true,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      errorEmitted: false,
                                      emitClose: false,
                                      autoDestroy: true,
                                      destroyed: false,
                                      errored: null,
                                      closed: false,
                                      closeEmitted: false,
                                      defaultEncoding: 'utf8',
                                      awaitDrainWriters: null,
                                      multiAwaitDrain: false,
                                      readingMore: false,
                                      dataEmitted: true,
                                      decoder: null,
                                      encoding: null,
                                      [Symbol(kPaused)]: false
                                    },
                                    _maxListeners: undefined,
                                    _writableState: WritableState {
                                      objectMode: false,
                                      highWaterMark: 16384,
                                      finalCalled: false,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      destroyed: false,
                                      decodeStrings: false,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function: bound onwrite],
                                      writecb: null,
                                      writelen: 0,
                                      afterWriteTickInfo: null,
                                      buffered: [],
                                      bufferedIndex: 0,
                                      allBuffers: true,
                                      allNoop: true,
                                      pendingcb: 0,
                                      constructed: true,
                                      prefinished: false,
                                      errorEmitted: false,
                                      emitClose: false,
                                      autoDestroy: true,
                                      errored: null,
                                      closed: false,
                                      closeEmitted: false,
                                      [Symbol(kOnFinished)]: []
                                    },
                                    allowHalfOpen: false,
                                    _sockname: null,
                                    _pendingData: null,
                                    _pendingEncoding: '',
                                    server: undefined,
                                    _server: null,
                                    ssl: TLSWrap {
                                      _parent: TCP {
                                        reading: [Getter/Setter],
                                        onconnection: null,
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      _parentWrap: undefined,
                                      _secureContext: SecureContext {
                                        context: SecureContext {}
                                      },
                                      reading: true,
                                      onkeylog: [Function: onkeylog],
                                      onhandshakestart: {},
                                      onhandshakedone: [Function (anonymous)],
                                      onocspresponse: [Function: onocspresponse],
                                      onnewsession: [Function: onnewsessionclient],
                                      onerror: [Function: onerror],
                                      [Symbol(owner_symbol)]: [Circular *9]
                                    },
                                    _requestCert: true,
                                    _rejectUnauthorized: true,
                                    timeout: 0,
                                    _peername: {
                                      address: '18.230.140.150',
                                      family: 'IPv4',
                                      port: 27017
                                    },
                                    [Symbol(res)]: TLSWrap {
                                      _parent: TCP {
                                        reading: [Getter/Setter],
                                        onconnection: null,
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      _parentWrap: undefined,
                                      _secureContext: SecureContext {
                                        context: SecureContext {}
                                      },
                                      reading: true,
                                      onkeylog: [Function: onkeylog],
                                      onhandshakestart: {},
                                      onhandshakedone: [Function (anonymous)],
                                      onocspresponse: [Function: onocspresponse],
                                      onnewsession: [Function: onnewsessionclient],
                                      onerror: [Function: onerror],
                                      [Symbol(owner_symbol)]: [Circular *9]
                                    },
                                    [Symbol(verified)]: true,
                                    [Symbol(pendingSession)]: null,
                                    [Symbol(async_id_symbol)]: 162,
                                    [Symbol(kHandle)]: TLSWrap {
                                      _parent: TCP {
                                        reading: [Getter/Setter],
                                        onconnection: null,
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      _parentWrap: undefined,
                                      _secureContext: SecureContext {
                                        context: SecureContext {}
                                      },
                                      reading: true,
                                      onkeylog: [Function: onkeylog],
                                      onhandshakestart: {},
                                      onhandshakedone: [Function (anonymous)],
                                      onocspresponse: [Function: onocspresponse],
                                      onnewsession: [Function: onnewsessionclient],
                                      onerror: [Function: onerror],
                                      [Symbol(owner_symbol)]: [Circular *9]
                                    },
                                    [Symbol(lastWriteQueueSize)]: 0,
                                    [Symbol(timeout)]: Timeout {
                                      _idleTimeout: -1,
                                      _idlePrev: null,
                                      _idleNext: null,
                                      _idleStart: 16675,
                                      _onTimeout: null,
                                      _timerArgs: undefined,
                                      _repeat: null,
                                      _destroyed: true,
                                      [Symbol(refed)]: false,
                                      [Symbol(kHasPrimitive)]: false,
                                      [Symbol(asyncId)]: 176,
                                      [Symbol(triggerId)]: 175
                                    },
                                    [Symbol(kBuffer)]: null,
                                    [Symbol(kBufferCb)]: null,
                                    [Symbol(kBufferGen)]: null,
                                    [Symbol(kCapture)]: false,
                                    [Symbol(kSetNoDelay)]: true,
                                    [Symbol(kSetKeepAlive)]: true,
                                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                    [Symbol(kBytesRead)]: 0,
                                    [Symbol(kBytesWritten)]: 0,
                                    [Symbol(connect-options)]: {
                                      rejectUnauthorized: true,
                                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                      checkServerIdentity: [Function: checkServerIdentity],
                                      minDHSize: 1024,
                                      host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                      port: 27017,
                                      servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                      singleUse: true
                                    },
                                    [Symbol(disable-renegotiation)]: true
                                  },
                                  [Symbol(delayedTimeoutId)]: null
                                }
                              },
                              prev: {
                                next: [Circular *7],
                                prev: [Circular *7],
                                value: Connection {
                                  _events: [Object: null prototype] {
                                    commandStarted: [Function (anonymous)],
                                    commandSucceeded: [Function (anonymous)],
                                    commandFailed: [Function (anonymous)],
                                    clusterTimeReceived: [Function (anonymous)]
                                  },
                                  _eventsCount: 4,
                                  _maxListeners: undefined,
                                  id: 1,
                                  address: '18.230.140.150:27017',
                                  socketTimeoutMS: 0,
                                  monitorCommands: false,
                                  serverApi: undefined,
                                  closed: false,
                                  helloOk: true,
                                  lastHelloMS: 54,
                                  [Symbol(kCapture)]: false,
                                  [Symbol(hello)]: {
                                    helloOk: true,
                                    topologyVersion: {
                                      processId: new ObjectId("6402382a0e21490e021d214d"),
                                      counter: 6
                                    },
                                    hosts: [
                                      'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                                      'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                                      'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                                    ],
                                    setName: 'atlas-6h3glt-shard-0',
                                    setVersion: 1,
                                    ismaster: true,
                                    secondary: false,
                                    primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                                    tags: {
                                      region: 'SA_EAST_1',
                                      nodeType: 'ELECTABLE',
                                      provider: 'AWS',
                                      workloadType: 'OPERATIONAL'
                                    },
                                    me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                                    electionId: new ObjectId("7fffffff000000000000001c"),
                                    lastWrite: {
                                      opTime: {
                                        ts: new Timestamp({ t: 1678058606, i: 1 }),
                                        t: 28
                                      },
                                      lastWriteDate: 2023-03-05T23:23:26.000Z,
                                      majorityOpTime: {
                                        ts: new Timestamp({ t: 1678058606, i: 1 }),
                                        t: 28
                                      },
                                      majorityWriteDate: 2023-03-05T23:23:26.000Z
                                    },
                                    maxBsonObjectSize: 16777216,
                                    maxMessageSizeBytes: 48000000,
                                    maxWriteBatchSize: 100000,
                                    localTime: 2023-03-05T23:23:26.221Z,
                                    logicalSessionTimeoutMinutes: 30,
                                    connectionId: 47148,
                                    minWireVersion: 0,
                                    maxWireVersion: 13,
                                    readOnly: false,
                                    ok: 1,
                                    '$clusterTime': {
                                      clusterTime: new Timestamp({ t: 1678058606, i: 1 }),
                                      signature: {
                                        hash: new Binary(Buffer.from("c31d451e3e3b615e1de5f3d7a35cc20989fc2968", "hex"), 0),
                                        keyId: new Long("7168531580753805315")
                                      }
                                    },
                                    operationTime: new Timestamp({ t: 1678058606, i: 1 }),
                                    saslSupportedMechs: [ 'SCRAM-SHA-1' ],
                                    isWritablePrimary: true
                                  },
                                  [Symbol(clusterTime)]: {
                                    clusterTime: new Timestamp({ t: 1678058606, i: 1 }),
                                    signature: {
                                      hash: new Binary(Buffer.from("c31d451e3e3b615e1de5f3d7a35cc20989fc2968", "hex"), 0),
                                      keyId: new Long("7168531580753805315")
                                    }
                                  },
                                  [Symbol(description)]: StreamDescription {
                                    address: '18.230.140.150:27017',
                                    type: 'RSPrimary',
                                    minWireVersion: 0,
                                    maxWireVersion: 13,
                                    maxBsonObjectSize: 16777216,
                                    maxMessageSizeBytes: 48000000,
                                    maxWriteBatchSize: 100000,
                                    logicalSessionTimeoutMinutes: 30,
                                    loadBalanced: false,
                                    compressors: [ 'none' ]
                                  },
                                  [Symbol(generation)]: 0,
                                  [Symbol(lastUseTime)]: 531968,
                                  [Symbol(queue)]: Map(0) {},
                                  [Symbol(messageStream)]: <ref *8> MessageStream {
                                    _readableState: ReadableState {
                                      objectMode: false,
                                      highWaterMark: 16384,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: [
                                        <ref *9> TLSSocket {
                                          _tlsOptions: {
                                            allowHalfOpen: undefined,
                                            pipe: false,
                                            secureContext: SecureContext {
                                              context: SecureContext {}
                                            },
                                            isServer: false,
                                            requestCert: true,
                                            rejectUnauthorized: true,
                                            session: undefined,
                                            ALPNProtocols: undefined,
                                            requestOCSP: undefined,
                                            enableTrace: undefined,
                                            pskCallback: undefined,
                                            highWaterMark: undefined,
                                            onread: undefined,
                                            signal: undefined
                                          },
                                          _secureEstablished: true,
                                          _securePending: false,
                                          _newSessionPending: false,
                                          _controlReleased: true,
                                          secureConnecting: false,
                                          _SNICallback: null,
                                          servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                          alpnProtocol: false,
                                          authorized: true,
                                          authorizationError: null,
                                          encrypted: true,
                                          _events: [Object: null prototype] {
                                            end: [
                                              [Function: onReadableStreamEnd],
                                              [Function: bound onceWrapper] {
                                                listener: [Function: onend]
                                              }
                                            ],
                                            newListener: [
                                              [Function: keylogNewListener],
                                              [Function: newListener]
                                            ],
                                            secure: [Function: onConnectSecure],
                                            close: [
                                              [Function (anonymous)],
                                              [Function: bound onceWrapper] {
                                                listener: [Function: onclose]
                                              }
                                            ],
                                            timeout: [Function (anonymous)],
                                            error: [
                                              [Function: onerror],
                                              [Function (anonymous)]
                                            ],
                                            data: [Function: ondata],
                                            unpipe: [Function: onunpipe],
                                            finish: [Function: bound onceWrapper] {
                                              listener: [Function: onfinish]
                                            }
                                          },
                                          _eventsCount: 9,
                                          connecting: false,
                                          _hadError: false,
                                          _parent: null,
                                          _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                          _closeAfterHandlingError: false,
                                          _readableState: ReadableState {
                                            objectMode: false,
                                            highWaterMark: 16384,
                                            buffer: BufferList { head: null, tail: null, length: 0 },
                                            length: 0,
                                            pipes: [ [Circular *8] ],
                                            flowing: true,
                                            ended: false,
                                            endEmitted: false,
                                            reading: true,
                                            constructed: true,
                                            sync: false,
                                            needReadable: true,
                                            emittedReadable: false,
                                            readableListening: false,
                                            resumeScheduled: false,
                                            errorEmitted: false,
                                            emitClose: false,
                                            autoDestroy: true,
                                            destroyed: false,
                                            errored: null,
                                            closed: false,
                                            closeEmitted: false,
                                            defaultEncoding: 'utf8',
                                            awaitDrainWriters: null,
                                            multiAwaitDrain: false,
                                            readingMore: false,
                                            dataEmitted: true,
                                            decoder: null,
                                            encoding: null,
                                            [Symbol(kPaused)]: false
                                          },
                                          _maxListeners: undefined,
                                          _writableState: WritableState {
                                            objectMode: false,
                                            highWaterMark: 16384,
                                            finalCalled: false,
                                            needDrain: false,
                                            ending: false,
                                            ended: false,
                                            finished: false,
                                            destroyed: false,
                                            decodeStrings: false,
                                            defaultEncoding: 'utf8',
                                            length: 0,
                                            writing: false,
                                            corked: 0,
                                            sync: false,
                                            bufferProcessing: false,
                                            onwrite: [Function: bound onwrite],
                                            writecb: null,
                                            writelen: 0,
                                            afterWriteTickInfo: null,
                                            buffered: [],
                                            bufferedIndex: 0,
                                            allBuffers: true,
                                            allNoop: true,
                                            pendingcb: 0,
                                            constructed: true,
                                            prefinished: false,
                                            errorEmitted: false,
                                            emitClose: false,
                                            autoDestroy: true,
                                            errored: null,
                                            closed: false,
                                            closeEmitted: false,
                                            [Symbol(kOnFinished)]: []
                                          },
                                          allowHalfOpen: false,
                                          _sockname: null,
                                          _pendingData: null,
                                          _pendingEncoding: '',
                                          server: undefined,
                                          _server: null,
                                          ssl: TLSWrap {
                                            _parent: TCP {
                                              reading: [Getter/Setter],
                                              onconnection: null,
                                              [Symbol(owner_symbol)]: [Circular *9]
                                            },
                                            _parentWrap: undefined,
                                            _secureContext: SecureContext {
                                              context: SecureContext {}
                                            },
                                            reading: true,
                                            onkeylog: [Function: onkeylog],
                                            onhandshakestart: {},
                                            onhandshakedone: [Function (anonymous)],
                                            onocspresponse: [Function: onocspresponse],
                                            onnewsession: [Function: onnewsessionclient],
                                            onerror: [Function: onerror],
                                            [Symbol(owner_symbol)]: [Circular *9]
                                          },
                                          _requestCert: true,
                                          _rejectUnauthorized: true,
                                          timeout: 0,
                                          _peername: {
                                            address: '18.230.140.150',
                                            family: 'IPv4',
                                            port: 27017
                                          },
                                          [Symbol(res)]: TLSWrap {
                                            _parent: TCP {
                                              reading: [Getter/Setter],
                                              onconnection: null,
                                              [Symbol(owner_symbol)]: [Circular *9]
                                            },
                                            _parentWrap: undefined,
                                            _secureContext: SecureContext {
                                              context: SecureContext {}
                                            },
                                            reading: true,
                                            onkeylog: [Function: onkeylog],
                                            onhandshakestart: {},
                                            onhandshakedone: [Function (anonymous)],
                                            onocspresponse: [Function: onocspresponse],
                                            onnewsession: [Function: onnewsessionclient],
                                            onerror: [Function: onerror],
                                            [Symbol(owner_symbol)]: [Circular *9]
                                          },
                                          [Symbol(verified)]: true,
                                          [Symbol(pendingSession)]: null,
                                          [Symbol(async_id_symbol)]: 162,
                                          [Symbol(kHandle)]: TLSWrap {
                                            _parent: TCP {
                                              reading: [Getter/Setter],
                                              onconnection: null,
                                              [Symbol(owner_symbol)]: [Circular *9]
                                            },
                                            _parentWrap: undefined,
                                            _secureContext: SecureContext {
                                              context: SecureContext {}
                                            },
                                            reading: true,
                                            onkeylog: [Function: onkeylog],
                                            onhandshakestart: {},
                                            onhandshakedone: [Function (anonymous)],
                                            onocspresponse: [Function: onocspresponse],
                                            onnewsession: [Function: onnewsessionclient],
                                            onerror: [Function: onerror],
                                            [Symbol(owner_symbol)]: [Circular *9]
                                          },
                                          [Symbol(lastWriteQueueSize)]: 0,
                                          [Symbol(timeout)]: Timeout {
                                            _idleTimeout: -1,
                                            _idlePrev: null,
                                            _idleNext: null,
                                            _idleStart: 16675,
                                            _onTimeout: null,
                                            _timerArgs: undefined,
                                            _repeat: null,
                                            _destroyed: true,
                                            [Symbol(refed)]: false,
                                            [Symbol(kHasPrimitive)]: false,
                                            [Symbol(asyncId)]: 176,
                                            [Symbol(triggerId)]: 175
                                          },
                                          [Symbol(kBuffer)]: null,
                                          [Symbol(kBufferCb)]: null,
                                          [Symbol(kBufferGen)]: null,
                                          [Symbol(kCapture)]: false,
                                          [Symbol(kSetNoDelay)]: true,
                                          [Symbol(kSetKeepAlive)]: true,
                                          [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                          [Symbol(kBytesRead)]: 0,
                                          [Symbol(kBytesWritten)]: 0,
                                          [Symbol(connect-options)]: {
                                            rejectUnauthorized: true,
                                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                            checkServerIdentity: [Function: checkServerIdentity],
                                            minDHSize: 1024,
                                            host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                            port: 27017,
                                            servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                            singleUse: true
                                          },
                                          [Symbol(disable-renegotiation)]: true
                                        }
                                      ],
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: true,
                                      constructed: true,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      errorEmitted: false,
                                      emitClose: true,
                                      autoDestroy: true,
                                      destroyed: false,
                                      errored: null,
                                      closed: false,
                                      closeEmitted: false,
                                      defaultEncoding: 'utf8',
                                      awaitDrainWriters: null,
                                      multiAwaitDrain: false,
                                      readingMore: false,
                                      dataEmitted: true,
                                      decoder: null,
                                      encoding: null,
                                      [Symbol(kPaused)]: false
                                    },
                                    _events: [Object: null prototype] {
                                      message: [Function (anonymous)],
                                      error: [
                                        [Function: onerror],
                                        [Function (anonymous)]
                                      ],
                                      unpipe: [Function: onunpipe],
                                      close: [Function: bound onceWrapper] {
                                        listener: [Function: onclose]
                                      },
                                      finish: [Function: bound onceWrapper] {
                                        listener: [Function: onfinish]
                                      },
                                      end: [Function: bound onceWrapper] {
                                        listener: [Function: onend]
                                      },
                                      data: [Function: ondata]
                                    },
                                    _eventsCount: 7,
                                    _maxListeners: undefined,
                                    _writableState: WritableState {
                                      objectMode: false,
                                      highWaterMark: 16384,
                                      finalCalled: false,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      destroyed: false,
                                      decodeStrings: true,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function: bound onwrite],
                                      writecb: null,
                                      writelen: 0,
                                      afterWriteTickInfo: null,
                                      buffered: [],
                                      bufferedIndex: 0,
                                      allBuffers: true,
                                      allNoop: true,
                                      pendingcb: 0,
                                      constructed: true,
                                      prefinished: false,
                                      errorEmitted: false,
                                      emitClose: true,
                                      autoDestroy: true,
                                      errored: null,
                                      closed: false,
                                      closeEmitted: false,
                                      [Symbol(kOnFinished)]: []
                                    },
                                    allowHalfOpen: true,
                                    isMonitoringConnection: false,
                                    maxBsonMessageSize: 67108864,
                                    [Symbol(kCapture)]: false,
                                    [Symbol(buffer)]: BufferPool {
                                      buffers: List {
                                        count: 0,
                                        head: <ref *10> {
                                          next: [Circular *10],
                                          prev: [Circular *10],
                                          value: null
                                        }
                                      },
                                      totalByteLength: 0
                                    }
                                  },
                                  [Symbol(stream)]: <ref *9> TLSSocket {
                                    _tlsOptions: {
                                      allowHalfOpen: undefined,
                                      pipe: false,
                                      secureContext: SecureContext {
                                        context: SecureContext {}
                                      },
                                      isServer: false,
                                      requestCert: true,
                                      rejectUnauthorized: true,
                                      session: undefined,
                                      ALPNProtocols: undefined,
                                      requestOCSP: undefined,
                                      enableTrace: undefined,
                                      pskCallback: undefined,
                                      highWaterMark: undefined,
                                      onread: undefined,
                                      signal: undefined
                                    },
                                    _secureEstablished: true,
                                    _securePending: false,
                                    _newSessionPending: false,
                                    _controlReleased: true,
                                    secureConnecting: false,
                                    _SNICallback: null,
                                    servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                    alpnProtocol: false,
                                    authorized: true,
                                    authorizationError: null,
                                    encrypted: true,
                                    _events: [Object: null prototype] {
                                      end: [
                                        [Function: onReadableStreamEnd],
                                        [Function: bound onceWrapper] {
                                          listener: [Function: onend]
                                        }
                                      ],
                                      newListener: [
                                        [Function: keylogNewListener],
                                        [Function: newListener]
                                      ],
                                      secure: [Function: onConnectSecure],
                                      close: [
                                        [Function (anonymous)],
                                        [Function: bound onceWrapper] {
                                          listener: [Function: onclose]
                                        }
                                      ],
                                      timeout: [Function (anonymous)],
                                      error: [
                                        [Function: onerror],
                                        [Function (anonymous)]
                                      ],
                                      data: [Function: ondata],
                                      unpipe: [Function: onunpipe],
                                      finish: [Function: bound onceWrapper] {
                                        listener: [Function: onfinish]
                                      }
                                    },
                                    _eventsCount: 9,
                                    connecting: false,
                                    _hadError: false,
                                    _parent: null,
                                    _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                    _closeAfterHandlingError: false,
                                    _readableState: ReadableState {
                                      objectMode: false,
                                      highWaterMark: 16384,
                                      buffer: BufferList { head: null, tail: null, length: 0 },
                                      length: 0,
                                      pipes: [
                                        <ref *8> MessageStream {
                                          _readableState: ReadableState {
                                            objectMode: false,
                                            highWaterMark: 16384,
                                            buffer: BufferList { head: null, tail: null, length: 0 },
                                            length: 0,
                                            pipes: [ [Circular *9] ],
                                            flowing: true,
                                            ended: false,
                                            endEmitted: false,
                                            reading: true,
                                            constructed: true,
                                            sync: false,
                                            needReadable: true,
                                            emittedReadable: false,
                                            readableListening: false,
                                            resumeScheduled: false,
                                            errorEmitted: false,
                                            emitClose: true,
                                            autoDestroy: true,
                                            destroyed: false,
                                            errored: null,
                                            closed: false,
                                            closeEmitted: false,
                                            defaultEncoding: 'utf8',
                                            awaitDrainWriters: null,
                                            multiAwaitDrain: false,
                                            readingMore: false,
                                            dataEmitted: true,
                                            decoder: null,
                                            encoding: null,
                                            [Symbol(kPaused)]: false
                                          },
                                          _events: [Object: null prototype] {
                                            message: [Function (anonymous)],
                                            error: [
                                              [Function: onerror],
                                              [Function (anonymous)]
                                            ],
                                            unpipe: [Function: onunpipe],
                                            close: [Function: bound onceWrapper] {
                                              listener: [Function: onclose]
                                            },
                                            finish: [Function: bound onceWrapper] {
                                              listener: [Function: onfinish]
                                            },
                                            end: [Function: bound onceWrapper] {
                                              listener: [Function: onend]
                                            },
                                            data: [Function: ondata]
                                          },
                                          _eventsCount: 7,
                                          _maxListeners: undefined,
                                          _writableState: WritableState {
                                            objectMode: false,
                                            highWaterMark: 16384,
                                            finalCalled: false,
                                            needDrain: false,
                                            ending: false,
                                            ended: false,
                                            finished: false,
                                            destroyed: false,
                                            decodeStrings: true,
                                            defaultEncoding: 'utf8',
                                            length: 0,
                                            writing: false,
                                            corked: 0,
                                            sync: false,
                                            bufferProcessing: false,
                                            onwrite: [Function: bound onwrite],
                                            writecb: null,
                                            writelen: 0,
                                            afterWriteTickInfo: null,
                                            buffered: [],
                                            bufferedIndex: 0,
                                            allBuffers: true,
                                            allNoop: true,
                                            pendingcb: 0,
                                            constructed: true,
                                            prefinished: false,
                                            errorEmitted: false,
                                            emitClose: true,
                                            autoDestroy: true,
                                            errored: null,
                                            closed: false,
                                            closeEmitted: false,
                                            [Symbol(kOnFinished)]: []
                                          },
                                          allowHalfOpen: true,
                                          isMonitoringConnection: false,
                                          maxBsonMessageSize: 67108864,
                                          [Symbol(kCapture)]: false,
                                          [Symbol(buffer)]: BufferPool {
                                            buffers: List {
                                              count: 0,
                                              head: <ref *10> {
                                                next: [Circular *10],
                                                prev: [Circular *10],
                                                value: null
                                              }
                                            },
                                            totalByteLength: 0
                                          }
                                        }
                                      ],
                                      flowing: true,
                                      ended: false,
                                      endEmitted: false,
                                      reading: true,
                                      constructed: true,
                                      sync: false,
                                      needReadable: true,
                                      emittedReadable: false,
                                      readableListening: false,
                                      resumeScheduled: false,
                                      errorEmitted: false,
                                      emitClose: false,
                                      autoDestroy: true,
                                      destroyed: false,
                                      errored: null,
                                      closed: false,
                                      closeEmitted: false,
                                      defaultEncoding: 'utf8',
                                      awaitDrainWriters: null,
                                      multiAwaitDrain: false,
                                      readingMore: false,
                                      dataEmitted: true,
                                      decoder: null,
                                      encoding: null,
                                      [Symbol(kPaused)]: false
                                    },
                                    _maxListeners: undefined,
                                    _writableState: WritableState {
                                      objectMode: false,
                                      highWaterMark: 16384,
                                      finalCalled: false,
                                      needDrain: false,
                                      ending: false,
                                      ended: false,
                                      finished: false,
                                      destroyed: false,
                                      decodeStrings: false,
                                      defaultEncoding: 'utf8',
                                      length: 0,
                                      writing: false,
                                      corked: 0,
                                      sync: false,
                                      bufferProcessing: false,
                                      onwrite: [Function: bound onwrite],
                                      writecb: null,
                                      writelen: 0,
                                      afterWriteTickInfo: null,
                                      buffered: [],
                                      bufferedIndex: 0,
                                      allBuffers: true,
                                      allNoop: true,
                                      pendingcb: 0,
                                      constructed: true,
                                      prefinished: false,
                                      errorEmitted: false,
                                      emitClose: false,
                                      autoDestroy: true,
                                      errored: null,
                                      closed: false,
                                      closeEmitted: false,
                                      [Symbol(kOnFinished)]: []
                                    },
                                    allowHalfOpen: false,
                                    _sockname: null,
                                    _pendingData: null,
                                    _pendingEncoding: '',
                                    server: undefined,
                                    _server: null,
                                    ssl: TLSWrap {
                                      _parent: TCP {
                                        reading: [Getter/Setter],
                                        onconnection: null,
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      _parentWrap: undefined,
                                      _secureContext: SecureContext {
                                        context: SecureContext {}
                                      },
                                      reading: true,
                                      onkeylog: [Function: onkeylog],
                                      onhandshakestart: {},
                                      onhandshakedone: [Function (anonymous)],
                                      onocspresponse: [Function: onocspresponse],
                                      onnewsession: [Function: onnewsessionclient],
                                      onerror: [Function: onerror],
                                      [Symbol(owner_symbol)]: [Circular *9]
                                    },
                                    _requestCert: true,
                                    _rejectUnauthorized: true,
                                    timeout: 0,
                                    _peername: {
                                      address: '18.230.140.150',
                                      family: 'IPv4',
                                      port: 27017
                                    },
                                    [Symbol(res)]: TLSWrap {
                                      _parent: TCP {
                                        reading: [Getter/Setter],
                                        onconnection: null,
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      _parentWrap: undefined,
                                      _secureContext: SecureContext {
                                        context: SecureContext {}
                                      },
                                      reading: true,
                                      onkeylog: [Function: onkeylog],
                                      onhandshakestart: {},
                                      onhandshakedone: [Function (anonymous)],
                                      onocspresponse: [Function: onocspresponse],
                                      onnewsession: [Function: onnewsessionclient],
                                      onerror: [Function: onerror],
                                      [Symbol(owner_symbol)]: [Circular *9]
                                    },
                                    [Symbol(verified)]: true,
                                    [Symbol(pendingSession)]: null,
                                    [Symbol(async_id_symbol)]: 162,
                                    [Symbol(kHandle)]: TLSWrap {
                                      _parent: TCP {
                                        reading: [Getter/Setter],
                                        onconnection: null,
                                        [Symbol(owner_symbol)]: [Circular *9]
                                      },
                                      _parentWrap: undefined,
                                      _secureContext: SecureContext {
                                        context: SecureContext {}
                                      },
                                      reading: true,
                                      onkeylog: [Function: onkeylog],
                                      onhandshakestart: {},
                                      onhandshakedone: [Function (anonymous)],
                                      onocspresponse: [Function: onocspresponse],
                                      onnewsession: [Function: onnewsessionclient],
                                      onerror: [Function: onerror],
                                      [Symbol(owner_symbol)]: [Circular *9]
                                    },
                                    [Symbol(lastWriteQueueSize)]: 0,
                                    [Symbol(timeout)]: Timeout {
                                      _idleTimeout: -1,
                                      _idlePrev: null,
                                      _idleNext: null,
                                      _idleStart: 16675,
                                      _onTimeout: null,
                                      _timerArgs: undefined,
                                      _repeat: null,
                                      _destroyed: true,
                                      [Symbol(refed)]: false,
                                      [Symbol(kHasPrimitive)]: false,
                                      [Symbol(asyncId)]: 176,
                                      [Symbol(triggerId)]: 175
                                    },
                                    [Symbol(kBuffer)]: null,
                                    [Symbol(kBufferCb)]: null,
                                    [Symbol(kBufferGen)]: null,
                                    [Symbol(kCapture)]: false,
                                    [Symbol(kSetNoDelay)]: true,
                                    [Symbol(kSetKeepAlive)]: true,
                                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                    [Symbol(kBytesRead)]: 0,
                                    [Symbol(kBytesWritten)]: 0,
                                    [Symbol(connect-options)]: {
                                      rejectUnauthorized: true,
                                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                      checkServerIdentity: [Function: checkServerIdentity],
                                      minDHSize: 1024,
                                      host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                      port: 27017,
                                      servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                      singleUse: true
                                    },
                                    [Symbol(disable-renegotiation)]: true
                                  },
                                  [Symbol(delayedTimeoutId)]: null
                                }
                              },
                              value: null
                            }
                          },
                          [Symbol(pending)]: 0,
                          [Symbol(checkedOut)]: Set(0) {},
                          [Symbol(minPoolSizeTimer)]: undefined,
                          [Symbol(generation)]: 0,
                          [Symbol(serviceGenerations)]: Map(0) {},
                          [Symbol(connectionCounter)]: Object [Generator] {},
                          [Symbol(cancellationToken)]: CancellationToken {
                            _events: [Object: null prototype] {},
                            _eventsCount: 0,
                            _maxListeners: Infinity,
                            [Symbol(kCapture)]: false
                          },
                          [Symbol(waitQueue)]: List {
                            count: 0,
                            head: <ref *11> {
                              next: [Circular *11],
                              prev: [Circular *11],
                              value: null
                            }
                          },
                          [Symbol(metrics)]: ConnectionPoolMetrics {
                            txnConnections: 0,
                            cursorConnections: 0,
                            otherConnections: 0
                          },
                          [Symbol(processingWaitQueue)]: false
                        },
                        operationCount: 0
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(monitor)]: Monitor {
                        _events: [Object: null prototype] {
                          serverHeartbeatStarted: [Function (anonymous)],
                          serverHeartbeatSucceeded: [
                            [Function (anonymous)],
                            [Function (anonymous)]
                          ],
                          serverHeartbeatFailed: [Function (anonymous)],
                          resetServer: [Function (anonymous)]
                        },
                        _eventsCount: 4,
                        _maxListeners: undefined,
                        s: { state: 'idle' },
                        address: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                        options: {
                          connectTimeoutMS: 30000,
                          heartbeatFrequencyMS: 10000,
                          minHeartbeatFrequencyMS: 500
                        },
                        connectOptions: {
                          id: '<monitor>',
                          generation: 0,
                          connectionType: [class Connection extends TypedEventEmitter] {
                            COMMAND_STARTED: 'commandStarted',
                            COMMAND_SUCCEEDED: 'commandSucceeded',
                            COMMAND_FAILED: 'commandFailed',
                            CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                            CLOSE: 'close',
                            MESSAGE: 'message',
                            PINNED: 'pinned',
                            UNPINNED: 'unpinned'
                          },
                          cancellationToken: CancellationToken {
                            _events: [Object: null prototype] {},
                            _eventsCount: 0,
                            _maxListeners: Infinity,
                            [Symbol(kCapture)]: false
                          },
                          hostAddress: new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                          hosts: [
                            new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                          ],
                          compressors: [ 'none' ],
                          connectTimeoutMS: 30000,
                          directConnection: false,
                          metadata: {
                            driver: {
                              name: 'nodejs|Mongoose',
                              version: '5.1.0'
                            },
                            os: {
                              type: 'Linux',
                              name: 'linux',
                              architecture: 'x64',
                              version: '6.1.13-200.fc37.x86_64'
                            },
                            platform: 'Node.js v18.12.1, LE (unified)',
                            version: '5.1.0|7.0.0'
                          },
                          enableUtf8Validation: true,
                          forceServerObjectId: false,
                          heartbeatFrequencyMS: 10000,
                          keepAlive: true,
                          keepAliveInitialDelay: 120000,
                          loadBalanced: false,
                          localThresholdMS: 15,
                          maxConnecting: 2,
                          maxIdleTimeMS: 0,
                          maxPoolSize: 100,
                          minPoolSize: 0,
                          minHeartbeatFrequencyMS: 500,
                          monitorCommands: false,
                          noDelay: true,
                          pkFactory: { createPk: [Function: createPk] },
                          raw: false,
                          readPreference: ReadPreference {
                            mode: 'primary',
                            tags: undefined,
                            hedge: undefined,
                            maxStalenessSeconds: undefined,
                            minWireVersion: undefined
                          },
                          retryReads: true,
                          retryWrites: true,
                          serverSelectionTimeoutMS: 30000,
                          socketTimeoutMS: 0,
                          srvMaxHosts: 0,
                          srvServiceName: 'mongodb',
                          writeConcern: WriteConcern { w: 'majority' },
                          waitQueueTimeoutMS: 0,
                          zlibCompressionLevel: 0,
                          dbName: 'test',
                          userSpecifiedAuthSource: false,
                          userSpecifiedReplicaSet: false,
                          srvHost: 'dcsweb.snm3hyr.mongodb.net',
                          tls: true,
                          mongoLoggerOptions: {
                            componentSeverities: {
                              command: 'off',
                              topology: 'off',
                              serverSelection: 'off',
                              connection: 'off',
                              default: 'off'
                            },
                            maxDocumentLength: 1000,
                            logDestination: <ref *2> WriteStream {
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: null,
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 0,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [],
                                flowing: null,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                constructed: true,
                                sync: true,
                                needReadable: false,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: false,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: null
                              },
                              _events: [Object: null prototype] {
                                end: [Function: onReadableStreamEnd]
                              },
                              _eventsCount: 1,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: true,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: null,
                              _server: null,
                              columns: 140,
                              rows: 12,
                              _type: 'tty',
                              fd: 2,
                              _isStdio: true,
                              destroySoon: [Function: destroy],
                              _destroy: [Function: dummyDestroy],
                              [Symbol(async_id_symbol)]: 51,
                              [Symbol(kHandle)]: TTY {
                                [Symbol(owner_symbol)]: [Circular *2]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: null,
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: false,
                              [Symbol(kSetKeepAlive)]: false,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0
                            }
                          },
                          replicaSet: 'atlas-6h3glt-shard-0',
                          useBigInt64: false,
                          promoteLongs: true,
                          promoteValues: true,
                          promoteBuffers: true,
                          [Symbol(@@mdb.enableMongoLogger)]: false
                        },
                        [Symbol(kCapture)]: false,
                        [Symbol(server)]: [Circular *6],
                        [Symbol(connection)]: Connection {
                          _events: [Object: null prototype] {},
                          _eventsCount: 0,
                          _maxListeners: undefined,
                          id: '<monitor>',
                          address: '18.230.140.150:27017',
                          socketTimeoutMS: 0,
                          monitorCommands: false,
                          serverApi: undefined,
                          closed: false,
                          helloOk: true,
                          lastHelloMS: 83,
                          [Symbol(kCapture)]: false,
                          [Symbol(hello)]: {
                            helloOk: true,
                            topologyVersion: {
                              processId: new ObjectId("6402382a0e21490e021d214d"),
                              counter: 6
                            },
                            hosts: [
                              'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                              'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                              'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                            ],
                            setName: 'atlas-6h3glt-shard-0',
                            setVersion: 1,
                            ismaster: true,
                            secondary: false,
                            primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                            tags: {
                              region: 'SA_EAST_1',
                              nodeType: 'ELECTABLE',
                              provider: 'AWS',
                              workloadType: 'OPERATIONAL'
                            },
                            me: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                            electionId: new ObjectId("7fffffff000000000000001c"),
                            lastWrite: {
                              opTime: {
                                ts: new Timestamp({ t: 1678058605, i: 7 }),
                                t: 28
                              },
                              lastWriteDate: 2023-03-05T23:23:25.000Z,
                              majorityOpTime: {
                                ts: new Timestamp({ t: 1678058605, i: 7 }),
                                t: 28
                              },
                              majorityWriteDate: 2023-03-05T23:23:25.000Z
                            },
                            maxBsonObjectSize: 16777216,
                            maxMessageSizeBytes: 48000000,
                            maxWriteBatchSize: 100000,
                            localTime: 2023-03-05T23:23:25.988Z,
                            logicalSessionTimeoutMinutes: 30,
                            connectionId: 47148,
                            minWireVersion: 0,
                            maxWireVersion: 13,
                            readOnly: false,
                            ok: 1,
                            '$clusterTime': {
                              clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                              signature: {
                                hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                                keyId: new Long("7168531580753805315")
                              }
                            },
                            operationTime: new Timestamp({ t: 1678058605, i: 7 }),
                            isWritablePrimary: true
                          },
                          [Symbol(clusterTime)]: {
                            clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                            signature: {
                              hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                              keyId: new Long("7168531580753805315")
                            }
                          },
                          [Symbol(description)]: StreamDescription {
                            address: '18.230.140.150:27017',
                            type: 'RSPrimary',
                            minWireVersion: 0,
                            maxWireVersion: 13,
                            maxBsonObjectSize: 16777216,
                            maxMessageSizeBytes: 48000000,
                            maxWriteBatchSize: 100000,
                            logicalSessionTimeoutMinutes: 30,
                            loadBalanced: false,
                            compressors: [ 'none' ]
                          },
                          [Symbol(generation)]: 0,
                          [Symbol(lastUseTime)]: 531479,
                          [Symbol(queue)]: Map(0) {},
                          [Symbol(messageStream)]: <ref *12> MessageStream {
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [
                                <ref *13> TLSSocket {
                                  _tlsOptions: {
                                    allowHalfOpen: undefined,
                                    pipe: false,
                                    secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    isServer: false,
                                    requestCert: true,
                                    rejectUnauthorized: true,
                                    session: undefined,
                                    ALPNProtocols: undefined,
                                    requestOCSP: undefined,
                                    enableTrace: undefined,
                                    pskCallback: undefined,
                                    highWaterMark: undefined,
                                    onread: undefined,
                                    signal: undefined
                                  },
                                  _secureEstablished: true,
                                  _securePending: false,
                                  _newSessionPending: false,
                                  _controlReleased: true,
                                  secureConnecting: false,
                                  _SNICallback: null,
                                  servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                  alpnProtocol: false,
                                  authorized: true,
                                  authorizationError: null,
                                  encrypted: true,
                                  _events: [Object: null prototype] {
                                    end: [
                                      [Function: onReadableStreamEnd],
                                      [Function: bound onceWrapper] {
                                        listener: [Function: onend]
                                      }
                                    ],
                                    newListener: [
                                      [Function: keylogNewListener],
                                      [Function: newListener]
                                    ],
                                    secure: [Function: onConnectSecure],
                                    close: [
                                      [Function (anonymous)],
                                      [Function: bound onceWrapper] {
                                        listener: [Function: onclose]
                                      }
                                    ],
                                    timeout: [Function (anonymous)],
                                    error: [
                                      [Function: onerror],
                                      [Function (anonymous)]
                                    ],
                                    data: [Function: ondata],
                                    unpipe: [Function: onunpipe],
                                    finish: [Function: bound onceWrapper] {
                                      listener: [Function: onfinish]
                                    }
                                  },
                                  _eventsCount: 9,
                                  connecting: false,
                                  _hadError: false,
                                  _parent: null,
                                  _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                  _closeAfterHandlingError: false,
                                  _readableState: ReadableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                    length: 0,
                                    pipes: [ [Circular *12] ],
                                    flowing: true,
                                    ended: false,
                                    endEmitted: false,
                                    reading: true,
                                    constructed: true,
                                    sync: false,
                                    needReadable: true,
                                    emittedReadable: false,
                                    readableListening: false,
                                    resumeScheduled: false,
                                    errorEmitted: false,
                                    emitClose: false,
                                    autoDestroy: true,
                                    destroyed: false,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    defaultEncoding: 'utf8',
                                    awaitDrainWriters: null,
                                    multiAwaitDrain: false,
                                    readingMore: false,
                                    dataEmitted: true,
                                    decoder: null,
                                    encoding: null,
                                    [Symbol(kPaused)]: false
                                  },
                                  _maxListeners: undefined,
                                  _writableState: WritableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    finalCalled: false,
                                    needDrain: false,
                                    ending: false,
                                    ended: false,
                                    finished: false,
                                    destroyed: false,
                                    decodeStrings: false,
                                    defaultEncoding: 'utf8',
                                    length: 0,
                                    writing: false,
                                    corked: 0,
                                    sync: false,
                                    bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                    writecb: null,
                                    writelen: 0,
                                    afterWriteTickInfo: null,
                                    buffered: [],
                                    bufferedIndex: 0,
                                    allBuffers: true,
                                    allNoop: true,
                                    pendingcb: 0,
                                    constructed: true,
                                    prefinished: false,
                                    errorEmitted: false,
                                    emitClose: false,
                                    autoDestroy: true,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    [Symbol(kOnFinished)]: []
                                  },
                                  allowHalfOpen: false,
                                  _sockname: null,
                                  _pendingData: null,
                                  _pendingEncoding: '',
                                  server: undefined,
                                  _server: null,
                                  ssl: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *13]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *13]
                                  },
                                  _requestCert: true,
                                  _rejectUnauthorized: true,
                                  timeout: 0,
                                  _peername: {
                                    address: '18.230.140.150',
                                    family: 'IPv4',
                                    port: 27017
                                  },
                                  [Symbol(res)]: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *13]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *13]
                                  },
                                  [Symbol(verified)]: true,
                                  [Symbol(pendingSession)]: null,
                                  [Symbol(async_id_symbol)]: 110,
                                  [Symbol(kHandle)]: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *13]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *13]
                                  },
                                  [Symbol(lastWriteQueueSize)]: 0,
                                  [Symbol(timeout)]: Timeout {
                                    _idleTimeout: -1,
                                    _idlePrev: null,
                                    _idleNext: null,
                                    _idleStart: 16461,
                                    _onTimeout: null,
                                    _timerArgs: undefined,
                                    _repeat: null,
                                    _destroyed: true,
                                    [Symbol(refed)]: false,
                                    [Symbol(kHasPrimitive)]: false,
                                    [Symbol(asyncId)]: 140,
                                    [Symbol(triggerId)]: 110
                                  },
                                  [Symbol(kBuffer)]: null,
                                  [Symbol(kBufferCb)]: null,
                                  [Symbol(kBufferGen)]: null,
                                  [Symbol(kCapture)]: false,
                                  [Symbol(kSetNoDelay)]: true,
                                  [Symbol(kSetKeepAlive)]: true,
                                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                  [Symbol(kBytesRead)]: 0,
                                  [Symbol(kBytesWritten)]: 0,
                                  [Symbol(connect-options)]: {
                                    rejectUnauthorized: true,
                                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                    checkServerIdentity: [Function: checkServerIdentity],
                                    minDHSize: 1024,
                                    host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                    port: 27017,
                                    servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                                    singleUse: true
                                  },
                                  [Symbol(disable-renegotiation)]: true
                                }
                              ],
                              flowing: true,
                              ended: false,
                              endEmitted: false,
                              reading: true,
                              constructed: true,
                              sync: false,
                              needReadable: true,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: true,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: true,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: false
                            },
                            _events: [Object: null prototype] {
                              message: [Function (anonymous)],
                              error: [
                                [Function: onerror],
                                [Function (anonymous)]
                              ],
                              unpipe: [Function: onunpipe],
                              close: [Function: bound onceWrapper] {
                                listener: [Function: onclose]
                              },
                              finish: [Function: bound onceWrapper] {
                                listener: [Function: onfinish]
                              },
                              end: [Function: bound onceWrapper] {
                                listener: [Function: onend]
                              },
                              data: [Function: ondata]
                            },
                            _eventsCount: 7,
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: true,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: false,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: true,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: true,
                            isMonitoringConnection: true,
                            maxBsonMessageSize: 67108864,
                            [Symbol(kCapture)]: false,
                            [Symbol(buffer)]: BufferPool {
                              buffers: List {
                                count: 0,
                                head: <ref *14> {
                                  next: [Circular *14],
                                  prev: [Circular *14],
                                  value: null
                                }
                              },
                              totalByteLength: 0
                            }
                          },
                          [Symbol(stream)]: <ref *13> TLSSocket {
                            _tlsOptions: {
                              allowHalfOpen: undefined,
                              pipe: false,
                              secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              isServer: false,
                              requestCert: true,
                              rejectUnauthorized: true,
                              session: undefined,
                              ALPNProtocols: undefined,
                              requestOCSP: undefined,
                              enableTrace: undefined,
                              pskCallback: undefined,
                              highWaterMark: undefined,
                              onread: undefined,
                              signal: undefined
                            },
                            _secureEstablished: true,
                            _securePending: false,
                            _newSessionPending: false,
                            _controlReleased: true,
                            secureConnecting: false,
                            _SNICallback: null,
                            servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                            alpnProtocol: false,
                            authorized: true,
                            authorizationError: null,
                            encrypted: true,
                            _events: [Object: null prototype] {
                              end: [
                                [Function: onReadableStreamEnd],
                                [Function: bound onceWrapper] {
                                  listener: [Function: onend]
                                }
                              ],
                              newListener: [
                                [Function: keylogNewListener],
                                [Function: newListener]
                              ],
                              secure: [Function: onConnectSecure],
                              close: [
                                [Function (anonymous)],
                                [Function: bound onceWrapper] {
                                  listener: [Function: onclose]
                                }
                              ],
                              timeout: [Function (anonymous)],
                              error: [
                                [Function: onerror],
                                [Function (anonymous)]
                              ],
                              data: [Function: ondata],
                              unpipe: [Function: onunpipe],
                              finish: [Function: bound onceWrapper] {
                                listener: [Function: onfinish]
                              }
                            },
                            _eventsCount: 9,
                            connecting: false,
                            _hadError: false,
                            _parent: null,
                            _host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                            _closeAfterHandlingError: false,
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [
                                <ref *12> MessageStream {
                                  _readableState: ReadableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                    length: 0,
                                    pipes: [ [Circular *13] ],
                                    flowing: true,
                                    ended: false,
                                    endEmitted: false,
                                    reading: true,
                                    constructed: true,
                                    sync: false,
                                    needReadable: true,
                                    emittedReadable: false,
                                    readableListening: false,
                                    resumeScheduled: false,
                                    errorEmitted: false,
                                    emitClose: true,
                                    autoDestroy: true,
                                    destroyed: false,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    defaultEncoding: 'utf8',
                                    awaitDrainWriters: null,
                                    multiAwaitDrain: false,
                                    readingMore: false,
                                    dataEmitted: true,
                                    decoder: null,
                                    encoding: null,
                                    [Symbol(kPaused)]: false
                                  },
                                  _events: [Object: null prototype] {
                                    message: [Function (anonymous)],
                                    error: [
                                      [Function: onerror],
                                      [Function (anonymous)]
                                    ],
                                    unpipe: [Function: onunpipe],
                                    close: [Function: bound onceWrapper] {
                                      listener: [Function: onclose]
                                    },
                                    finish: [Function: bound onceWrapper] {
                                      listener: [Function: onfinish]
                                    },
                                    end: [Function: bound onceWrapper] {
                                      listener: [Function: onend]
                                    },
                                    data: [Function: ondata]
                                  },
                                  _eventsCount: 7,
                                  _maxListeners: undefined,
                                  _writableState: WritableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    finalCalled: false,
                                    needDrain: false,
                                    ending: false,
                                    ended: false,
                                    finished: false,
                                    destroyed: false,
                                    decodeStrings: true,
                                    defaultEncoding: 'utf8',
                                    length: 0,
                                    writing: false,
                                    corked: 0,
                                    sync: false,
                                    bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                    writecb: null,
                                    writelen: 0,
                                    afterWriteTickInfo: null,
                                    buffered: [],
                                    bufferedIndex: 0,
                                    allBuffers: true,
                                    allNoop: true,
                                    pendingcb: 0,
                                    constructed: true,
                                    prefinished: false,
                                    errorEmitted: false,
                                    emitClose: true,
                                    autoDestroy: true,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    [Symbol(kOnFinished)]: []
                                  },
                                  allowHalfOpen: true,
                                  isMonitoringConnection: true,
                                  maxBsonMessageSize: 67108864,
                                  [Symbol(kCapture)]: false,
                                  [Symbol(buffer)]: BufferPool {
                                    buffers: List {
                                      count: 0,
                                      head: <ref *14> {
                                        next: [Circular *14],
                                        prev: [Circular *14],
                                        value: null
                                      }
                                    },
                                    totalByteLength: 0
                                  }
                                }
                              ],
                              flowing: true,
                              ended: false,
                              endEmitted: false,
                              reading: true,
                              constructed: true,
                              sync: false,
                              needReadable: true,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: true,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: false
                            },
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: false,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: false,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: undefined,
                            _server: null,
                            ssl: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *13]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *13]
                            },
                            _requestCert: true,
                            _rejectUnauthorized: true,
                            timeout: 0,
                            _peername: {
                              address: '18.230.140.150',
                              family: 'IPv4',
                              port: 27017
                            },
                            [Symbol(res)]: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *13]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *13]
                            },
                            [Symbol(verified)]: true,
                            [Symbol(pendingSession)]: null,
                            [Symbol(async_id_symbol)]: 110,
                            [Symbol(kHandle)]: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *13]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *13]
                            },
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: Timeout {
                              _idleTimeout: -1,
                              _idlePrev: null,
                              _idleNext: null,
                              _idleStart: 16461,
                              _onTimeout: null,
                              _timerArgs: undefined,
                              _repeat: null,
                              _destroyed: true,
                              [Symbol(refed)]: false,
                              [Symbol(kHasPrimitive)]: false,
                              [Symbol(asyncId)]: 140,
                              [Symbol(triggerId)]: 110
                            },
                            [Symbol(kBuffer)]: null,
                            [Symbol(kBufferCb)]: null,
                            [Symbol(kBufferGen)]: null,
                            [Symbol(kCapture)]: false,
                            [Symbol(kSetNoDelay)]: true,
                            [Symbol(kSetKeepAlive)]: true,
                            [Symbol(kSetKeepAliveInitialDelay)]: 0,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0,
                            [Symbol(connect-options)]: {
                              rejectUnauthorized: true,
                              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                              checkServerIdentity: [Function: checkServerIdentity],
                              minDHSize: 1024,
                              host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                              port: 27017,
                              servername: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
                              singleUse: true
                            },
                            [Symbol(disable-renegotiation)]: true
                          },
                          [Symbol(delayedTimeoutId)]: null
                        },
                        [Symbol(cancellationToken)]: CancellationToken {
                          _events: [Object: null prototype] {},
                          _eventsCount: 0,
                          _maxListeners: Infinity,
                          [Symbol(kCapture)]: false
                        },
                        [Symbol(monitorId)]: MonitorInterval {
                          isExpeditedCallToFnScheduled: true,
                          stopped: false,
                          isExecutionInProgress: false,
                          hasExecutedOnce: false,
                          _executeAndReschedule: [Function (anonymous)],
                          fn: [Function (anonymous)],
                          lastExecutionEnded: 531567,
                          heartbeatFrequencyMS: 10000,
                          minHeartbeatFrequencyMS: 500,
                          timerId: Timeout {
                            _idleTimeout: 496,
                            _idlePrev: [TimersList],
                            _idleNext: [TimersList],
                            _idleStart: 16473,
                            _onTimeout: [Function (anonymous)],
                            _timerArgs: undefined,
                            _repeat: null,
                            _destroyed: false,
                            [Symbol(refed)]: true,
                            [Symbol(kHasPrimitive)]: false,
                            [Symbol(asyncId)]: 166,
                            [Symbol(triggerId)]: 157
                          }
                        }
                      }
                    },
                    'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017' => <ref *15> Server {
                      _events: [Object: null prototype] {
                        serverHeartbeatStarted: [Function (anonymous)],
                        serverHeartbeatSucceeded: [Function (anonymous)],
                        serverHeartbeatFailed: [Function (anonymous)],
                        commandStarted: [Function (anonymous)],
                        commandSucceeded: [Function (anonymous)],
                        commandFailed: [Function (anonymous)],
                        connectionPoolCreated: [Function (anonymous)],
                        connectionPoolReady: [Function (anonymous)],
                        connectionPoolCleared: [Function (anonymous)],
                        connectionPoolClosed: [Function (anonymous)],
                        connectionCreated: [Function (anonymous)],
                        connectionReady: [Function (anonymous)],
                        connectionClosed: [Function (anonymous)],
                        connectionCheckOutStarted: [Function (anonymous)],
                        connectionCheckOutFailed: [Function (anonymous)],
                        connectionCheckedOut: [Function (anonymous)],
                        connectionCheckedIn: [Function (anonymous)],
                        descriptionReceived: [Function (anonymous)]
                      },
                      _eventsCount: 18,
                      _maxListeners: undefined,
                      serverApi: undefined,
                      s: {
                        description: ServerDescription {
                          address: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                          type: 'RSSecondary',
                          hosts: [
                            'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                            'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                            'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                          ],
                          passives: [],
                          arbiters: [],
                          tags: {
                            workloadType: 'OPERATIONAL',
                            nodeType: 'ELECTABLE',
                            provider: 'AWS',
                            region: 'SA_EAST_1'
                          },
                          minWireVersion: 0,
                          maxWireVersion: 13,
                          roundTripTime: 308,
                          lastUpdateTime: 531552,
                          lastWriteDate: 2023-03-05T23:23:25.000Z,
                          error: null,
                          topologyVersion: {
                            processId: new ObjectId("6402371beee3a1cd86210b91"),
                            counter: 4
                          },
                          setName: 'atlas-6h3glt-shard-0',
                          setVersion: 1,
                          electionId: null,
                          logicalSessionTimeoutMinutes: 30,
                          primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                          me: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                          '$clusterTime': {
                            clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                            signature: {
                              hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                              keyId: new Long("7168531580753805315")
                            }
                          }
                        },
                        options: [Object: null prototype] {
                          hosts: [
                            new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                          ],
                          credentials: MongoCredentials {
                            username: 'dcsweb',
                            password: 'MopG23GHLEu3GwB0',
                            source: 'admin',
                            mechanism: 'DEFAULT',
                            mechanismProperties: {}
                          },
                          compressors: [ 'none' ],
                          connectTimeoutMS: 30000,
                          directConnection: false,
                          metadata: {
                            driver: {
                              name: 'nodejs|Mongoose',
                              version: '5.1.0'
                            },
                            os: {
                              type: 'Linux',
                              name: 'linux',
                              architecture: 'x64',
                              version: '6.1.13-200.fc37.x86_64'
                            },
                            platform: 'Node.js v18.12.1, LE (unified)',
                            version: '5.1.0|7.0.0'
                          },
                          enableUtf8Validation: true,
                          forceServerObjectId: false,
                          heartbeatFrequencyMS: 10000,
                          keepAlive: true,
                          keepAliveInitialDelay: 120000,
                          loadBalanced: false,
                          localThresholdMS: 15,
                          maxConnecting: 2,
                          maxIdleTimeMS: 0,
                          maxPoolSize: 100,
                          minPoolSize: 0,
                          minHeartbeatFrequencyMS: 500,
                          monitorCommands: false,
                          noDelay: true,
                          pkFactory: { createPk: [Function: createPk] },
                          raw: false,
                          readPreference: ReadPreference {
                            mode: 'primary',
                            tags: undefined,
                            hedge: undefined,
                            maxStalenessSeconds: undefined,
                            minWireVersion: undefined
                          },
                          retryReads: true,
                          retryWrites: true,
                          serverSelectionTimeoutMS: 30000,
                          socketTimeoutMS: 0,
                          srvMaxHosts: 0,
                          srvServiceName: 'mongodb',
                          writeConcern: WriteConcern { w: 'majority' },
                          waitQueueTimeoutMS: 0,
                          zlibCompressionLevel: 0,
                          dbName: 'test',
                          userSpecifiedAuthSource: false,
                          userSpecifiedReplicaSet: false,
                          srvHost: 'dcsweb.snm3hyr.mongodb.net',
                          tls: true,
                          mongoLoggerOptions: {
                            componentSeverities: {
                              command: 'off',
                              topology: 'off',
                              serverSelection: 'off',
                              connection: 'off',
                              default: 'off'
                            },
                            maxDocumentLength: 1000,
                            logDestination: <ref *2> WriteStream {
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: null,
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 0,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [],
                                flowing: null,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                constructed: true,
                                sync: true,
                                needReadable: false,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: false,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: null
                              },
                              _events: [Object: null prototype] {
                                end: [Function: onReadableStreamEnd]
                              },
                              _eventsCount: 1,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: true,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: null,
                              _server: null,
                              columns: 140,
                              rows: 12,
                              _type: 'tty',
                              fd: 2,
                              _isStdio: true,
                              destroySoon: [Function: destroy],
                              _destroy: [Function: dummyDestroy],
                              [Symbol(async_id_symbol)]: 51,
                              [Symbol(kHandle)]: TTY {
                                [Symbol(owner_symbol)]: [Circular *2]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: null,
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: false,
                              [Symbol(kSetKeepAlive)]: false,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0
                            }
                          },
                          replicaSet: 'atlas-6h3glt-shard-0',
                          [Symbol(@@mdb.enableMongoLogger)]: false
                        },
                        state: 'connected',
                        topology: [Circular *5],
                        pool: ConnectionPool {
                          _events: [Object: null prototype] {
                            connectionPoolCreated: [Function (anonymous)],
                            connectionPoolReady: [Function (anonymous)],
                            connectionPoolCleared: [Function (anonymous)],
                            connectionPoolClosed: [Function (anonymous)],
                            connectionCreated: [Function (anonymous)],
                            connectionReady: [Function (anonymous)],
                            connectionClosed: [Function (anonymous)],
                            connectionCheckOutStarted: [Function (anonymous)],
                            connectionCheckOutFailed: [Function (anonymous)],
                            connectionCheckedOut: [Function (anonymous)],
                            connectionCheckedIn: [Function (anonymous)],
                            commandStarted: [Function (anonymous)],
                            commandSucceeded: [Function (anonymous)],
                            commandFailed: [Function (anonymous)],
                            clusterTimeReceived: [Function (anonymous)]
                          },
                          _eventsCount: 15,
                          _maxListeners: undefined,
                          options: {
                            hostAddress: new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                            hosts: [
                              new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                              new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                              new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                            ],
                            credentials: MongoCredentials {
                              username: 'dcsweb',
                              password: 'MopG23GHLEu3GwB0',
                              source: 'admin',
                              mechanism: 'DEFAULT',
                              mechanismProperties: {}
                            },
                            compressors: [ 'none' ],
                            connectTimeoutMS: 30000,
                            directConnection: false,
                            metadata: {
                              driver: {
                                name: 'nodejs|Mongoose',
                                version: '5.1.0'
                              },
                              os: {
                                type: 'Linux',
                                name: 'linux',
                                architecture: 'x64',
                                version: '6.1.13-200.fc37.x86_64'
                              },
                              platform: 'Node.js v18.12.1, LE (unified)',
                              version: '5.1.0|7.0.0'
                            },
                            enableUtf8Validation: true,
                            forceServerObjectId: false,
                            heartbeatFrequencyMS: 10000,
                            keepAlive: true,
                            keepAliveInitialDelay: 120000,
                            loadBalanced: false,
                            localThresholdMS: 15,
                            maxConnecting: 2,
                            maxIdleTimeMS: 0,
                            maxPoolSize: 100,
                            minPoolSize: 0,
                            minHeartbeatFrequencyMS: 500,
                            monitorCommands: false,
                            noDelay: true,
                            pkFactory: { createPk: [Function: createPk] },
                            raw: false,
                            readPreference: ReadPreference {
                              mode: 'primary',
                              tags: undefined,
                              hedge: undefined,
                              maxStalenessSeconds: undefined,
                              minWireVersion: undefined
                            },
                            retryReads: true,
                            retryWrites: true,
                            serverSelectionTimeoutMS: 30000,
                            socketTimeoutMS: 0,
                            srvMaxHosts: 0,
                            srvServiceName: 'mongodb',
                            writeConcern: WriteConcern { w: 'majority' },
                            waitQueueTimeoutMS: 0,
                            zlibCompressionLevel: 0,
                            dbName: 'test',
                            userSpecifiedAuthSource: false,
                            userSpecifiedReplicaSet: false,
                            srvHost: 'dcsweb.snm3hyr.mongodb.net',
                            tls: true,
                            mongoLoggerOptions: {
                              componentSeverities: {
                                command: 'off',
                                topology: 'off',
                                serverSelection: 'off',
                                connection: 'off',
                                default: 'off'
                              },
                              maxDocumentLength: 1000,
                              logDestination: <ref *2> WriteStream {
                                connecting: false,
                                _hadError: false,
                                _parent: null,
                                _host: null,
                                _closeAfterHandlingError: false,
                                _readableState: ReadableState {
                                  objectMode: false,
                                  highWaterMark: 0,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: [],
                                  flowing: null,
                                  ended: false,
                                  endEmitted: false,
                                  reading: false,
                                  constructed: true,
                                  sync: true,
                                  needReadable: false,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  destroyed: false,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrainWriters: null,
                                  multiAwaitDrain: false,
                                  readingMore: false,
                                  dataEmitted: false,
                                  decoder: null,
                                  encoding: null,
                                  [Symbol(kPaused)]: null
                                },
                                _events: [Object: null prototype] {
                                  end: [Function: onReadableStreamEnd]
                                },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                _writableState: WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: false,
                                  needDrain: false,
                                  ending: false,
                                  ended: false,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: true,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  afterWriteTickInfo: null,
                                  buffered: [],
                                  bufferedIndex: 0,
                                  allBuffers: true,
                                  allNoop: true,
                                  pendingcb: 0,
                                  constructed: true,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  [Symbol(kOnFinished)]: []
                                },
                                allowHalfOpen: false,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                columns: 140,
                                rows: 12,
                                _type: 'tty',
                                fd: 2,
                                _isStdio: true,
                                destroySoon: [Function: destroy],
                                _destroy: [Function: dummyDestroy],
                                [Symbol(async_id_symbol)]: 51,
                                [Symbol(kHandle)]: TTY {
                                  [Symbol(owner_symbol)]: [Circular *2]
                                },
                                [Symbol(lastWriteQueueSize)]: 0,
                                [Symbol(timeout)]: null,
                                [Symbol(kBuffer)]: null,
                                [Symbol(kBufferCb)]: null,
                                [Symbol(kBufferGen)]: null,
                                [Symbol(kCapture)]: false,
                                [Symbol(kSetNoDelay)]: false,
                                [Symbol(kSetKeepAlive)]: false,
                                [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                [Symbol(kBytesRead)]: 0,
                                [Symbol(kBytesWritten)]: 0
                              }
                            },
                            replicaSet: 'atlas-6h3glt-shard-0',
                            connectionType: [class Connection extends TypedEventEmitter] {
                              COMMAND_STARTED: 'commandStarted',
                              COMMAND_SUCCEEDED: 'commandSucceeded',
                              COMMAND_FAILED: 'commandFailed',
                              CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                              CLOSE: 'close',
                              MESSAGE: 'message',
                              PINNED: 'pinned',
                              UNPINNED: 'unpinned'
                            },
                            minPoolSizeCheckFrequencyMS: 100,
                            autoEncrypter: undefined,
                            [Symbol(@@mdb.enableMongoLogger)]: false
                          },
                          [Symbol(kCapture)]: false,
                          [Symbol(poolState)]: 'ready',
                          [Symbol(server)]: [Circular *15],
                          [Symbol(connections)]: List {
                            count: 0,
                            head: <ref *16> {
                              next: [Circular *16],
                              prev: [Circular *16],
                              value: null
                            }
                          },
                          [Symbol(pending)]: 0,
                          [Symbol(checkedOut)]: Set(0) {},
                          [Symbol(minPoolSizeTimer)]: undefined,
                          [Symbol(generation)]: 0,
                          [Symbol(serviceGenerations)]: Map(0) {},
                          [Symbol(connectionCounter)]: Object [Generator] {},
                          [Symbol(cancellationToken)]: CancellationToken {
                            _events: [Object: null prototype] {},
                            _eventsCount: 0,
                            _maxListeners: Infinity,
                            [Symbol(kCapture)]: false
                          },
                          [Symbol(waitQueue)]: List {
                            count: 0,
                            head: <ref *17> {
                              next: [Circular *17],
                              prev: [Circular *17],
                              value: null
                            }
                          },
                          [Symbol(metrics)]: ConnectionPoolMetrics {
                            txnConnections: 0,
                            cursorConnections: 0,
                            otherConnections: 0
                          },
                          [Symbol(processingWaitQueue)]: false
                        },
                        operationCount: 0
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(monitor)]: Monitor {
                        _events: [Object: null prototype] {
                          serverHeartbeatStarted: [Function (anonymous)],
                          serverHeartbeatSucceeded: [
                            [Function (anonymous)],
                            [Function (anonymous)]
                          ],
                          serverHeartbeatFailed: [Function (anonymous)],
                          resetServer: [Function (anonymous)]
                        },
                        _eventsCount: 4,
                        _maxListeners: undefined,
                        s: { state: 'idle' },
                        address: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                        options: {
                          connectTimeoutMS: 30000,
                          heartbeatFrequencyMS: 10000,
                          minHeartbeatFrequencyMS: 500
                        },
                        connectOptions: {
                          id: '<monitor>',
                          generation: 0,
                          connectionType: [class Connection extends TypedEventEmitter] {
                            COMMAND_STARTED: 'commandStarted',
                            COMMAND_SUCCEEDED: 'commandSucceeded',
                            COMMAND_FAILED: 'commandFailed',
                            CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                            CLOSE: 'close',
                            MESSAGE: 'message',
                            PINNED: 'pinned',
                            UNPINNED: 'unpinned'
                          },
                          cancellationToken: CancellationToken {
                            _events: [Object: null prototype] {},
                            _eventsCount: 0,
                            _maxListeners: Infinity,
                            [Symbol(kCapture)]: false
                          },
                          hostAddress: new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                          hosts: [
                            new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                          ],
                          compressors: [ 'none' ],
                          connectTimeoutMS: 30000,
                          directConnection: false,
                          metadata: {
                            driver: {
                              name: 'nodejs|Mongoose',
                              version: '5.1.0'
                            },
                            os: {
                              type: 'Linux',
                              name: 'linux',
                              architecture: 'x64',
                              version: '6.1.13-200.fc37.x86_64'
                            },
                            platform: 'Node.js v18.12.1, LE (unified)',
                            version: '5.1.0|7.0.0'
                          },
                          enableUtf8Validation: true,
                          forceServerObjectId: false,
                          heartbeatFrequencyMS: 10000,
                          keepAlive: true,
                          keepAliveInitialDelay: 120000,
                          loadBalanced: false,
                          localThresholdMS: 15,
                          maxConnecting: 2,
                          maxIdleTimeMS: 0,
                          maxPoolSize: 100,
                          minPoolSize: 0,
                          minHeartbeatFrequencyMS: 500,
                          monitorCommands: false,
                          noDelay: true,
                          pkFactory: { createPk: [Function: createPk] },
                          raw: false,
                          readPreference: ReadPreference {
                            mode: 'primary',
                            tags: undefined,
                            hedge: undefined,
                            maxStalenessSeconds: undefined,
                            minWireVersion: undefined
                          },
                          retryReads: true,
                          retryWrites: true,
                          serverSelectionTimeoutMS: 30000,
                          socketTimeoutMS: 0,
                          srvMaxHosts: 0,
                          srvServiceName: 'mongodb',
                          writeConcern: WriteConcern { w: 'majority' },
                          waitQueueTimeoutMS: 0,
                          zlibCompressionLevel: 0,
                          dbName: 'test',
                          userSpecifiedAuthSource: false,
                          userSpecifiedReplicaSet: false,
                          srvHost: 'dcsweb.snm3hyr.mongodb.net',
                          tls: true,
                          mongoLoggerOptions: {
                            componentSeverities: {
                              command: 'off',
                              topology: 'off',
                              serverSelection: 'off',
                              connection: 'off',
                              default: 'off'
                            },
                            maxDocumentLength: 1000,
                            logDestination: <ref *2> WriteStream {
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: null,
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 0,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [],
                                flowing: null,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                constructed: true,
                                sync: true,
                                needReadable: false,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: false,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: null
                              },
                              _events: [Object: null prototype] {
                                end: [Function: onReadableStreamEnd]
                              },
                              _eventsCount: 1,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: true,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: null,
                              _server: null,
                              columns: 140,
                              rows: 12,
                              _type: 'tty',
                              fd: 2,
                              _isStdio: true,
                              destroySoon: [Function: destroy],
                              _destroy: [Function: dummyDestroy],
                              [Symbol(async_id_symbol)]: 51,
                              [Symbol(kHandle)]: TTY {
                                [Symbol(owner_symbol)]: [Circular *2]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: null,
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: false,
                              [Symbol(kSetKeepAlive)]: false,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0
                            }
                          },
                          replicaSet: 'atlas-6h3glt-shard-0',
                          useBigInt64: false,
                          promoteLongs: true,
                          promoteValues: true,
                          promoteBuffers: true,
                          [Symbol(@@mdb.enableMongoLogger)]: false
                        },
                        [Symbol(kCapture)]: false,
                        [Symbol(server)]: [Circular *15],
                        [Symbol(connection)]: Connection {
                          _events: [Object: null prototype] {},
                          _eventsCount: 0,
                          _maxListeners: undefined,
                          id: '<monitor>',
                          address: '18.230.95.68:27017',
                          socketTimeoutMS: 0,
                          monitorCommands: false,
                          serverApi: undefined,
                          closed: false,
                          helloOk: true,
                          lastHelloMS: 88,
                          [Symbol(kCapture)]: false,
                          [Symbol(hello)]: {
                            helloOk: true,
                            topologyVersion: {
                              processId: new ObjectId("6402371beee3a1cd86210b91"),
                              counter: 4
                            },
                            hosts: [
                              'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                              'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                              'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                            ],
                            setName: 'atlas-6h3glt-shard-0',
                            setVersion: 1,
                            ismaster: false,
                            secondary: true,
                            primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                            tags: {
                              workloadType: 'OPERATIONAL',
                              nodeType: 'ELECTABLE',
                              provider: 'AWS',
                              region: 'SA_EAST_1'
                            },
                            me: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                            lastWrite: {
                              opTime: {
                                ts: new Timestamp({ t: 1678058605, i: 7 }),
                                t: 28
                              },
                              lastWriteDate: 2023-03-05T23:23:25.000Z,
                              majorityOpTime: {
                                ts: new Timestamp({ t: 1678058605, i: 7 }),
                                t: 28
                              },
                              majorityWriteDate: 2023-03-05T23:23:25.000Z
                            },
                            maxBsonObjectSize: 16777216,
                            maxMessageSizeBytes: 48000000,
                            maxWriteBatchSize: 100000,
                            localTime: 2023-03-05T23:23:25.987Z,
                            logicalSessionTimeoutMinutes: 30,
                            connectionId: 45924,
                            minWireVersion: 0,
                            maxWireVersion: 13,
                            readOnly: false,
                            ok: 1,
                            '$clusterTime': {
                              clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                              signature: {
                                hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                                keyId: new Long("7168531580753805315")
                              }
                            },
                            operationTime: new Timestamp({ t: 1678058605, i: 7 }),
                            isWritablePrimary: false
                          },
                          [Symbol(clusterTime)]: {
                            clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                            signature: {
                              hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                              keyId: new Long("7168531580753805315")
                            }
                          },
                          [Symbol(description)]: StreamDescription {
                            address: '18.230.95.68:27017',
                            type: 'RSSecondary',
                            minWireVersion: 0,
                            maxWireVersion: 13,
                            maxBsonObjectSize: 16777216,
                            maxMessageSizeBytes: 48000000,
                            maxWriteBatchSize: 100000,
                            logicalSessionTimeoutMinutes: 30,
                            loadBalanced: false,
                            compressors: [ 'none' ]
                          },
                          [Symbol(generation)]: 0,
                          [Symbol(lastUseTime)]: 531458,
                          [Symbol(queue)]: Map(0) {},
                          [Symbol(messageStream)]: <ref *18> MessageStream {
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [
                                <ref *19> TLSSocket {
                                  _tlsOptions: {
                                    allowHalfOpen: undefined,
                                    pipe: false,
                                    secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    isServer: false,
                                    requestCert: true,
                                    rejectUnauthorized: true,
                                    session: undefined,
                                    ALPNProtocols: undefined,
                                    requestOCSP: undefined,
                                    enableTrace: undefined,
                                    pskCallback: undefined,
                                    highWaterMark: undefined,
                                    onread: undefined,
                                    signal: undefined
                                  },
                                  _secureEstablished: true,
                                  _securePending: false,
                                  _newSessionPending: false,
                                  _controlReleased: true,
                                  secureConnecting: false,
                                  _SNICallback: null,
                                  servername: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                                  alpnProtocol: false,
                                  authorized: true,
                                  authorizationError: null,
                                  encrypted: true,
                                  _events: [Object: null prototype] {
                                    end: [
                                      [Function: onReadableStreamEnd],
                                      [Function: bound onceWrapper] {
                                        listener: [Function: onend]
                                      }
                                    ],
                                    newListener: [
                                      [Function: keylogNewListener],
                                      [Function: newListener]
                                    ],
                                    secure: [Function: onConnectSecure],
                                    close: [
                                      [Function (anonymous)],
                                      [Function: bound onceWrapper] {
                                        listener: [Function: onclose]
                                      }
                                    ],
                                    timeout: [Function (anonymous)],
                                    error: [
                                      [Function: onerror],
                                      [Function (anonymous)]
                                    ],
                                    data: [Function: ondata],
                                    unpipe: [Function: onunpipe],
                                    finish: [Function: bound onceWrapper] {
                                      listener: [Function: onfinish]
                                    }
                                  },
                                  _eventsCount: 9,
                                  connecting: false,
                                  _hadError: false,
                                  _parent: null,
                                  _host: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                                  _closeAfterHandlingError: false,
                                  _readableState: ReadableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                    length: 0,
                                    pipes: [ [Circular *18] ],
                                    flowing: true,
                                    ended: false,
                                    endEmitted: false,
                                    reading: true,
                                    constructed: true,
                                    sync: false,
                                    needReadable: true,
                                    emittedReadable: false,
                                    readableListening: false,
                                    resumeScheduled: false,
                                    errorEmitted: false,
                                    emitClose: false,
                                    autoDestroy: true,
                                    destroyed: false,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    defaultEncoding: 'utf8',
                                    awaitDrainWriters: null,
                                    multiAwaitDrain: false,
                                    readingMore: false,
                                    dataEmitted: true,
                                    decoder: null,
                                    encoding: null,
                                    [Symbol(kPaused)]: false
                                  },
                                  _maxListeners: undefined,
                                  _writableState: WritableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    finalCalled: false,
                                    needDrain: false,
                                    ending: false,
                                    ended: false,
                                    finished: false,
                                    destroyed: false,
                                    decodeStrings: false,
                                    defaultEncoding: 'utf8',
                                    length: 0,
                                    writing: false,
                                    corked: 0,
                                    sync: false,
                                    bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                    writecb: null,
                                    writelen: 0,
                                    afterWriteTickInfo: null,
                                    buffered: [],
                                    bufferedIndex: 0,
                                    allBuffers: true,
                                    allNoop: true,
                                    pendingcb: 0,
                                    constructed: true,
                                    prefinished: false,
                                    errorEmitted: false,
                                    emitClose: false,
                                    autoDestroy: true,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    [Symbol(kOnFinished)]: []
                                  },
                                  allowHalfOpen: false,
                                  _sockname: null,
                                  _pendingData: null,
                                  _pendingEncoding: '',
                                  server: undefined,
                                  _server: null,
                                  ssl: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *19]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *19]
                                  },
                                  _requestCert: true,
                                  _rejectUnauthorized: true,
                                  timeout: 0,
                                  _peername: {
                                    address: '18.230.95.68',
                                    family: 'IPv4',
                                    port: 27017
                                  },
                                  [Symbol(res)]: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *19]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *19]
                                  },
                                  [Symbol(verified)]: true,
                                  [Symbol(pendingSession)]: null,
                                  [Symbol(async_id_symbol)]: 116,
                                  [Symbol(kHandle)]: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *19]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *19]
                                  },
                                  [Symbol(lastWriteQueueSize)]: 0,
                                  [Symbol(timeout)]: Timeout {
                                    _idleTimeout: -1,
                                    _idlePrev: null,
                                    _idleNext: null,
                                    _idleStart: 16439,
                                    _onTimeout: null,
                                    _timerArgs: undefined,
                                    _repeat: null,
                                    _destroyed: true,
                                    [Symbol(refed)]: false,
                                    [Symbol(kHasPrimitive)]: false,
                                    [Symbol(asyncId)]: 135,
                                    [Symbol(triggerId)]: 116
                                  },
                                  [Symbol(kBuffer)]: null,
                                  [Symbol(kBufferCb)]: null,
                                  [Symbol(kBufferGen)]: null,
                                  [Symbol(kCapture)]: false,
                                  [Symbol(kSetNoDelay)]: true,
                                  [Symbol(kSetKeepAlive)]: true,
                                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                  [Symbol(kBytesRead)]: 0,
                                  [Symbol(kBytesWritten)]: 0,
                                  [Symbol(connect-options)]: {
                                    rejectUnauthorized: true,
                                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                    checkServerIdentity: [Function: checkServerIdentity],
                                    minDHSize: 1024,
                                    host: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                                    port: 27017,
                                    servername: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                                    singleUse: true
                                  },
                                  [Symbol(disable-renegotiation)]: true
                                }
                              ],
                              flowing: true,
                              ended: false,
                              endEmitted: false,
                              reading: true,
                              constructed: true,
                              sync: false,
                              needReadable: true,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: true,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: true,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: false
                            },
                            _events: [Object: null prototype] {
                              message: [Function (anonymous)],
                              error: [
                                [Function: onerror],
                                [Function (anonymous)]
                              ],
                              unpipe: [Function: onunpipe],
                              close: [Function: bound onceWrapper] {
                                listener: [Function: onclose]
                              },
                              finish: [Function: bound onceWrapper] {
                                listener: [Function: onfinish]
                              },
                              end: [Function: bound onceWrapper] {
                                listener: [Function: onend]
                              },
                              data: [Function: ondata]
                            },
                            _eventsCount: 7,
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: true,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: false,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: true,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: true,
                            isMonitoringConnection: true,
                            maxBsonMessageSize: 67108864,
                            [Symbol(kCapture)]: false,
                            [Symbol(buffer)]: BufferPool {
                              buffers: List {
                                count: 0,
                                head: <ref *20> {
                                  next: [Circular *20],
                                  prev: [Circular *20],
                                  value: null
                                }
                              },
                              totalByteLength: 0
                            }
                          },
                          [Symbol(stream)]: <ref *19> TLSSocket {
                            _tlsOptions: {
                              allowHalfOpen: undefined,
                              pipe: false,
                              secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              isServer: false,
                              requestCert: true,
                              rejectUnauthorized: true,
                              session: undefined,
                              ALPNProtocols: undefined,
                              requestOCSP: undefined,
                              enableTrace: undefined,
                              pskCallback: undefined,
                              highWaterMark: undefined,
                              onread: undefined,
                              signal: undefined
                            },
                            _secureEstablished: true,
                            _securePending: false,
                            _newSessionPending: false,
                            _controlReleased: true,
                            secureConnecting: false,
                            _SNICallback: null,
                            servername: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                            alpnProtocol: false,
                            authorized: true,
                            authorizationError: null,
                            encrypted: true,
                            _events: [Object: null prototype] {
                              end: [
                                [Function: onReadableStreamEnd],
                                [Function: bound onceWrapper] {
                                  listener: [Function: onend]
                                }
                              ],
                              newListener: [
                                [Function: keylogNewListener],
                                [Function: newListener]
                              ],
                              secure: [Function: onConnectSecure],
                              close: [
                                [Function (anonymous)],
                                [Function: bound onceWrapper] {
                                  listener: [Function: onclose]
                                }
                              ],
                              timeout: [Function (anonymous)],
                              error: [
                                [Function: onerror],
                                [Function (anonymous)]
                              ],
                              data: [Function: ondata],
                              unpipe: [Function: onunpipe],
                              finish: [Function: bound onceWrapper] {
                                listener: [Function: onfinish]
                              }
                            },
                            _eventsCount: 9,
                            connecting: false,
                            _hadError: false,
                            _parent: null,
                            _host: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                            _closeAfterHandlingError: false,
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [
                                <ref *18> MessageStream {
                                  _readableState: ReadableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                    length: 0,
                                    pipes: [ [Circular *19] ],
                                    flowing: true,
                                    ended: false,
                                    endEmitted: false,
                                    reading: true,
                                    constructed: true,
                                    sync: false,
                                    needReadable: true,
                                    emittedReadable: false,
                                    readableListening: false,
                                    resumeScheduled: false,
                                    errorEmitted: false,
                                    emitClose: true,
                                    autoDestroy: true,
                                    destroyed: false,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    defaultEncoding: 'utf8',
                                    awaitDrainWriters: null,
                                    multiAwaitDrain: false,
                                    readingMore: false,
                                    dataEmitted: true,
                                    decoder: null,
                                    encoding: null,
                                    [Symbol(kPaused)]: false
                                  },
                                  _events: [Object: null prototype] {
                                    message: [Function (anonymous)],
                                    error: [
                                      [Function: onerror],
                                      [Function (anonymous)]
                                    ],
                                    unpipe: [Function: onunpipe],
                                    close: [Function: bound onceWrapper] {
                                      listener: [Function: onclose]
                                    },
                                    finish: [Function: bound onceWrapper] {
                                      listener: [Function: onfinish]
                                    },
                                    end: [Function: bound onceWrapper] {
                                      listener: [Function: onend]
                                    },
                                    data: [Function: ondata]
                                  },
                                  _eventsCount: 7,
                                  _maxListeners: undefined,
                                  _writableState: WritableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    finalCalled: false,
                                    needDrain: false,
                                    ending: false,
                                    ended: false,
                                    finished: false,
                                    destroyed: false,
                                    decodeStrings: true,
                                    defaultEncoding: 'utf8',
                                    length: 0,
                                    writing: false,
                                    corked: 0,
                                    sync: false,
                                    bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                    writecb: null,
                                    writelen: 0,
                                    afterWriteTickInfo: null,
                                    buffered: [],
                                    bufferedIndex: 0,
                                    allBuffers: true,
                                    allNoop: true,
                                    pendingcb: 0,
                                    constructed: true,
                                    prefinished: false,
                                    errorEmitted: false,
                                    emitClose: true,
                                    autoDestroy: true,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    [Symbol(kOnFinished)]: []
                                  },
                                  allowHalfOpen: true,
                                  isMonitoringConnection: true,
                                  maxBsonMessageSize: 67108864,
                                  [Symbol(kCapture)]: false,
                                  [Symbol(buffer)]: BufferPool {
                                    buffers: List {
                                      count: 0,
                                      head: <ref *20> {
                                        next: [Circular *20],
                                        prev: [Circular *20],
                                        value: null
                                      }
                                    },
                                    totalByteLength: 0
                                  }
                                }
                              ],
                              flowing: true,
                              ended: false,
                              endEmitted: false,
                              reading: true,
                              constructed: true,
                              sync: false,
                              needReadable: true,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: true,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: false
                            },
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: false,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: false,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: undefined,
                            _server: null,
                            ssl: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *19]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *19]
                            },
                            _requestCert: true,
                            _rejectUnauthorized: true,
                            timeout: 0,
                            _peername: {
                              address: '18.230.95.68',
                              family: 'IPv4',
                              port: 27017
                            },
                            [Symbol(res)]: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *19]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *19]
                            },
                            [Symbol(verified)]: true,
                            [Symbol(pendingSession)]: null,
                            [Symbol(async_id_symbol)]: 116,
                            [Symbol(kHandle)]: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *19]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *19]
                            },
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: Timeout {
                              _idleTimeout: -1,
                              _idlePrev: null,
                              _idleNext: null,
                              _idleStart: 16439,
                              _onTimeout: null,
                              _timerArgs: undefined,
                              _repeat: null,
                              _destroyed: true,
                              [Symbol(refed)]: false,
                              [Symbol(kHasPrimitive)]: false,
                              [Symbol(asyncId)]: 135,
                              [Symbol(triggerId)]: 116
                            },
                            [Symbol(kBuffer)]: null,
                            [Symbol(kBufferCb)]: null,
                            [Symbol(kBufferGen)]: null,
                            [Symbol(kCapture)]: false,
                            [Symbol(kSetNoDelay)]: true,
                            [Symbol(kSetKeepAlive)]: true,
                            [Symbol(kSetKeepAliveInitialDelay)]: 0,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0,
                            [Symbol(connect-options)]: {
                              rejectUnauthorized: true,
                              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                              checkServerIdentity: [Function: checkServerIdentity],
                              minDHSize: 1024,
                              host: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                              port: 27017,
                              servername: 'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net',
                              singleUse: true
                            },
                            [Symbol(disable-renegotiation)]: true
                          },
                          [Symbol(delayedTimeoutId)]: null
                        },
                        [Symbol(cancellationToken)]: CancellationToken {
                          _events: [Object: null prototype] {},
                          _eventsCount: 0,
                          _maxListeners: Infinity,
                          [Symbol(kCapture)]: false
                        },
                        [Symbol(monitorId)]: MonitorInterval {
                          isExpeditedCallToFnScheduled: true,
                          stopped: false,
                          isExecutionInProgress: false,
                          hasExecutedOnce: false,
                          _executeAndReschedule: [Function (anonymous)],
                          fn: [Function (anonymous)],
                          lastExecutionEnded: 531556,
                          heartbeatFrequencyMS: 10000,
                          minHeartbeatFrequencyMS: 500,
                          timerId: Timeout {
                            _idleTimeout: 500,
                            _idlePrev: [TimersList],
                            _idleNext: [TimersList],
                            _idleStart: 16459,
                            _onTimeout: [Function (anonymous)],
                            _timerArgs: undefined,
                            _repeat: null,
                            _destroyed: false,
                            [Symbol(refed)]: true,
                            [Symbol(kHasPrimitive)]: false,
                            [Symbol(asyncId)]: 155,
                            [Symbol(triggerId)]: 149
                          }
                        }
                      }
                    },
                    'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017' => <ref *21> Server {
                      _events: [Object: null prototype] {
                        serverHeartbeatStarted: [Function (anonymous)],
                        serverHeartbeatSucceeded: [Function (anonymous)],
                        serverHeartbeatFailed: [Function (anonymous)],
                        commandStarted: [Function (anonymous)],
                        commandSucceeded: [Function (anonymous)],
                        commandFailed: [Function (anonymous)],
                        connectionPoolCreated: [Function (anonymous)],
                        connectionPoolReady: [Function (anonymous)],
                        connectionPoolCleared: [Function (anonymous)],
                        connectionPoolClosed: [Function (anonymous)],
                        connectionCreated: [Function (anonymous)],
                        connectionReady: [Function (anonymous)],
                        connectionClosed: [Function (anonymous)],
                        connectionCheckOutStarted: [Function (anonymous)],
                        connectionCheckOutFailed: [Function (anonymous)],
                        connectionCheckedOut: [Function (anonymous)],
                        connectionCheckedIn: [Function (anonymous)],
                        descriptionReceived: [Function (anonymous)]
                      },
                      _eventsCount: 18,
                      _maxListeners: undefined,
                      serverApi: undefined,
                      s: {
                        description: ServerDescription {
                          address: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                          type: 'RSSecondary',
                          hosts: [
                            'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                            'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                            'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                          ],
                          passives: [],
                          arbiters: [],
                          tags: {
                            workloadType: 'OPERATIONAL',
                            region: 'SA_EAST_1',
                            nodeType: 'ELECTABLE',
                            provider: 'AWS'
                          },
                          minWireVersion: 0,
                          maxWireVersion: 13,
                          roundTripTime: 330,
                          lastUpdateTime: 531576,
                          lastWriteDate: 2023-03-05T23:23:25.000Z,
                          error: null,
                          topologyVersion: {
                            processId: new ObjectId("6402390def6293ac4d778e4a"),
                            counter: 3
                          },
                          setName: 'atlas-6h3glt-shard-0',
                          setVersion: 1,
                          electionId: null,
                          logicalSessionTimeoutMinutes: 30,
                          primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                          me: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                          '$clusterTime': {
                            clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                            signature: {
                              hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                              keyId: new Long("7168531580753805315")
                            }
                          }
                        },
                        options: [Object: null prototype] {
                          hosts: [
                            new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                          ],
                          credentials: MongoCredentials {
                            username: 'dcsweb',
                            password: 'MopG23GHLEu3GwB0',
                            source: 'admin',
                            mechanism: 'DEFAULT',
                            mechanismProperties: {}
                          },
                          compressors: [ 'none' ],
                          connectTimeoutMS: 30000,
                          directConnection: false,
                          metadata: {
                            driver: {
                              name: 'nodejs|Mongoose',
                              version: '5.1.0'
                            },
                            os: {
                              type: 'Linux',
                              name: 'linux',
                              architecture: 'x64',
                              version: '6.1.13-200.fc37.x86_64'
                            },
                            platform: 'Node.js v18.12.1, LE (unified)',
                            version: '5.1.0|7.0.0'
                          },
                          enableUtf8Validation: true,
                          forceServerObjectId: false,
                          heartbeatFrequencyMS: 10000,
                          keepAlive: true,
                          keepAliveInitialDelay: 120000,
                          loadBalanced: false,
                          localThresholdMS: 15,
                          maxConnecting: 2,
                          maxIdleTimeMS: 0,
                          maxPoolSize: 100,
                          minPoolSize: 0,
                          minHeartbeatFrequencyMS: 500,
                          monitorCommands: false,
                          noDelay: true,
                          pkFactory: { createPk: [Function: createPk] },
                          raw: false,
                          readPreference: ReadPreference {
                            mode: 'primary',
                            tags: undefined,
                            hedge: undefined,
                            maxStalenessSeconds: undefined,
                            minWireVersion: undefined
                          },
                          retryReads: true,
                          retryWrites: true,
                          serverSelectionTimeoutMS: 30000,
                          socketTimeoutMS: 0,
                          srvMaxHosts: 0,
                          srvServiceName: 'mongodb',
                          writeConcern: WriteConcern { w: 'majority' },
                          waitQueueTimeoutMS: 0,
                          zlibCompressionLevel: 0,
                          dbName: 'test',
                          userSpecifiedAuthSource: false,
                          userSpecifiedReplicaSet: false,
                          srvHost: 'dcsweb.snm3hyr.mongodb.net',
                          tls: true,
                          mongoLoggerOptions: {
                            componentSeverities: {
                              command: 'off',
                              topology: 'off',
                              serverSelection: 'off',
                              connection: 'off',
                              default: 'off'
                            },
                            maxDocumentLength: 1000,
                            logDestination: <ref *2> WriteStream {
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: null,
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 0,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [],
                                flowing: null,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                constructed: true,
                                sync: true,
                                needReadable: false,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: false,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: null
                              },
                              _events: [Object: null prototype] {
                                end: [Function: onReadableStreamEnd]
                              },
                              _eventsCount: 1,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: true,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: null,
                              _server: null,
                              columns: 140,
                              rows: 12,
                              _type: 'tty',
                              fd: 2,
                              _isStdio: true,
                              destroySoon: [Function: destroy],
                              _destroy: [Function: dummyDestroy],
                              [Symbol(async_id_symbol)]: 51,
                              [Symbol(kHandle)]: TTY {
                                [Symbol(owner_symbol)]: [Circular *2]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: null,
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: false,
                              [Symbol(kSetKeepAlive)]: false,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0
                            }
                          },
                          replicaSet: 'atlas-6h3glt-shard-0',
                          [Symbol(@@mdb.enableMongoLogger)]: false
                        },
                        state: 'connected',
                        topology: [Circular *5],
                        pool: ConnectionPool {
                          _events: [Object: null prototype] {
                            connectionPoolCreated: [Function (anonymous)],
                            connectionPoolReady: [Function (anonymous)],
                            connectionPoolCleared: [Function (anonymous)],
                            connectionPoolClosed: [Function (anonymous)],
                            connectionCreated: [Function (anonymous)],
                            connectionReady: [Function (anonymous)],
                            connectionClosed: [Function (anonymous)],
                            connectionCheckOutStarted: [Function (anonymous)],
                            connectionCheckOutFailed: [Function (anonymous)],
                            connectionCheckedOut: [Function (anonymous)],
                            connectionCheckedIn: [Function (anonymous)],
                            commandStarted: [Function (anonymous)],
                            commandSucceeded: [Function (anonymous)],
                            commandFailed: [Function (anonymous)],
                            clusterTimeReceived: [Function (anonymous)]
                          },
                          _eventsCount: 15,
                          _maxListeners: undefined,
                          options: {
                            hostAddress: new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017'),
                            hosts: [
                              new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                              new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                              new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                            ],
                            credentials: MongoCredentials {
                              username: 'dcsweb',
                              password: 'MopG23GHLEu3GwB0',
                              source: 'admin',
                              mechanism: 'DEFAULT',
                              mechanismProperties: {}
                            },
                            compressors: [ 'none' ],
                            connectTimeoutMS: 30000,
                            directConnection: false,
                            metadata: {
                              driver: {
                                name: 'nodejs|Mongoose',
                                version: '5.1.0'
                              },
                              os: {
                                type: 'Linux',
                                name: 'linux',
                                architecture: 'x64',
                                version: '6.1.13-200.fc37.x86_64'
                              },
                              platform: 'Node.js v18.12.1, LE (unified)',
                              version: '5.1.0|7.0.0'
                            },
                            enableUtf8Validation: true,
                            forceServerObjectId: false,
                            heartbeatFrequencyMS: 10000,
                            keepAlive: true,
                            keepAliveInitialDelay: 120000,
                            loadBalanced: false,
                            localThresholdMS: 15,
                            maxConnecting: 2,
                            maxIdleTimeMS: 0,
                            maxPoolSize: 100,
                            minPoolSize: 0,
                            minHeartbeatFrequencyMS: 500,
                            monitorCommands: false,
                            noDelay: true,
                            pkFactory: { createPk: [Function: createPk] },
                            raw: false,
                            readPreference: ReadPreference {
                              mode: 'primary',
                              tags: undefined,
                              hedge: undefined,
                              maxStalenessSeconds: undefined,
                              minWireVersion: undefined
                            },
                            retryReads: true,
                            retryWrites: true,
                            serverSelectionTimeoutMS: 30000,
                            socketTimeoutMS: 0,
                            srvMaxHosts: 0,
                            srvServiceName: 'mongodb',
                            writeConcern: WriteConcern { w: 'majority' },
                            waitQueueTimeoutMS: 0,
                            zlibCompressionLevel: 0,
                            dbName: 'test',
                            userSpecifiedAuthSource: false,
                            userSpecifiedReplicaSet: false,
                            srvHost: 'dcsweb.snm3hyr.mongodb.net',
                            tls: true,
                            mongoLoggerOptions: {
                              componentSeverities: {
                                command: 'off',
                                topology: 'off',
                                serverSelection: 'off',
                                connection: 'off',
                                default: 'off'
                              },
                              maxDocumentLength: 1000,
                              logDestination: <ref *2> WriteStream {
                                connecting: false,
                                _hadError: false,
                                _parent: null,
                                _host: null,
                                _closeAfterHandlingError: false,
                                _readableState: ReadableState {
                                  objectMode: false,
                                  highWaterMark: 0,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: [],
                                  flowing: null,
                                  ended: false,
                                  endEmitted: false,
                                  reading: false,
                                  constructed: true,
                                  sync: true,
                                  needReadable: false,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  destroyed: false,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrainWriters: null,
                                  multiAwaitDrain: false,
                                  readingMore: false,
                                  dataEmitted: false,
                                  decoder: null,
                                  encoding: null,
                                  [Symbol(kPaused)]: null
                                },
                                _events: [Object: null prototype] {
                                  end: [Function: onReadableStreamEnd]
                                },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                _writableState: WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: false,
                                  needDrain: false,
                                  ending: false,
                                  ended: false,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: true,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  afterWriteTickInfo: null,
                                  buffered: [],
                                  bufferedIndex: 0,
                                  allBuffers: true,
                                  allNoop: true,
                                  pendingcb: 0,
                                  constructed: true,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  autoDestroy: true,
                                  errored: null,
                                  closed: false,
                                  closeEmitted: false,
                                  [Symbol(kOnFinished)]: []
                                },
                                allowHalfOpen: false,
                                _sockname: null,
                                _pendingData: null,
                                _pendingEncoding: '',
                                server: null,
                                _server: null,
                                columns: 140,
                                rows: 12,
                                _type: 'tty',
                                fd: 2,
                                _isStdio: true,
                                destroySoon: [Function: destroy],
                                _destroy: [Function: dummyDestroy],
                                [Symbol(async_id_symbol)]: 51,
                                [Symbol(kHandle)]: TTY {
                                  [Symbol(owner_symbol)]: [Circular *2]
                                },
                                [Symbol(lastWriteQueueSize)]: 0,
                                [Symbol(timeout)]: null,
                                [Symbol(kBuffer)]: null,
                                [Symbol(kBufferCb)]: null,
                                [Symbol(kBufferGen)]: null,
                                [Symbol(kCapture)]: false,
                                [Symbol(kSetNoDelay)]: false,
                                [Symbol(kSetKeepAlive)]: false,
                                [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                [Symbol(kBytesRead)]: 0,
                                [Symbol(kBytesWritten)]: 0
                              }
                            },
                            replicaSet: 'atlas-6h3glt-shard-0',
                            connectionType: [class Connection extends TypedEventEmitter] {
                              COMMAND_STARTED: 'commandStarted',
                              COMMAND_SUCCEEDED: 'commandSucceeded',
                              COMMAND_FAILED: 'commandFailed',
                              CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                              CLOSE: 'close',
                              MESSAGE: 'message',
                              PINNED: 'pinned',
                              UNPINNED: 'unpinned'
                            },
                            minPoolSizeCheckFrequencyMS: 100,
                            autoEncrypter: undefined,
                            [Symbol(@@mdb.enableMongoLogger)]: false
                          },
                          [Symbol(kCapture)]: false,
                          [Symbol(poolState)]: 'ready',
                          [Symbol(server)]: [Circular *21],
                          [Symbol(connections)]: List {
                            count: 0,
                            head: <ref *22> {
                              next: [Circular *22],
                              prev: [Circular *22],
                              value: null
                            }
                          },
                          [Symbol(pending)]: 0,
                          [Symbol(checkedOut)]: Set(0) {},
                          [Symbol(minPoolSizeTimer)]: undefined,
                          [Symbol(generation)]: 0,
                          [Symbol(serviceGenerations)]: Map(0) {},
                          [Symbol(connectionCounter)]: Object [Generator] {},
                          [Symbol(cancellationToken)]: CancellationToken {
                            _events: [Object: null prototype] {},
                            _eventsCount: 0,
                            _maxListeners: Infinity,
                            [Symbol(kCapture)]: false
                          },
                          [Symbol(waitQueue)]: List {
                            count: 0,
                            head: <ref *23> {
                              next: [Circular *23],
                              prev: [Circular *23],
                              value: null
                            }
                          },
                          [Symbol(metrics)]: ConnectionPoolMetrics {
                            txnConnections: 0,
                            cursorConnections: 0,
                            otherConnections: 0
                          },
                          [Symbol(processingWaitQueue)]: false
                        },
                        operationCount: 0
                      },
                      [Symbol(kCapture)]: false,
                      [Symbol(monitor)]: Monitor {
                        _events: [Object: null prototype] {
                          serverHeartbeatStarted: [Function (anonymous)],
                          serverHeartbeatSucceeded: [
                            [Function (anonymous)],
                            [Function (anonymous)]
                          ],
                          serverHeartbeatFailed: [Function (anonymous)],
                          resetServer: [Function (anonymous)]
                        },
                        _eventsCount: 4,
                        _maxListeners: undefined,
                        s: { state: 'idle' },
                        address: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                        options: {
                          connectTimeoutMS: 30000,
                          heartbeatFrequencyMS: 10000,
                          minHeartbeatFrequencyMS: 500
                        },
                        connectOptions: {
                          id: '<monitor>',
                          generation: 0,
                          connectionType: [class Connection extends TypedEventEmitter] {
                            COMMAND_STARTED: 'commandStarted',
                            COMMAND_SUCCEEDED: 'commandSucceeded',
                            COMMAND_FAILED: 'commandFailed',
                            CLUSTER_TIME_RECEIVED: 'clusterTimeReceived',
                            CLOSE: 'close',
                            MESSAGE: 'message',
                            PINNED: 'pinned',
                            UNPINNED: 'unpinned'
                          },
                          cancellationToken: CancellationToken {
                            _events: [Object: null prototype] {},
                            _eventsCount: 0,
                            _maxListeners: Infinity,
                            [Symbol(kCapture)]: false
                          },
                          hostAddress: new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017'),
                          hosts: [
                            new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                            new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                          ],
                          compressors: [ 'none' ],
                          connectTimeoutMS: 30000,
                          directConnection: false,
                          metadata: {
                            driver: {
                              name: 'nodejs|Mongoose',
                              version: '5.1.0'
                            },
                            os: {
                              type: 'Linux',
                              name: 'linux',
                              architecture: 'x64',
                              version: '6.1.13-200.fc37.x86_64'
                            },
                            platform: 'Node.js v18.12.1, LE (unified)',
                            version: '5.1.0|7.0.0'
                          },
                          enableUtf8Validation: true,
                          forceServerObjectId: false,
                          heartbeatFrequencyMS: 10000,
                          keepAlive: true,
                          keepAliveInitialDelay: 120000,
                          loadBalanced: false,
                          localThresholdMS: 15,
                          maxConnecting: 2,
                          maxIdleTimeMS: 0,
                          maxPoolSize: 100,
                          minPoolSize: 0,
                          minHeartbeatFrequencyMS: 500,
                          monitorCommands: false,
                          noDelay: true,
                          pkFactory: { createPk: [Function: createPk] },
                          raw: false,
                          readPreference: ReadPreference {
                            mode: 'primary',
                            tags: undefined,
                            hedge: undefined,
                            maxStalenessSeconds: undefined,
                            minWireVersion: undefined
                          },
                          retryReads: true,
                          retryWrites: true,
                          serverSelectionTimeoutMS: 30000,
                          socketTimeoutMS: 0,
                          srvMaxHosts: 0,
                          srvServiceName: 'mongodb',
                          writeConcern: WriteConcern { w: 'majority' },
                          waitQueueTimeoutMS: 0,
                          zlibCompressionLevel: 0,
                          dbName: 'test',
                          userSpecifiedAuthSource: false,
                          userSpecifiedReplicaSet: false,
                          srvHost: 'dcsweb.snm3hyr.mongodb.net',
                          tls: true,
                          mongoLoggerOptions: {
                            componentSeverities: {
                              command: 'off',
                              topology: 'off',
                              serverSelection: 'off',
                              connection: 'off',
                              default: 'off'
                            },
                            maxDocumentLength: 1000,
                            logDestination: <ref *2> WriteStream {
                              connecting: false,
                              _hadError: false,
                              _parent: null,
                              _host: null,
                              _closeAfterHandlingError: false,
                              _readableState: ReadableState {
                                objectMode: false,
                                highWaterMark: 0,
                                buffer: BufferList { head: null, tail: null, length: 0 },
                                length: 0,
                                pipes: [],
                                flowing: null,
                                ended: false,
                                endEmitted: false,
                                reading: false,
                                constructed: true,
                                sync: true,
                                needReadable: false,
                                emittedReadable: false,
                                readableListening: false,
                                resumeScheduled: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                destroyed: false,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                defaultEncoding: 'utf8',
                                awaitDrainWriters: null,
                                multiAwaitDrain: false,
                                readingMore: false,
                                dataEmitted: false,
                                decoder: null,
                                encoding: null,
                                [Symbol(kPaused)]: null
                              },
                              _events: [Object: null prototype] {
                                end: [Function: onReadableStreamEnd]
                              },
                              _eventsCount: 1,
                              _maxListeners: undefined,
                              _writableState: WritableState {
                                objectMode: false,
                                highWaterMark: 16384,
                                finalCalled: false,
                                needDrain: false,
                                ending: false,
                                ended: false,
                                finished: false,
                                destroyed: false,
                                decodeStrings: false,
                                defaultEncoding: 'utf8',
                                length: 0,
                                writing: false,
                                corked: 0,
                                sync: true,
                                bufferProcessing: false,
                                onwrite: [Function: bound onwrite],
                                writecb: null,
                                writelen: 0,
                                afterWriteTickInfo: null,
                                buffered: [],
                                bufferedIndex: 0,
                                allBuffers: true,
                                allNoop: true,
                                pendingcb: 0,
                                constructed: true,
                                prefinished: false,
                                errorEmitted: false,
                                emitClose: false,
                                autoDestroy: true,
                                errored: null,
                                closed: false,
                                closeEmitted: false,
                                [Symbol(kOnFinished)]: []
                              },
                              allowHalfOpen: false,
                              _sockname: null,
                              _pendingData: null,
                              _pendingEncoding: '',
                              server: null,
                              _server: null,
                              columns: 140,
                              rows: 12,
                              _type: 'tty',
                              fd: 2,
                              _isStdio: true,
                              destroySoon: [Function: destroy],
                              _destroy: [Function: dummyDestroy],
                              [Symbol(async_id_symbol)]: 51,
                              [Symbol(kHandle)]: TTY {
                                [Symbol(owner_symbol)]: [Circular *2]
                              },
                              [Symbol(lastWriteQueueSize)]: 0,
                              [Symbol(timeout)]: null,
                              [Symbol(kBuffer)]: null,
                              [Symbol(kBufferCb)]: null,
                              [Symbol(kBufferGen)]: null,
                              [Symbol(kCapture)]: false,
                              [Symbol(kSetNoDelay)]: false,
                              [Symbol(kSetKeepAlive)]: false,
                              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                              [Symbol(kBytesRead)]: 0,
                              [Symbol(kBytesWritten)]: 0
                            }
                          },
                          replicaSet: 'atlas-6h3glt-shard-0',
                          useBigInt64: false,
                          promoteLongs: true,
                          promoteValues: true,
                          promoteBuffers: true,
                          [Symbol(@@mdb.enableMongoLogger)]: false
                        },
                        [Symbol(kCapture)]: false,
                        [Symbol(server)]: [Circular *21],
                        [Symbol(connection)]: Connection {
                          _events: [Object: null prototype] {},
                          _eventsCount: 0,
                          _maxListeners: undefined,
                          id: '<monitor>',
                          address: '54.207.205.239:27017',
                          socketTimeoutMS: 0,
                          monitorCommands: false,
                          serverApi: undefined,
                          closed: false,
                          helloOk: true,
                          lastHelloMS: 67,
                          [Symbol(kCapture)]: false,
                          [Symbol(hello)]: {
                            helloOk: true,
                            topologyVersion: {
                              processId: new ObjectId("6402390def6293ac4d778e4a"),
                              counter: 3
                            },
                            hosts: [
                              'ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017',
                              'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                              'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'
                            ],
                            setName: 'atlas-6h3glt-shard-0',
                            setVersion: 1,
                            ismaster: false,
                            secondary: true,
                            primary: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017',
                            tags: {
                              workloadType: 'OPERATIONAL',
                              region: 'SA_EAST_1',
                              nodeType: 'ELECTABLE',
                              provider: 'AWS'
                            },
                            me: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017',
                            lastWrite: {
                              opTime: {
                                ts: new Timestamp({ t: 1678058605, i: 7 }),
                                t: 28
                              },
                              lastWriteDate: 2023-03-05T23:23:25.000Z,
                              majorityOpTime: {
                                ts: new Timestamp({ t: 1678058605, i: 7 }),
                                t: 28
                              },
                              majorityWriteDate: 2023-03-05T23:23:25.000Z
                            },
                            maxBsonObjectSize: 16777216,
                            maxMessageSizeBytes: 48000000,
                            maxWriteBatchSize: 100000,
                            localTime: 2023-03-05T23:23:26.023Z,
                            logicalSessionTimeoutMinutes: 30,
                            connectionId: 43057,
                            minWireVersion: 0,
                            maxWireVersion: 13,
                            readOnly: false,
                            ok: 1,
                            '$clusterTime': {
                              clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                              signature: {
                                hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                                keyId: new Long("7168531580753805315")
                              }
                            },
                            operationTime: new Timestamp({ t: 1678058605, i: 7 }),
                            isWritablePrimary: false
                          },
                          [Symbol(clusterTime)]: {
                            clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                            signature: {
                              hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                              keyId: new Long("7168531580753805315")
                            }
                          },
                          [Symbol(description)]: StreamDescription {
                            address: '54.207.205.239:27017',
                            type: 'RSSecondary',
                            minWireVersion: 0,
                            maxWireVersion: 13,
                            maxBsonObjectSize: 16777216,
                            maxMessageSizeBytes: 48000000,
                            maxWriteBatchSize: 100000,
                            logicalSessionTimeoutMinutes: 30,
                            loadBalanced: false,
                            compressors: [ 'none' ]
                          },
                          [Symbol(generation)]: 0,
                          [Symbol(lastUseTime)]: 531508,
                          [Symbol(queue)]: Map(0) {},
                          [Symbol(messageStream)]: <ref *24> MessageStream {
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [
                                <ref *25> TLSSocket {
                                  _tlsOptions: {
                                    allowHalfOpen: undefined,
                                    pipe: false,
                                    secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    isServer: false,
                                    requestCert: true,
                                    rejectUnauthorized: true,
                                    session: undefined,
                                    ALPNProtocols: undefined,
                                    requestOCSP: undefined,
                                    enableTrace: undefined,
                                    pskCallback: undefined,
                                    highWaterMark: undefined,
                                    onread: undefined,
                                    signal: undefined
                                  },
                                  _secureEstablished: true,
                                  _securePending: false,
                                  _newSessionPending: false,
                                  _controlReleased: true,
                                  secureConnecting: false,
                                  _SNICallback: null,
                                  servername: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                                  alpnProtocol: false,
                                  authorized: true,
                                  authorizationError: null,
                                  encrypted: true,
                                  _events: [Object: null prototype] {
                                    end: [
                                      [Function: onReadableStreamEnd],
                                      [Function: bound onceWrapper] {
                                        listener: [Function: onend]
                                      }
                                    ],
                                    newListener: [
                                      [Function: keylogNewListener],
                                      [Function: newListener]
                                    ],
                                    secure: [Function: onConnectSecure],
                                    close: [
                                      [Function (anonymous)],
                                      [Function: bound onceWrapper] {
                                        listener: [Function: onclose]
                                      }
                                    ],
                                    timeout: [Function (anonymous)],
                                    error: [
                                      [Function: onerror],
                                      [Function (anonymous)]
                                    ],
                                    data: [Function: ondata],
                                    unpipe: [Function: onunpipe],
                                    finish: [Function: bound onceWrapper] {
                                      listener: [Function: onfinish]
                                    }
                                  },
                                  _eventsCount: 9,
                                  connecting: false,
                                  _hadError: false,
                                  _parent: null,
                                  _host: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                                  _closeAfterHandlingError: false,
                                  _readableState: ReadableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                    length: 0,
                                    pipes: [ [Circular *24] ],
                                    flowing: true,
                                    ended: false,
                                    endEmitted: false,
                                    reading: true,
                                    constructed: true,
                                    sync: false,
                                    needReadable: true,
                                    emittedReadable: false,
                                    readableListening: false,
                                    resumeScheduled: false,
                                    errorEmitted: false,
                                    emitClose: false,
                                    autoDestroy: true,
                                    destroyed: false,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    defaultEncoding: 'utf8',
                                    awaitDrainWriters: null,
                                    multiAwaitDrain: false,
                                    readingMore: false,
                                    dataEmitted: true,
                                    decoder: null,
                                    encoding: null,
                                    [Symbol(kPaused)]: false
                                  },
                                  _maxListeners: undefined,
                                  _writableState: WritableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    finalCalled: false,
                                    needDrain: false,
                                    ending: false,
                                    ended: false,
                                    finished: false,
                                    destroyed: false,
                                    decodeStrings: false,
                                    defaultEncoding: 'utf8',
                                    length: 0,
                                    writing: false,
                                    corked: 0,
                                    sync: false,
                                    bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                    writecb: null,
                                    writelen: 0,
                                    afterWriteTickInfo: null,
                                    buffered: [],
                                    bufferedIndex: 0,
                                    allBuffers: true,
                                    allNoop: true,
                                    pendingcb: 0,
                                    constructed: true,
                                    prefinished: false,
                                    errorEmitted: false,
                                    emitClose: false,
                                    autoDestroy: true,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    [Symbol(kOnFinished)]: []
                                  },
                                  allowHalfOpen: false,
                                  _sockname: null,
                                  _pendingData: null,
                                  _pendingEncoding: '',
                                  server: undefined,
                                  _server: null,
                                  ssl: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *25]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *25]
                                  },
                                  _requestCert: true,
                                  _rejectUnauthorized: true,
                                  timeout: 0,
                                  _peername: {
                                    address: '54.207.205.239',
                                    family: 'IPv4',
                                    port: 27017
                                  },
                                  [Symbol(res)]: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *25]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *25]
                                  },
                                  [Symbol(verified)]: true,
                                  [Symbol(pendingSession)]: null,
                                  [Symbol(async_id_symbol)]: 122,
                                  [Symbol(kHandle)]: TLSWrap {
                                    _parent: TCP {
                                      reading: [Getter/Setter],
                                      onconnection: null,
                                      [Symbol(owner_symbol)]: [Circular *25]
                                    },
                                    _parentWrap: undefined,
                                    _secureContext: SecureContext {
                                      context: SecureContext {}
                                    },
                                    reading: true,
                                    onkeylog: [Function: onkeylog],
                                    onhandshakestart: {},
                                    onhandshakedone: [Function (anonymous)],
                                    onocspresponse: [Function: onocspresponse],
                                    onnewsession: [Function: onnewsessionclient],
                                    onerror: [Function: onerror],
                                    [Symbol(owner_symbol)]: [Circular *25]
                                  },
                                  [Symbol(lastWriteQueueSize)]: 0,
                                  [Symbol(timeout)]: Timeout {
                                    _idleTimeout: -1,
                                    _idlePrev: null,
                                    _idleNext: null,
                                    _idleStart: 16476,
                                    _onTimeout: null,
                                    _timerArgs: undefined,
                                    _repeat: null,
                                    _destroyed: true,
                                    [Symbol(refed)]: false,
                                    [Symbol(kHasPrimitive)]: false,
                                    [Symbol(asyncId)]: 145,
                                    [Symbol(triggerId)]: 122
                                  },
                                  [Symbol(kBuffer)]: null,
                                  [Symbol(kBufferCb)]: null,
                                  [Symbol(kBufferGen)]: null,
                                  [Symbol(kCapture)]: false,
                                  [Symbol(kSetNoDelay)]: true,
                                  [Symbol(kSetKeepAlive)]: true,
                                  [Symbol(kSetKeepAliveInitialDelay)]: 0,
                                  [Symbol(kBytesRead)]: 0,
                                  [Symbol(kBytesWritten)]: 0,
                                  [Symbol(connect-options)]: {
                                    rejectUnauthorized: true,
                                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                                    checkServerIdentity: [Function: checkServerIdentity],
                                    minDHSize: 1024,
                                    host: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                                    port: 27017,
                                    servername: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                                    singleUse: true
                                  },
                                  [Symbol(disable-renegotiation)]: true
                                }
                              ],
                              flowing: true,
                              ended: false,
                              endEmitted: false,
                              reading: true,
                              constructed: true,
                              sync: false,
                              needReadable: true,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: true,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: true,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: false
                            },
                            _events: [Object: null prototype] {
                              message: [Function (anonymous)],
                              error: [
                                [Function: onerror],
                                [Function (anonymous)]
                              ],
                              unpipe: [Function: onunpipe],
                              close: [Function: bound onceWrapper] {
                                listener: [Function: onclose]
                              },
                              finish: [Function: bound onceWrapper] {
                                listener: [Function: onfinish]
                              },
                              end: [Function: bound onceWrapper] {
                                listener: [Function: onend]
                              },
                              data: [Function: ondata]
                            },
                            _eventsCount: 7,
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: true,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: false,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: true,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: true,
                            isMonitoringConnection: true,
                            maxBsonMessageSize: 67108864,
                            [Symbol(kCapture)]: false,
                            [Symbol(buffer)]: BufferPool {
                              buffers: List {
                                count: 0,
                                head: <ref *26> {
                                  next: [Circular *26],
                                  prev: [Circular *26],
                                  value: null
                                }
                              },
                              totalByteLength: 0
                            }
                          },
                          [Symbol(stream)]: <ref *25> TLSSocket {
                            _tlsOptions: {
                              allowHalfOpen: undefined,
                              pipe: false,
                              secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              isServer: false,
                              requestCert: true,
                              rejectUnauthorized: true,
                              session: undefined,
                              ALPNProtocols: undefined,
                              requestOCSP: undefined,
                              enableTrace: undefined,
                              pskCallback: undefined,
                              highWaterMark: undefined,
                              onread: undefined,
                              signal: undefined
                            },
                            _secureEstablished: true,
                            _securePending: false,
                            _newSessionPending: false,
                            _controlReleased: true,
                            secureConnecting: false,
                            _SNICallback: null,
                            servername: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                            alpnProtocol: false,
                            authorized: true,
                            authorizationError: null,
                            encrypted: true,
                            _events: [Object: null prototype] {
                              end: [
                                [Function: onReadableStreamEnd],
                                [Function: bound onceWrapper] {
                                  listener: [Function: onend]
                                }
                              ],
                              newListener: [
                                [Function: keylogNewListener],
                                [Function: newListener]
                              ],
                              secure: [Function: onConnectSecure],
                              close: [
                                [Function (anonymous)],
                                [Function: bound onceWrapper] {
                                  listener: [Function: onclose]
                                }
                              ],
                              timeout: [Function (anonymous)],
                              error: [
                                [Function: onerror],
                                [Function (anonymous)]
                              ],
                              data: [Function: ondata],
                              unpipe: [Function: onunpipe],
                              finish: [Function: bound onceWrapper] {
                                listener: [Function: onfinish]
                              }
                            },
                            _eventsCount: 9,
                            connecting: false,
                            _hadError: false,
                            _parent: null,
                            _host: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                            _closeAfterHandlingError: false,
                            _readableState: ReadableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              buffer: BufferList { head: null, tail: null, length: 0 },
                              length: 0,
                              pipes: [
                                <ref *24> MessageStream {
                                  _readableState: ReadableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                    length: 0,
                                    pipes: [ [Circular *25] ],
                                    flowing: true,
                                    ended: false,
                                    endEmitted: false,
                                    reading: true,
                                    constructed: true,
                                    sync: false,
                                    needReadable: true,
                                    emittedReadable: false,
                                    readableListening: false,
                                    resumeScheduled: false,
                                    errorEmitted: false,
                                    emitClose: true,
                                    autoDestroy: true,
                                    destroyed: false,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    defaultEncoding: 'utf8',
                                    awaitDrainWriters: null,
                                    multiAwaitDrain: false,
                                    readingMore: false,
                                    dataEmitted: true,
                                    decoder: null,
                                    encoding: null,
                                    [Symbol(kPaused)]: false
                                  },
                                  _events: [Object: null prototype] {
                                    message: [Function (anonymous)],
                                    error: [
                                      [Function: onerror],
                                      [Function (anonymous)]
                                    ],
                                    unpipe: [Function: onunpipe],
                                    close: [Function: bound onceWrapper] {
                                      listener: [Function: onclose]
                                    },
                                    finish: [Function: bound onceWrapper] {
                                      listener: [Function: onfinish]
                                    },
                                    end: [Function: bound onceWrapper] {
                                      listener: [Function: onend]
                                    },
                                    data: [Function: ondata]
                                  },
                                  _eventsCount: 7,
                                  _maxListeners: undefined,
                                  _writableState: WritableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    finalCalled: false,
                                    needDrain: false,
                                    ending: false,
                                    ended: false,
                                    finished: false,
                                    destroyed: false,
                                    decodeStrings: true,
                                    defaultEncoding: 'utf8',
                                    length: 0,
                                    writing: false,
                                    corked: 0,
                                    sync: false,
                                    bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                    writecb: null,
                                    writelen: 0,
                                    afterWriteTickInfo: null,
                                    buffered: [],
                                    bufferedIndex: 0,
                                    allBuffers: true,
                                    allNoop: true,
                                    pendingcb: 0,
                                    constructed: true,
                                    prefinished: false,
                                    errorEmitted: false,
                                    emitClose: true,
                                    autoDestroy: true,
                                    errored: null,
                                    closed: false,
                                    closeEmitted: false,
                                    [Symbol(kOnFinished)]: []
                                  },
                                  allowHalfOpen: true,
                                  isMonitoringConnection: true,
                                  maxBsonMessageSize: 67108864,
                                  [Symbol(kCapture)]: false,
                                  [Symbol(buffer)]: BufferPool {
                                    buffers: List {
                                      count: 0,
                                      head: <ref *26> {
                                        next: [Circular *26],
                                        prev: [Circular *26],
                                        value: null
                                      }
                                    },
                                    totalByteLength: 0
                                  }
                                }
                              ],
                              flowing: true,
                              ended: false,
                              endEmitted: false,
                              reading: true,
                              constructed: true,
                              sync: false,
                              needReadable: true,
                              emittedReadable: false,
                              readableListening: false,
                              resumeScheduled: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              destroyed: false,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              defaultEncoding: 'utf8',
                              awaitDrainWriters: null,
                              multiAwaitDrain: false,
                              readingMore: false,
                              dataEmitted: true,
                              decoder: null,
                              encoding: null,
                              [Symbol(kPaused)]: false
                            },
                            _maxListeners: undefined,
                            _writableState: WritableState {
                              objectMode: false,
                              highWaterMark: 16384,
                              finalCalled: false,
                              needDrain: false,
                              ending: false,
                              ended: false,
                              finished: false,
                              destroyed: false,
                              decodeStrings: false,
                              defaultEncoding: 'utf8',
                              length: 0,
                              writing: false,
                              corked: 0,
                              sync: false,
                              bufferProcessing: false,
                              onwrite: [Function: bound onwrite],
                              writecb: null,
                              writelen: 0,
                              afterWriteTickInfo: null,
                              buffered: [],
                              bufferedIndex: 0,
                              allBuffers: true,
                              allNoop: true,
                              pendingcb: 0,
                              constructed: true,
                              prefinished: false,
                              errorEmitted: false,
                              emitClose: false,
                              autoDestroy: true,
                              errored: null,
                              closed: false,
                              closeEmitted: false,
                              [Symbol(kOnFinished)]: []
                            },
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: undefined,
                            _server: null,
                            ssl: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *25]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *25]
                            },
                            _requestCert: true,
                            _rejectUnauthorized: true,
                            timeout: 0,
                            _peername: {
                              address: '54.207.205.239',
                              family: 'IPv4',
                              port: 27017
                            },
                            [Symbol(res)]: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *25]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *25]
                            },
                            [Symbol(verified)]: true,
                            [Symbol(pendingSession)]: null,
                            [Symbol(async_id_symbol)]: 122,
                            [Symbol(kHandle)]: TLSWrap {
                              _parent: TCP {
                                reading: [Getter/Setter],
                                onconnection: null,
                                [Symbol(owner_symbol)]: [Circular *25]
                              },
                              _parentWrap: undefined,
                              _secureContext: SecureContext {
                                context: SecureContext {}
                              },
                              reading: true,
                              onkeylog: [Function: onkeylog],
                              onhandshakestart: {},
                              onhandshakedone: [Function (anonymous)],
                              onocspresponse: [Function: onocspresponse],
                              onnewsession: [Function: onnewsessionclient],
                              onerror: [Function: onerror],
                              [Symbol(owner_symbol)]: [Circular *25]
                            },
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: Timeout {
                              _idleTimeout: -1,
                              _idlePrev: null,
                              _idleNext: null,
                              _idleStart: 16476,
                              _onTimeout: null,
                              _timerArgs: undefined,
                              _repeat: null,
                              _destroyed: true,
                              [Symbol(refed)]: false,
                              [Symbol(kHasPrimitive)]: false,
                              [Symbol(asyncId)]: 145,
                              [Symbol(triggerId)]: 122
                            },
                            [Symbol(kBuffer)]: null,
                            [Symbol(kBufferCb)]: null,
                            [Symbol(kBufferGen)]: null,
                            [Symbol(kCapture)]: false,
                            [Symbol(kSetNoDelay)]: true,
                            [Symbol(kSetKeepAlive)]: true,
                            [Symbol(kSetKeepAliveInitialDelay)]: 0,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0,
                            [Symbol(connect-options)]: {
                              rejectUnauthorized: true,
                              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                              checkServerIdentity: [Function: checkServerIdentity],
                              minDHSize: 1024,
                              host: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                              port: 27017,
                              servername: 'ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net',
                              singleUse: true
                            },
                            [Symbol(disable-renegotiation)]: true
                          },
                          [Symbol(delayedTimeoutId)]: null
                        },
                        [Symbol(cancellationToken)]: CancellationToken {
                          _events: [Object: null prototype] {},
                          _eventsCount: 0,
                          _maxListeners: Infinity,
                          [Symbol(kCapture)]: false
                        },
                        [Symbol(monitorId)]: MonitorInterval {
                          isExpeditedCallToFnScheduled: true,
                          stopped: false,
                          isExecutionInProgress: false,
                          hasExecutedOnce: false,
                          _executeAndReschedule: [Function (anonymous)],
                          fn: [Function (anonymous)],
                          lastExecutionEnded: 531577,
                          heartbeatFrequencyMS: 10000,
                          minHeartbeatFrequencyMS: 500,
                          timerId: Timeout {
                            _idleTimeout: 499,
                            _idlePrev: [TimersList],
                            _idleNext: [TimersList],
                            _idleStart: 16480,
                            _onTimeout: [Function (anonymous)],
                            _timerArgs: undefined,
                            _repeat: null,
                            _destroyed: false,
                            [Symbol(refed)]: true,
                            [Symbol(kHasPrimitive)]: false,
                            [Symbol(asyncId)]: 172,
                            [Symbol(triggerId)]: 167
                          }
                        }
                      }
                    }
                  },
                  credentials: MongoCredentials {
                    username: 'dcsweb',
                    password: 'MopG23GHLEu3GwB0',
                    source: 'admin',
                    mechanism: 'DEFAULT',
                    mechanismProperties: {}
                  },
                  clusterTime: {
                    clusterTime: new Timestamp({ t: 1678058605, i: 7 }),
                    signature: {
                      hash: <Buffer 0c b8 99 e1 01 33 3e b5 cd 0f e7 64 68 a4 8f c6 08 06 e4 69>,
                      keyId: new Long("7168531580753805315")
                    }
                  },
                  connectionTimers: Set(0) {},
                  detectShardedTopology: [Function: detectShardedTopology],
                  detectSrvRecords: [Function: detectSrvRecords],
                  srvPoller: SrvPoller {
                    _events: [Object: null prototype] {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    srvHost: 'dcsweb.snm3hyr.mongodb.net',
                    srvMaxHosts: 0,
                    srvServiceName: 'mongodb',
                    rescanSrvIntervalMS: 60000,
                    heartbeatFrequencyMS: 10000,
                    haMode: false,
                    generation: 0,
                    _timeout: undefined,
                    [Symbol(kCapture)]: false
                  }
                },
                client: [Circular *3],
                [Symbol(kCapture)]: false,
                [Symbol(waitQueue)]: List {
                  count: 0,
                  head: <ref *27> {
                    next: [Circular *27],
                    prev: [Circular *27],
                    value: null
                  }
                }
              },
              [Symbol(kCapture)]: false,
              [Symbol(options)]: [Object: null prototype] {
                hosts: [
                  new HostAddress('ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net:27017'),
                  new HostAddress('ac-ch5veqy-shard-00-00.snm3hyr.mongodb.net:27017'),
                  new HostAddress('ac-ch5veqy-shard-00-01.snm3hyr.mongodb.net:27017')
                ],
                credentials: MongoCredentials {
                  username: 'dcsweb',
                  password: 'MopG23GHLEu3GwB0',
                  source: 'admin',
                  mechanism: 'DEFAULT',
                  mechanismProperties: {}
                },
                compressors: [ 'none' ],
                connectTimeoutMS: 30000,
                directConnection: false,
                metadata: {
                  driver: { name: 'nodejs|Mongoose', version: '5.1.0' },
                  os: {
                    type: 'Linux',
                    name: 'linux',
                    architecture: 'x64',
                    version: '6.1.13-200.fc37.x86_64'
                  },
                  platform: 'Node.js v18.12.1, LE (unified)',
                  version: '5.1.0|7.0.0'
                },
                enableUtf8Validation: true,
                forceServerObjectId: false,
                heartbeatFrequencyMS: 10000,
                keepAlive: true,
                keepAliveInitialDelay: 120000,
                loadBalanced: false,
                localThresholdMS: 15,
                maxConnecting: 2,
                maxIdleTimeMS: 0,
                maxPoolSize: 100,
                minPoolSize: 0,
                minHeartbeatFrequencyMS: 500,
                monitorCommands: false,
                noDelay: true,
                pkFactory: { createPk: [Function: createPk] },
                raw: false,
                readPreference: ReadPreference {
                  mode: 'primary',
                  tags: undefined,
                  hedge: undefined,
                  maxStalenessSeconds: undefined,
                  minWireVersion: undefined
                },
                retryReads: true,
                retryWrites: true,
                serverSelectionTimeoutMS: 30000,
                socketTimeoutMS: 0,
                srvMaxHosts: 0,
                srvServiceName: 'mongodb',
                writeConcern: WriteConcern { w: 'majority' },
                waitQueueTimeoutMS: 0,
                zlibCompressionLevel: 0,
                dbName: 'test',
                userSpecifiedAuthSource: false,
                userSpecifiedReplicaSet: false,
                srvHost: 'dcsweb.snm3hyr.mongodb.net',
                tls: true,
                mongoLoggerOptions: {
                  componentSeverities: {
                    command: 'off',
                    topology: 'off',
                    serverSelection: 'off',
                    connection: 'off',
                    default: 'off'
                  },
                  maxDocumentLength: 1000,
                  logDestination: <ref *2> WriteStream {
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: null,
                    _closeAfterHandlingError: false,
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 0,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: null,
                      ended: false,
                      endEmitted: false,
                      reading: false,
                      constructed: true,
                      sync: true,
                      needReadable: false,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: false,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: null
                    },
                    _events: [Object: null prototype] {
                      end: [Function: onReadableStreamEnd]
                    },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: true,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: null,
                    _server: null,
                    columns: 140,
                    rows: 12,
                    _type: 'tty',
                    fd: 2,
                    _isStdio: true,
                    destroySoon: [Function: destroy],
                    _destroy: [Function: dummyDestroy],
                    [Symbol(async_id_symbol)]: 51,
                    [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: false,
                    [Symbol(kSetKeepAliveInitialDelay)]: 0,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
                  }
                },
                replicaSet: 'atlas-6h3glt-shard-0',
                [Symbol(@@mdb.enableMongoLogger)]: false
              }
            },
            options: {
              enableUtf8Validation: true,
              forceServerObjectId: false,
              pkFactory: { createPk: [Function: createPk] },
              raw: false,
              readPreference: ReadPreference {
                mode: 'primary',
                tags: undefined,
                hedge: undefined,
                maxStalenessSeconds: undefined,
                minWireVersion: undefined
              },
              retryWrites: true,
              writeConcern: WriteConcern { w: 'majority' }
            },
            readPreference: ReadPreference {
              mode: 'primary',
              tags: undefined,
              hedge: undefined,
              maxStalenessSeconds: undefined,
              minWireVersion: undefined
            },
            bsonOptions: {
              raw: false,
              useBigInt64: false,
              promoteLongs: true,
              promoteValues: true,
              promoteBuffers: false,
              ignoreUndefined: false,
              bsonRegExp: false,
              serializeFunctions: false,
              fieldsAsRaw: {},
              enableUtf8Validation: true
            },
            pkFactory: { createPk: [Function: createPk] },
            readConcern: undefined,
            writeConcern: WriteConcern { w: 'majority' },
            namespace: MongoDBNamespace { db: 'test', collection: undefined }
          }
        },
        host: 'ac-ch5veqy-shard-00-02.snm3hyr.mongodb.net',
        port: 27017,
        name: 'test'
      }
    ],
    nextConnectionId: 1,
    models: {},
    events: EventEmitter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    },
    __driver: {
      Collection: [Function: NativeCollection],
      Connection: [Function: NativeConnection] {
        STATES: [Object: null prototype] {
          '0': 'disconnected',
          '1': 'connected',
          '2': 'connecting',
          '3': 'disconnecting',
          '99': 'uninitialized',
          disconnected: 0,
          connected: 1,
          connecting: 2,
          disconnecting: 3,
          uninitialized: 99
        }
      }
    },
    options: {
      pluralization: true,
      autoIndex: true,
      autoCreate: true,
      strictQuery: true,
      [Symbol(mongoose:default)]: true
    },
    _pluralize: [Function: pluralize],
    Schema: [Function: Schema] {
      reserved: [Object: null prototype] {
        validate: 1,
        toObject: 1,
        save: 1,
        remove: 1,
        populated: 1,
        isNew: 1,
        isModified: 1,
        init: 1,
        get: 1,
        errors: 1,
        collection: 1,
        removeListener: 1,
        listeners: 1,
        emit: 1,
        prototype: 1
      },
      Types: {
        String: [Function: SchemaString] {
          schemaName: 'String',
          defaultOptions: {},
          _cast: [Function: castString],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          get: [Function (anonymous)],
          set: [Function: set],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Number: [Function: SchemaNumber] {
          get: [Function (anonymous)],
          set: [Function: set],
          _cast: [Function: castNumber],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          schemaName: 'Number',
          defaultOptions: {},
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Boolean: [Function: SchemaBoolean] {
          schemaName: 'Boolean',
          defaultOptions: {},
          _cast: [Function: castBoolean] {
            convertToTrue: Set(5) { true, 'true', 1, '1', 'yes' },
            convertToFalse: Set(5) { false, 'false', 0, '0', 'no' }
          },
          set: [Function: set],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          '$conditionalHandlers': {
            '$type': [Function (anonymous)],
            '$exists': [Function (anonymous)],
            '$nin': [Function: handle$in],
            '$ne': [Function: handleSingle],
            '$in': [Function: handle$in],
            '$eq': [Function: handleSingle],
            '$all': [Function: handleArray]
          }
        },
        DocumentArray: [Function: DocumentArrayPath] {
          schemaName: 'DocumentArray',
          options: { castNonArrays: true },
          defaultOptions: {},
          set: [Function: set]
        },
        Subdocument: [Function: SubdocumentPath] {
          defaultOptions: {},
          set: [Function: set]
        },
        Array: [Function: SchemaArray] {
          schemaName: 'Array',
          options: { castNonArrays: true },
          defaultOptions: {},
          set: [Function: set],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Buffer: [Function: SchemaBuffer] {
          schemaName: 'Buffer',
          defaultOptions: {},
          _checkRequired: [Function (anonymous)],
          set: [Function: set],
          checkRequired: [Function (anonymous)]
        },
        Date: [Function: SchemaDate] {
          schemaName: 'Date',
          defaultOptions: {},
          _cast: [Function: castDate],
          set: [Function: set],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        ObjectId: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Mixed: [Function: Mixed] {
          schemaName: 'Mixed',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set]
        },
        Decimal: [Function: Decimal128] {
          schemaName: 'Decimal128',
          defaultOptions: {},
          _cast: [Function: castDecimal128],
          set: [Function: set],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Decimal128: [Function: Decimal128] {
          schemaName: 'Decimal128',
          defaultOptions: {},
          _cast: [Function: castDecimal128],
          set: [Function: set],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Map: [class Map extends SchemaType] {
          schemaName: 'Map',
          defaultOptions: {}
        },
        UUID: [Function: SchemaUUID] {
          schemaName: 'UUID',
          defaultOptions: {},
          _cast: [Function (anonymous)],
          set: [Function: set],
          cast: [Function: cast],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Oid: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Object: [Function: Mixed] {
          schemaName: 'Mixed',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set]
        },
        Bool: [Function: SchemaBoolean] {
          schemaName: 'Boolean',
          defaultOptions: {},
          _cast: [Function: castBoolean] {
            convertToTrue: Set(5) { true, 'true', 1, '1', 'yes' },
            convertToFalse: Set(5) { false, 'false', 0, '0', 'no' }
          },
          set: [Function: set],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          '$conditionalHandlers': {
            '$type': [Function (anonymous)],
            '$exists': [Function (anonymous)],
            '$nin': [Function: handle$in],
            '$ne': [Function: handleSingle],
            '$in': [Function: handle$in],
            '$eq': [Function: handleSingle],
            '$all': [Function: handleArray]
          }
        },
        ObjectID: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        }
      },
      ObjectId: [Function: ObjectId] {
        schemaName: 'ObjectId',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        _checkRequired: [Function (anonymous)],
        _cast: [Function: castObjectId],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      }
    },
    model: [Function (anonymous)],
    plugins: [
      [ [Function: removeSubdocs], { deduplicate: true } ],
      [ [Function: saveSubdocs], { deduplicate: true } ],
      [
        [Function: shardingPlugin] {
          storeShard: [Function: storeShard]
        },
        { deduplicate: true }
      ],
      [ [Function: trackTransaction], { deduplicate: true } ],
      [ [Function: validateBeforeSave], { deduplicate: true } ]
    ],
    default: [Circular *1],
    mongoose: [Circular *1],
    cast: [Function: cast],
    STATES: [Object: null prototype] {
      '0': 'disconnected',
      '1': 'connected',
      '2': 'connecting',
      '3': 'disconnecting',
      '99': 'uninitialized',
      disconnected: 0,
      connected: 1,
      connecting: 2,
      disconnecting: 3,
      uninitialized: 99
    },
    setDriver: [Function: setDriver],
    set: [Function (anonymous)],
    get: [Function (anonymous)],
    createConnection: [Function (anonymous)],
    connect: [AsyncFunction: connect],
    disconnect: [AsyncFunction: disconnect],
    startSession: [Function (anonymous)],
    pluralize: [Function (anonymous)],
    deleteModel: [Function (anonymous)],
    modelNames: [Function (anonymous)],
    plugin: [Function (anonymous)],
    version: '7.0.0',
    Mongoose: [Function: Mongoose],
    SchemaType: [Function: SchemaType] {
      cast: [Function: cast],
      set: [Function: set],
      get: [Function (anonymous)],
      _isRef: [Function (anonymous)],
      checkRequired: [Function (anonymous)],
      CastError: [class CastError extends MongooseError],
      ValidatorError: [class ValidatorError extends MongooseError]
    },
    SchemaTypes: {
      String: [Function: SchemaString] {
        schemaName: 'String',
        defaultOptions: {},
        _cast: [Function: castString],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        get: [Function (anonymous)],
        set: [Function: set],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Number: [Function: SchemaNumber] {
        get: [Function (anonymous)],
        set: [Function: set],
        _cast: [Function: castNumber],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        schemaName: 'Number',
        defaultOptions: {},
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Boolean: [Function: SchemaBoolean] {
        schemaName: 'Boolean',
        defaultOptions: {},
        _cast: [Function: castBoolean] {
          convertToTrue: Set(5) { true, 'true', 1, '1', 'yes' },
          convertToFalse: Set(5) { false, 'false', 0, '0', 'no' }
        },
        set: [Function: set],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)],
        '$conditionalHandlers': {
          '$type': [Function (anonymous)],
          '$exists': [Function (anonymous)],
          '$nin': [Function: handle$in],
          '$ne': [Function: handleSingle],
          '$in': [Function: handle$in],
          '$eq': [Function: handleSingle],
          '$all': [Function: handleArray]
        }
      },
      DocumentArray: [Function: DocumentArrayPath] {
        schemaName: 'DocumentArray',
        options: { castNonArrays: true },
        defaultOptions: {},
        set: [Function: set]
      },
      Subdocument: [Function: SubdocumentPath] {
        defaultOptions: {},
        set: [Function: set]
      },
      Array: [Function: SchemaArray] {
        schemaName: 'Array',
        options: { castNonArrays: true },
        defaultOptions: {},
        set: [Function: set],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Buffer: [Function: SchemaBuffer] {
        schemaName: 'Buffer',
        defaultOptions: {},
        _checkRequired: [Function (anonymous)],
        set: [Function: set],
        checkRequired: [Function (anonymous)]
      },
      Date: [Function: SchemaDate] {
        schemaName: 'Date',
        defaultOptions: {},
        _cast: [Function: castDate],
        set: [Function: set],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      ObjectId: [Function: ObjectId] {
        schemaName: 'ObjectId',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        _checkRequired: [Function (anonymous)],
        _cast: [Function: castObjectId],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Mixed: [Function: Mixed] {
        schemaName: 'Mixed',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set]
      },
      Decimal: [Function: Decimal128] {
        schemaName: 'Decimal128',
        defaultOptions: {},
        _cast: [Function: castDecimal128],
        set: [Function: set],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Decimal128: [Function: Decimal128] {
        schemaName: 'Decimal128',
        defaultOptions: {},
        _cast: [Function: castDecimal128],
        set: [Function: set],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Map: [class Map extends SchemaType] {
        schemaName: 'Map',
        defaultOptions: {}
      },
      UUID: [Function: SchemaUUID] {
        schemaName: 'UUID',
        defaultOptions: {},
        _cast: [Function (anonymous)],
        set: [Function: set],
        cast: [Function: cast],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Oid: [Function: ObjectId] {
        schemaName: 'ObjectId',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        _checkRequired: [Function (anonymous)],
        _cast: [Function: castObjectId],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Object: [Function: Mixed] {
        schemaName: 'Mixed',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set]
      },
      Bool: [Function: SchemaBoolean] {
        schemaName: 'Boolean',
        defaultOptions: {},
        _cast: [Function: castBoolean] {
          convertToTrue: Set(5) { true, 'true', 1, '1', 'yes' },
          convertToFalse: Set(5) { false, 'false', 0, '0', 'no' }
        },
        set: [Function: set],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)],
        '$conditionalHandlers': {
          '$type': [Function (anonymous)],
          '$exists': [Function (anonymous)],
          '$nin': [Function: handle$in],
          '$ne': [Function: handleSingle],
          '$in': [Function: handle$in],
          '$eq': [Function: handleSingle],
          '$all': [Function: handleArray]
        }
      },
      ObjectID: [Function: ObjectId] {
        schemaName: 'ObjectId',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        _checkRequired: [Function (anonymous)],
        _cast: [Function: castObjectId],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      }
    },
    VirtualType: [Function: VirtualType],
    Types: {
      Array: [Function: MongooseArray],
      Buffer: [Function: MongooseBuffer] {
        pathSymbol: Symbol(mongoose#Buffer#_path),
        mixin: {
          _subtype: undefined,
          _markModified: [Function: _markModified],
          write: [Function: write],
          copy: [Function: copy],
          writeUInt8: [Function (anonymous)],
          writeInt8: [Function (anonymous)],
          fill: [Function (anonymous)],
          utf8Write: [Function (anonymous)],
          asciiWrite: [Function (anonymous)],
          set: [Function (anonymous)],
          writeUInt16LE: [Function (anonymous)],
          writeUInt16BE: [Function (anonymous)],
          writeUInt32LE: [Function (anonymous)],
          writeUInt32BE: [Function (anonymous)],
          writeInt16LE: [Function (anonymous)],
          writeInt16BE: [Function (anonymous)],
          writeInt32LE: [Function (anonymous)],
          writeInt32BE: [Function (anonymous)],
          writeFloatLE: [Function (anonymous)],
          writeFloatBE: [Function (anonymous)],
          writeDoubleLE: [Function (anonymous)],
          writeDoubleBE: [Function (anonymous)],
          toObject: [Function (anonymous)],
          '$toObject': [Function (anonymous)],
          toBSON: [Function (anonymous)],
          equals: [Function (anonymous)],
          subtype: [Function (anonymous)]
        },
        Binary: [class Binary extends BSONValue] {
          BSON_BINARY_SUBTYPE_DEFAULT: 0,
          BUFFER_SIZE: 256,
          SUBTYPE_DEFAULT: 0,
          SUBTYPE_FUNCTION: 1,
          SUBTYPE_BYTE_ARRAY: 2,
          SUBTYPE_UUID_OLD: 3,
          SUBTYPE_UUID: 4,
          SUBTYPE_MD5: 5,
          SUBTYPE_ENCRYPTED: 6,
          SUBTYPE_COLUMN: 7,
          SUBTYPE_USER_DEFINED: 128
        }
      },
      Embedded: [Function: ArraySubdocument] {
        _events: undefined,
        _eventsCount: 0,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames]
      },
      Document: [Function: ArraySubdocument] {
        _events: undefined,
        _eventsCount: 0,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames]
      },
      DocumentArray: [Function: MongooseDocumentArray],
      Decimal128: [class Decimal128 extends BSONValue],
      ObjectId: [class ObjectId extends BSONValue] { index: 8887672 },
      Map: [class MongooseMap extends Map],
      Subdocument: [Function: Subdocument]
    },
    Query: [Function: Query] {
      base: {
        toConstructor: [Function: toConstructor],
        setOptions: [Function (anonymous)],
        collection: [Function: collection],
        collation: [Function (anonymous)],
        '$where': [Function (anonymous)],
        where: [Function (anonymous)],
        equals: [Function: equals],
        eq: [Function: eq],
        or: [Function: or],
        nor: [Function: nor],
        and: [Function: and],
        gt: [Function (anonymous)],
        gte: [Function (anonymous)],
        lt: [Function (anonymous)],
        lte: [Function (anonymous)],
        ne: [Function (anonymous)],
        in: [Function (anonymous)],
        nin: [Function (anonymous)],
        all: [Function (anonymous)],
        regex: [Function (anonymous)],
        size: [Function (anonymous)],
        maxDistance: [Function (anonymous)],
        minDistance: [Function (anonymous)],
        mod: [Function (anonymous)],
        exists: [Function (anonymous)],
        elemMatch: [Function (anonymous)],
        within: [Function: within],
        box: [Function (anonymous)],
        polygon: [Function (anonymous)],
        circle: [Function (anonymous)],
        near: [Function: near],
        intersects: [Function: intersects],
        geometry: [Function: geometry],
        select: [Function: select],
        slice: [Function (anonymous)],
        sort: [Function (anonymous)],
        limit: [Function (anonymous)],
        skip: [Function (anonymous)],
        batchSize: [Function (anonymous)],
        comment: [Function (anonymous)],
        maxTimeMS: [Function (anonymous)],
        maxTime: [Function (anonymous)],
        hint: [Function (anonymous)],
        j: [Function: j],
        slaveOk: [Function (anonymous)],
        setReadPreference: [Function (anonymous)],
        read: [Function (anonymous)],
        r: [Function (anonymous)],
        readConcern: [Function (anonymous)],
        tailable: [Function (anonymous)],
        w: [Function: writeConcern],
        writeConcern: [Function: writeConcern],
        wTimeout: [Function: wtimeout],
        wtimeout: [Function: wtimeout],
        merge: [Function (anonymous)],
        find: [Function (anonymous)],
        _find: [AsyncFunction: _find],
        cursor: [Function (anonymous)],
        findOne: [Function (anonymous)],
        _findOne: [AsyncFunction: _findOne],
        count: [Function (anonymous)],
        _count: [AsyncFunction: _count],
        distinct: [Function (anonymous)],
        _distinct: [AsyncFunction: _distinct],
        updateMany: [Function: updateMany],
        _updateMany: [AsyncFunction (anonymous)],
        updateOne: [Function: updateOne],
        _updateOne: [AsyncFunction (anonymous)],
        replaceOne: [Function: replaceOne],
        _replaceOne: [AsyncFunction (anonymous)],
        deleteOne: [Function (anonymous)],
        _deleteOne: [AsyncFunction (anonymous)],
        deleteMany: [Function (anonymous)],
        _deleteMany: [AsyncFunction (anonymous)],
        findOneAndUpdate: [Function (anonymous)],
        _findOneAndUpdate: [AsyncFunction (anonymous)],
        findOneAndDelete: [Function (anonymous)],
        findOneAndRemove: [Function (anonymous)],
        _findOneAndRemove: [AsyncFunction (anonymous)],
        setTraceFunction: [Function (anonymous)],
        exec: [AsyncFunction: exec],
        then: [AsyncFunction (anonymous)],
        selected: [Function: selected],
        selectedInclusively: [Function: selectedInclusively],
        selectedExclusively: [Function: selectedExclusively],
        _mergeUpdate: [Function (anonymous)],
        _optionsForExec: [Function (anonymous)],
        _fieldsForExec: [Function (anonymous)],
        _updateForExec: [Function (anonymous)],
        _ensurePath: [Function (anonymous)],
        _validate: [Function (anonymous)]
      },
      'use$geoWithin': true
    },
    Model: Model { undefined },
    Document: [Function: Document] {
      _events: undefined,
      _eventsCount: 0,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      ValidationError: [class ValidationError extends MongooseError]
    },
    ObjectId: [Function: ObjectId] {
      schemaName: 'ObjectId',
      defaultOptions: {},
      get: [Function (anonymous)],
      set: [Function: set],
      _checkRequired: [Function (anonymous)],
      _cast: [Function: castObjectId],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    },
    isValidObjectId: [Function (anonymous)],
    isObjectIdOrHexString: [Function (anonymous)],
    syncIndexes: [Function (anonymous)],
    Decimal128: [Function: Decimal128] {
      schemaName: 'Decimal128',
      defaultOptions: {},
      _cast: [Function: castDecimal128],
      set: [Function: set],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      _checkRequired: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    },
    Mixed: [Function: Mixed] {
      schemaName: 'Mixed',
      defaultOptions: {},
      get: [Function (anonymous)],
      set: [Function: set]
    },
    Date: [Function: SchemaDate] {
      schemaName: 'Date',
      defaultOptions: {},
      _cast: [Function: castDate],
      set: [Function: set],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      _checkRequired: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    },
    Number: [Function: SchemaNumber] {
      get: [Function (anonymous)],
      set: [Function: set],
      _cast: [Function: castNumber],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      schemaName: 'Number',
      defaultOptions: {},
      _checkRequired: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    },
    Error: [class MongooseError extends Error] {
      messages: {
        DocumentNotFoundError: null,
        general: {
          default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
          required: 'Path `{PATH}` is required.'
        },
        Number: {
          min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
          max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
          enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
        },
        Date: {
          min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
          max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
        },
        String: {
          enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
          match: 'Path `{PATH}` is invalid ({VALUE}).',
          minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
          maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
        }
      },
      Messages: {
        DocumentNotFoundError: null,
        general: {
          default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
          required: 'Path `{PATH}` is required.'
        },
        Number: {
          min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
          max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
          enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
        },
        Date: {
          min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
          max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
        },
        String: {
          enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
          match: 'Path `{PATH}` is invalid ({VALUE}).',
          minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
          maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
        }
      },
      DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
      CastError: [class CastError extends MongooseError],
      ValidationError: [class ValidationError extends MongooseError],
      ValidatorError: [class ValidatorError extends MongooseError],
      VersionError: [class VersionError extends MongooseError],
      ParallelSaveError: [class ParallelSaveError extends MongooseError],
      OverwriteModelError: [class OverwriteModelError extends MongooseError],
      MissingSchemaError: [class MissingSchemaError extends MongooseError],
      MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
      DivergentArrayError: [class DivergentArrayError extends MongooseError],
      StrictModeError: [class StrictModeError extends MongooseError],
      StrictPopulateError: [class StrictPopulateError extends MongooseError]
    },
    now: [Function: now],
    CastError: [class CastError extends MongooseError],
    SchemaTypeOptions: [class SchemaTypeOptions],
    mongo: {
      BSON: [Getter],
      Binary: [Getter],
      BSONRegExp: [Getter],
      BSONSymbol: [Getter],
      BSONType: [Getter],
      Code: [Getter],
      DBRef: [Getter],
      Decimal128: [Getter],
      Double: [Getter],
      Int32: [Getter],
      Long: [Getter],
      MaxKey: [Getter],
      MinKey: [Getter],
      ObjectId: [Getter],
      Timestamp: [Getter],
      MongoBulkWriteError: [Getter],
      ChangeStreamCursor: [Getter],
      MongoAPIError: [Getter],
      MongoAWSError: [Getter],
      MongoBatchReExecutionError: [Getter],
      MongoChangeStreamError: [Getter],
      MongoCompatibilityError: [Getter],
      MongoCursorExhaustedError: [Getter],
      MongoCursorInUseError: [Getter],
      MongoDecompressionError: [Getter],
      MongoDriverError: [Getter],
      MongoError: [Getter],
      MongoExpiredSessionError: [Getter],
      MongoGridFSChunkError: [Getter],
      MongoGridFSStreamError: [Getter],
      MongoInvalidArgumentError: [Getter],
      MongoKerberosError: [Getter],
      MongoMissingCredentialsError: [Getter],
      MongoMissingDependencyError: [Getter],
      MongoNetworkError: [Getter],
      MongoNetworkTimeoutError: [Getter],
      MongoNotConnectedError: [Getter],
      MongoParseError: [Getter],
      MongoRuntimeError: [Getter],
      MongoServerClosedError: [Getter],
      MongoServerError: [Getter],
      MongoServerSelectionError: [Getter],
      MongoSystemError: [Getter],
      MongoTailableCursorError: [Getter],
      MongoTopologyClosedError: [Getter],
      MongoTransactionError: [Getter],
      MongoUnexpectedServerResponseError: [Getter],
      MongoWriteConcernError: [Getter],
      AbstractCursor: [Getter],
      Admin: [Getter],
      AggregationCursor: [Getter],
      CancellationToken: [Getter],
      ChangeStream: [Getter],
      ClientSession: [Getter],
      Collection: [Getter],
      Db: [Getter],
      FindCursor: [Getter],
      GridFSBucket: [Getter],
      GridFSBucketReadStream: [Getter],
      GridFSBucketWriteStream: [Getter],
      ListCollectionsCursor: [Getter],
      ListIndexesCursor: [Getter],
      MongoClient: [Getter],
      OrderedBulkOperation: [Getter],
      UnorderedBulkOperation: [Getter],
      BatchType: [Getter],
      GSSAPICanonicalizationValue: [Getter],
      AuthMechanism: [Getter],
      Compressor: [Getter],
      CURSOR_FLAGS: [Getter],
      AutoEncryptionLoggerLevel: [Getter],
      MongoErrorLabel: [Getter],
      ExplainVerbosity: [Getter],
      ServerApiVersion: [Getter],
      ReturnDocument: [Getter],
      ProfilingLevel: [Getter],
      ReadConcernLevel: [Getter],
      ReadPreferenceMode: [Getter],
      ServerType: [Getter],
      TopologyType: [Getter],
      ReadConcern: [Getter],
      ReadPreference: [Getter],
      WriteConcern: [Getter],
      CommandFailedEvent: [Getter],
      CommandStartedEvent: [Getter],
      CommandSucceededEvent: [Getter],
      ConnectionCheckedInEvent: [Getter],
      ConnectionCheckedOutEvent: [Getter],
      ConnectionCheckOutFailedEvent: [Getter],
      ConnectionCheckOutStartedEvent: [Getter],
      ConnectionClosedEvent: [Getter],
      ConnectionCreatedEvent: [Getter],
      ConnectionPoolClearedEvent: [Getter],
      ConnectionPoolClosedEvent: [Getter],
      ConnectionPoolCreatedEvent: [Getter],
      ConnectionPoolMonitoringEvent: [Getter],
      ConnectionPoolReadyEvent: [Getter],
      ConnectionReadyEvent: [Getter],
      ServerClosedEvent: [Getter],
      ServerDescriptionChangedEvent: [Getter],
      ServerHeartbeatFailedEvent: [Getter],
      ServerHeartbeatStartedEvent: [Getter],
      ServerHeartbeatSucceededEvent: [Getter],
      ServerOpeningEvent: [Getter],
      TopologyClosedEvent: [Getter],
      TopologyDescriptionChangedEvent: [Getter],
      TopologyOpeningEvent: [Getter],
      SrvPollingEvent: [Getter]
    },
    mquery: [Function: Query] {
      permissions: {
        distinct: [Function (anonymous)] {
          tailable: true,
          hint: true,
          batchSize: true,
          skip: true,
          limit: true,
          sort: true,
          slice: true,
          select: true
        },
        findOneAndRemove: [Function (anonymous)] {
          tailable: true,
          batchSize: true,
          skip: true,
          limit: true
        },
        findOneAndUpdate: [Function (anonymous)] {
          tailable: true,
          batchSize: true,
          skip: true,
          limit: true
        },
        count: [Function (anonymous)] {
          tailable: true,
          batchSize: true,
          slice: true
        }
      },
      _isPermitted: [Function (anonymous)],
      canMerge: [Function (anonymous)],
      setGlobalTraceFunction: [Function (anonymous)],
      utils: {
        clone: [Function: clone],
        cloneObject: [Function: cloneObject],
        cloneArray: [Function: cloneArray],
        merge: [Function: merge],
        mergeClone: [Function: mergeClone],
        readPref: [Function: readPref],
        readConcern: [Function: readConcern],
        toString: [Function (anonymous)],
        isObject: [Function (anonymous)],
        keys: [Function: keys],
        create: [Function: create],
        inherits: [Function (anonymous)],
        isArgumentsObject: [Function (anonymous)]
      },
      env: {
        isNode: [
          '/usr/bin/node',
          '/run/media/adrianabadin/code/3eraEntregaDF'
        ],
        isMongo: false,
        isBrowser: false,
        type: 'node'
      },
      Collection: [class NodeCollection extends Collection],
      BaseCollection: [Function: Collection] {
        methods: [
          'find',             'findOne',
          'updateMany',       'updateOne',
          'replaceOne',       'count',
          'distinct',         'findOneAndDelete',
          'findOneAndUpdate', 'aggregate',
          'findCursor',       'deleteOne',
          'deleteMany'
        ]
      }
    },
    sanitizeFilter: [Function: sanitizeFilter],
    trusted: [Function: trusted],
    skipMiddlewareFunction: [Function: skipWrappedFunction],
    overwriteMiddlewareResult: [Function: overwriteResult]
  },
  timestamp: '2023-03-05T23:23:26.447Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:23:26.765Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T23:24:22.299Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:24:22.480Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T23:24:25.923Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:24:26.069Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /login 302 70 - 10041.077 ms',
  timestamp: '2023-03-05T23:25:06.266Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login/failed 304  - 164.597 ms',
  timestamp: '2023-03-05T23:25:06.557Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 3.621 ms',
  timestamp: '2023-03-05T23:25:06.727Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T23:26:40.007Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:26:40.142Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 200 768 - 86.241 ms',
  timestamp: '2023-03-05T23:30:05.171Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 3.702 ms',
  timestamp: '2023-03-05T23:30:05.819Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1153 - 16.958 ms',
  timestamp: '2023-03-05T23:30:08.320Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.467 ms',
  timestamp: '2023-03-05T23:30:08.437Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20180.153 ms',
  timestamp: '2023-03-05T23:30:37.124Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 20.884 ms',
  timestamp: '2023-03-05T23:30:37.216Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.109 ms',
  timestamp: '2023-03-05T23:30:37.416Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T23:51:45.332Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:51:45.479Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20181.352 ms',
  timestamp: '2023-03-05T23:52:19.510Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 83.906 ms',
  timestamp: '2023-03-05T23:52:19.695Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 4.626 ms',
  timestamp: '2023-03-05T23:52:20.237Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-05T23:54:04.626Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-05T23:54:04.752Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20208.328 ms',
  timestamp: '2023-03-05T23:54:37.099Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 83.059 ms',
  timestamp: '2023-03-05T23:54:37.764Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 4.068 ms',
  timestamp: '2023-03-05T23:54:38.083Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:00:10.254Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:00:16.635Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20208.758 ms',
  timestamp: '2023-03-06T00:01:46.940Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 97.776 ms',
  timestamp: '2023-03-06T00:01:50.484Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 4.230 ms',
  timestamp: '2023-03-06T00:01:50.724Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:06:06.293Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:06:06.428Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20200.656 ms',
  timestamp: '2023-03-06T00:07:16.996Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 83.666 ms',
  timestamp: '2023-03-06T00:07:17.234Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 3.692 ms',
  timestamp: '2023-03-06T00:07:17.483Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:10:55.516Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:10:55.717Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1153 - 61.870 ms',
  timestamp: '2023-03-06T00:11:01.453Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 5.395 ms',
  timestamp: '2023-03-06T00:11:02.058Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20190.321 ms',
  timestamp: '2023-03-06T00:11:29.425Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 35.724 ms',
  timestamp: '2023-03-06T00:11:29.586Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 3.025 ms',
  timestamp: '2023-03-06T00:11:29.841Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:12:31.520Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:12:31.648Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register 200 1153 - 73.993 ms',
  timestamp: '2023-03-06T00:12:42.730Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 4.527 ms',
  timestamp: '2023-03-06T00:12:43.324Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20221.391 ms',
  timestamp: '2023-03-06T00:13:11.084Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 32.785 ms',
  timestamp: '2023-03-06T00:13:11.201Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.439 ms',
  timestamp: '2023-03-06T00:13:11.501Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:22:12.556Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:22:12.686Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20197.974 ms',
  timestamp: '2023-03-06T00:23:09.890Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 100.664 ms',
  timestamp: '2023-03-06T00:23:10.130Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 7.180 ms',
  timestamp: '2023-03-06T00:23:10.425Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:23:30.327Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:23:30.471Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20222.272 ms',
  timestamp: '2023-03-06T00:24:02.916Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 83.515 ms',
  timestamp: '2023-03-06T00:24:03.570Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 3.886 ms',
  timestamp: '2023-03-06T00:24:03.842Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:26:31.345Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:26:31.461Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:27:21.551Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:27:21.732Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:27:49.246Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:27:49.357Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20211.802 ms',
  timestamp: '2023-03-06T00:28:23.766Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 87.432 ms',
  timestamp: '2023-03-06T00:28:24.315Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 3.553 ms',
  timestamp: '2023-03-06T00:28:24.509Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:28:40.113Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:28:40.275Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:29:22.702Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:29:22.940Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20233.484 ms',
  timestamp: '2023-03-06T00:29:55.973Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 101.938 ms',
  timestamp: '2023-03-06T00:29:56.747Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 4.659 ms',
  timestamp: '2023-03-06T00:29:56.926Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:31:13.885Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:31:14.023Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20197.295 ms',
  timestamp: '2023-03-06T00:31:47.720Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 167.873 ms',
  timestamp: '2023-03-06T00:31:48.549Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 2.962 ms',
  timestamp: '2023-03-06T00:31:48.880Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:32:46.163Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:32:46.334Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:33:09.229Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:33:09.370Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20212.111 ms',
  timestamp: '2023-03-06T00:33:42.251Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 94.227 ms',
  timestamp: '2023-03-06T00:33:42.462Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 4.747 ms',
  timestamp: '2023-03-06T00:33:42.730Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:35:09.820Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:35:09.955Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20223.928 ms',
  timestamp: '2023-03-06T00:35:44.712Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 92.726 ms',
  timestamp: '2023-03-06T00:35:45.334Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 4.221 ms',
  timestamp: '2023-03-06T00:35:45.506Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:39:47.413Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:39:47.561Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:41:27.573Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:41:27.743Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Mongo Connected',
  timestamp: '2023-03-06T00:41:42.116Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:41:42.259Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:44:17.278Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T00:44:18.342Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 10210.331 ms',
  timestamp: '2023-03-06T00:44:39.915Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 109.786 ms',
  timestamp: '2023-03-06T00:44:40.139Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 5.762 ms',
  timestamp: '2023-03-06T00:44:40.478Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:46:32.872Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T00:46:34.899Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:46:57.293Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T00:46:58.208Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:47:25.279Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T00:47:26.280Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20235.465 ms',
  timestamp: '2023-03-06T00:47:56.108Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 82.644 ms',
  timestamp: '2023-03-06T00:47:56.903Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 5.042 ms',
  timestamp: '2023-03-06T00:47:57.197Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T00:53:47.830Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:53:47.940Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20202.167 ms',
  timestamp: '2023-03-06T00:54:24.835Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 81.726 ms',
  timestamp: '2023-03-06T00:54:25.523Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 4.799 ms',
  timestamp: '2023-03-06T00:54:25.820Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T00:55:46.675Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 8080',
  timestamp: '2023-03-06T00:55:46.803Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /register 302 76 - 20201.840 ms',
  timestamp: '2023-03-06T00:56:17.204Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /register/failed 304  - 98.395 ms',
  timestamp: '2023-03-06T00:56:17.410Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 3.976 ms',
  timestamp: '2023-03-06T00:56:17.626Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T02:52:00.934Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T02:52:45.685Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 3000',
  timestamp: '2023-03-06T02:52:45.798Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login 200 768 - 157.674 ms',
  timestamp: '2023-03-06T02:52:58.814Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 200 5271 - 26.278 ms',
  timestamp: '2023-03-06T02:52:58.903Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /favicon.ico 404 150 - 4.638 ms',
  timestamp: '2023-03-06T02:52:58.987Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /login 302 70 - 10044.407 ms',
  timestamp: '2023-03-06T02:53:15.246Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /login/failed 200 831 - 29.591 ms',
  timestamp: '2023-03-06T02:53:15.941Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /style.css 304  - 1.859 ms',
  timestamp: '2023-03-06T02:53:16.038Z',
  label: 'e-Commerce Backend Debuger'
}
{
  message: 'Mongo Connected',
  level: 'info',
  timestamp: '2023-03-06T03:07:09.787Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'Server Up in port 3000',
  timestamp: '2023-03-06T03:07:09.872Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'POST /login 302 54 - 317.311 ms',
  timestamp: '2023-03-06T03:07:35.704Z',
  label: 'e-Commerce Backend Debuger'
}
{
  level: 'info',
  message: 'GET /home 404 143 - 12.116 ms',
  timestamp: '2023-03-06T03:07:36.170Z',
  label: 'e-Commerce Backend Debuger'
}
